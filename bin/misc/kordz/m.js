var kordz = (function(){  "use strict"  var     SORT_NUM,    guitar,    tones = [      'C', // 0      '',  // 1      'D', // 2      '',  // 3      'E', // 4      'F', // 5      '',  // 6      'G', // 7      '',  // 8      'A', // 9      '',  // 10      'B'  // 11    ],    prettytones = [],    t2i = {      'C':  0,      'C#': 1,      'Db': 1,      'D':  2,      'D#': 3,      'Eb': 3,      'E':  4,      'Fb': 4,      'E#': 5,      'F':  5,      'F#': 6,      'Gb': 6,      'G':  7,      'G#': 8,      'Ab': 8,      'A':  9,      'A#': 10,      'Bb': 10,      'B':  11,      'Cb': 11,      'B#': 12    },    scale = [2, 2, 1, 2, 2, 2, 1],    all_the_chord_intervals = {},    all_the_chords_list = [],    all_the_chords = {      '': {        def: [0, 4, 7],        name: "Major",        also: ['M', 'maj', 'Δ']      },      'm': {        def: [0, 3, 7],        name: "Minor",        also: ['min', '-']      },      'aug': {        def: [0, 4, 8],        name: "Augmented",        also: ['+']      },      'dim': {        def: [0, 3, 6],        name: "Diminished",        also: ['°']      },      '7': {        def: [0, 4, 7, 10],        name: "Seventh",        also: ['dom7']      },      'maj7': {        def: [0, 4, 7, 11],        name: "Major seventh",        also: ['M7', 'Ma7', 'j7', 'Δ7', 'Δ']      },      'minmaj7': {        def: [0, 3, 7, 11],        name: "Minor-major seventh",        also: ['mM7', 'm#7', '−M7', '−Δ7', '−Δ']      },      'm7': {        def: [0, 3, 7, 10],        name: "Minor seventh",        also: ['min7', '-7']      },      'augmaj7': {        def: [0, 4, 8, 11],        name: "Augmented-major seventh",        also: ['+M7', '+Δ', 'M7#5', 'M7+5', 'Δ#5', 'Δ+5']      },      'aug7': {        def: [0, 4, 8, 10],        name: "Augmented seventh",        also: ['+7', '7#5', '7+5']      },      'min7dim5': {        def: [0, 3, 6, 10],        name: "Half-diminished seventh",        also: ['Ø', 'Ø7', 'ø', 'ø7', 'm7b5', 'm7°5', '−7b5', '−7°5']      },      'dim7': {        def: [0, 3, 6, 9],        name: "Diminished seventh",        also: ['o7', '°7']      },      '7b5': {        def: [0, 4, 6, 10],        name: "Seventh flat five",        also: ['dom7dim5']      }    };  function toneByInt(i, one){    i = i % 12;    if (tones[i]) {      return tones[i]    }    if (one) {      return tones[i - 1] + '#'    }    return [      tones[i - 1] + '#',      tones[i + 1] + 'b'    ]  }  function toneByInts(ints){    var i, tone, ret = [], last    for (i = 0; i < ints.length; i++) {      tone = toneByInt(ints[i]);      if (typeof tone === 'string') {        ret.push(tone);      } else {        last = ret[ret.length - 1]        if (tone[0][0] === last) {          ret.push(tone[1])        } else {          ret.push(tone[0])        }      }    }    return ret  }  function intByTone(tone){    if (typeof tone === 'number') {      return tone    }    tone = tone.toUpperCase()    if (typeof tone[1] !== 'undefined') {      tone = tone[0] + tone[1].toLowerCase()    }    return t2i[tone]  }  function getScaleInts(rootint){    var      curr = parseInt(rootint, 10) || 0,      res = [curr],      i;    for (i = 0; i < scale.length; i++) {      curr += scale[i]      res.push(curr)    }    return res  }  function getScale(root){    var       i = intByTone(root),      s = getScaleInts(i)    return toneByInts(s)  }  function parseChord(ch){    var root, type, type1;    ch = ch.replace(/\s/g, '')    root = ch.substr(0, 1)    type = ch.substr(1)    type1 = type.substr(0, 1)    if (type1 === '#' || type1 === 'b') {      root += type1      type = type.substring(1)    }    if (!type) {      type = ''    }    return [root, type]  }  function getChordTones(chord){    var       ints = [],      ch = parseChord(chord),      root = intByTone(ch[0]),      type = ch[1],      def,       i    if (!all_the_chords[type]) {      return false    }    def = all_the_chords[type].def;    for (i = 0; i < def.length; i++) {      ints.push(root + def[i])    }    return toneByInts(ints)  }  function reverseChord(tones){    var       chord,       i,      ints = [],       iroot = intByTone(tones.shift()),      next;    for (i = 0; i < tones.length; i++) {      next = intByTone(tones[i].toUpperCase())      if (next < iroot) {        next += 12;      }      if (next !== iroot) {        ints.push(next - iroot)      }    }    ints.sort(SORT_NUM)    ints.unshift(0)    chord = all_the_chord_intervals[ints.toString()]    if (!chord) {      return chord    }    chord.root = toneByInt(iroot, true)    chord.short = chord.root + chord.id    return chord  }    function getChordData(cshort) {    return all_the_chords[cshort]  }    SORT_NUM = function(a, b){    return a - b  }  (function(){    var lookup = {}, reverse = {}, i, j = 0, id    for (i in all_the_chords) {      if (all_the_chords.hasOwnProperty(i)) {        lookup[i] = all_the_chords[i]        id = lookup[i].def.toString()        reverse[id] = lookup[i]        reverse[id].id = i        for (j = 0; j < all_the_chords[i].also.length; j++) {          lookup[all_the_chords[i].also[j]] = all_the_chords[i]        }        all_the_chords_list.push(i)      }    }    all_the_chords = lookup;    all_the_chord_intervals = reverse    prettytones = tones.slice()    for (i = 0; i < 12; i++) {      if (prettytones[i] === '') {        prettytones[i] = toneByInt(i).join('/')      }    }  }())  guitar = {    strings: ['E', 'B', 'G', 'D', 'A', 'E'],    strints: [4, 11, 7, 2, 9, 4],    frettpl: {      'x': 'x||---|---|---|---|---|-',      '0': 'o||---|---|---|---|---|-',      '1': ' ||-o-|---|---|---|---|-',      '2': ' ||---|-o-|---|---|---|-',      '3': ' ||---|---|-o-|---|---|-',      '4': ' ||---|---|---|-o-|---|-',      '5': ' ||---|---|---|---|-o-|-'    },     toneAt: function(string, fret){      var open = this.strints[string - 1]      return toneByInt(open + fret, true)    },    findFret: function(tone, string){      var fret, open = this.strints[string - 1]      tone = intByTone(tone)      if (tone < open) {        tone += 12      }      fret = tone - open      return fret    },    getChord: function(chordname){      var         tones = getChordTones(chordname),        root,        string,        i,        frets,        result = [          'ignore',          'x',          'x',          'x',          'x',          'x',          'x'        ];      if (!tones[0]) {        return false      }      root = this.findRoot(tones[0])      result[root[0]] = root[1]      for (string = root[0] - 1; string > 0; string--) {        frets = []        for (i = 0; i < tones.length; i++) {          frets.push(this.findFret(tones[i], string))        }        frets.sort(SORT_NUM)        result[string] = frets[0]      }      return result    },    findRoot: function(tone){      var string, fret      for (string = 6; string > 3; string--) {        fret = this.findFret(tone, string)        if (fret < 5) {          return [string, fret]        }      }    },    chordByFrets: function(frets){      var         fret,         i,         root,        rootstring = 0,         string,         tone,        tones = {},         tonesa = []      for (i in frets) {        if (frets.hasOwnProperty(i)) {          if (frets[i] === 'x') {            continue          }          fret = parseInt(frets[i], 10)          string = parseInt(i, 10)          tone = this.toneAt(string, fret)          tones[tone] = 1          if (rootstring < i) {            rootstring = i            root = tone          }        }      }      delete tones[root]      for (i in tones) {        if (tones.hasOwnProperty(i)) {          tonesa.push(i)        }      }      tonesa.unshift(root)      return reverseChord(tonesa)    },    printChord: function (chordname, out){      var         frets = this.getChord(chordname),        i,        res = [];      if (out === 'tab') {        for (i = 1; i < frets.length; i++) {          res.push(this.frettpl[frets[i]])        }            } else {        for (i = 1; i < frets.length; i++) {          res.push('-' + frets[i] + '-')        }      }      return res.join('\n')    }  }  return {    allchords: all_the_chords_list,    prettytones: prettytones,    getChordData: getChordData,    getScale: getScale,    parseChord: parseChord,    getChordTones: getChordTones,    reverseChord: reverseChord,    guitar: guitar  };  }())if (typeof exports === 'object') {  exports.kordz = kordz}