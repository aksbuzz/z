<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE HLScheme>
<SyntaxScheme>
<!-- Scheme part-->

<scheme name="CPP" extensions="cpp;h;cxx">

    <context id="comment" format="comment" >
        <start>/*</start>
        <stop>*/</stop>
        <escape>\\</escape>
    </context>

    <words id="keyword0" format="keyword0">goto break return continue asm case default if else switch while for do sizeof typeof</words>

    <words id="keyword1" format="keyword1">int long short char void signed unsigned float double size_t ssize_t wchar_t ptrdiff_t sig_atomic_t fpos_t clock_t time_t va_list jmp_buf FILE DIR div_t ldiv_t mbstate_t wctrans_t wint_t wctype_t bool complex int8_t int16_t int32_t int64_t uint8_t uint16_t uint32_t uint64_t int_least8_t int_least16_t int_least32_t int_least64_t uint_fast8_t uint_fast16_t uint_fast32_t uint_fast64_t intptr_t uintptr_t intmax_t uintmax_t __label__ __complex__ __volatile__ struct union enum typedef static register auto volatile extern const inline __attribute__</words>

    <words id="keyword2" format="keyword2">TODO FIXME XXX \\author \\brief \\bug \\callgraph \\category \\class \\code \\date \\def \\depreciated \\dir \\dot \\dotfile \\else \\elseif \\em \\endcode \\enddot \\endif \\endverbatim \\example \\exception \\file \\if \\endif \\endverbatim \\example \\exception \\file \\if \\ifnot \\image \\include \\link \\mainpage \\name \\namespace \\page \\par \\paragraph \\param \\return \\retval \\section \\struct \\subpage \\subsection \\subsubsection \\test \\todo \\typedef \\union \\var \\verbatim \\version \\warning \\$ \\@ \\~ \\# \\% HAC</words>

    <words id="keyword3" format="keyword3">new delete this friend using throw try catch opperator typeid and bitor or xor compl bitand and_eq or_eq xor_eq not not_eq const_cast static_cast dynamic_cast reinterpret_cast true false</words>

    <words id="keyword4" format="keyword4">public protected private inline virtual explicit export bool wchar_t mutable class typename template namespace</words>

    <word id="deco1" format="deco1" mini="true">#include.*$</word>

    <word id="comment1" format="comment1" comment="true" not_in="'">//</word>

</scheme>
<!-- Snippets part-->
<snip>

    <entry>
        <trigger>.</trigger>
        <description>self</description>
        <snippet>self</snippet>
    </entry>

</snip>

</SyntaxScheme>
