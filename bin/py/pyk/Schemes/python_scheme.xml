<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE HLScheme>
<!-- Remember these escape chars in XML
&lt; 	< 	less than
&gt; 	> 	greater than
&amp; 	& 	ampersand 
&apos; 	' 	apostrophe
&quot; 	" 	quotation mark
&lt;b&gt;
 -->
<SyntaxScheme>
<!-- Scheme part-->

<scheme name="Python" extensions="py;pyw">

    <context id="string/triplesimple" format="string" >
        <start>'''</start>
        <stop>'''</stop>
        <escape>\\</escape>
    </context>

    <context id="string/tripledouble" format="string/double" >
        <start>"""</start>
        <stop>"""</stop>
        <escape>\\</escape>
    </context>

    <words id="keyword" format="keyword0">class def</words>

    <words id="keyword" format="keyword1">and as assert break continue del elif else except exec finally for from global if import in is lambda not or pass print raise return self try while with yield True False</words>

    <words id="keyword" format="keyword2">abs all any basestring bool callable chr classmethod cmp compile complex delattr dict dir divmod enumerate eval execfile exit file filter float frozenset getattr globals hasattr hex id int isinstance issubclass iter len list locals long map max min object oct open ord pow property range reduce repr reversed round set setattr slice sorted staticmethod str sum super tuple type unichr unicode vars xrange zip</words>

    <words id="keyword" format="keyword3">array bisect bsddb bz2 codecs collections copy datetime decimal functools getopt gzip heapq itertools math optparse os os.path pickle cPickle random re string StringIO cStringIO struct subprocess sys tarfile time unicodedata weakref zipfile</words>


    <word id="numbers" format="numbers">\b\d+\b</word>
    <word id="comment" format="comment" comment="true" not_in="'">#</word>
    <word id="decoration" format="deco0">@\w+</word>
    <word id="string/simple" format="string/simple" mini="true">(?:'[^']*'|"[^"]*")</word>
    <word id="decoration" format="deco1">[\(|\)|\[|\]|\{|\}]</word>
    <word id="decoration" format="deco2">[=|;|\:|\+|-|\*|/|\.]</word>
    <word id="keyword" format="keyword4">\s+\w+(?=\(.*\):)</word>
    <word id="keyword" format="keyword5">PyQt4|Qt?[A-z]+|Q[A-Z][A-z]+</word>
</scheme>

<!-- Snippets part-->
<snip>

    <entry>
        <trigger>pcom</trigger>
        <description>python comments1</description>
        <snippet># ${1:comment name}
        </snippet>
    </entry>

    <entry>
        <trigger>deco</trigger>
        <description>decorator</description>
        <snippet>@${1:decorator}
        </snippet>
    </entry>

    <entry>
        <trigger>dic</trigger>
        <description>dictionnary</description>
        <snippet>${1:Dictionnary Name} = { ${2:dicit}$0}</snippet>
    </entry>

    <entry>
        <trigger>dicit</trigger>
        <description>dictionnary item</description>
        <snippet>${1:key} : ${2:value}, $0</snippet>
    </entry>

    <entry>
        <trigger>try</trigger>
        <description>Add a link without reference</description>
        <snippet>try:
    ${1:First case}
except:
    ${2:Second case}
finally:
    ${3:Last Case}
$0</snippet>
    </entry>

    <entry>
        <trigger>from</trigger>
        <description>from import</description>
        <snippet>from ${1:Module} import ${2:Something}</snippet>
    </entry>

    <entry>
        <trigger>def</trigger>
        <description>function def</description>
        <snippet>def ${1:name}(${2:args}):
    ${3:pass}</snippet>
    </entry>

    <entry>
        <trigger>cdef</trigger>
        <description>class function def</description>
        <snippet>def ${1:name}(self,${2:args}):
    ${3:pass}</snippet>
    </entry>

    <entry>
        <trigger>cl</trigger>
        <description>Python class definition snippet</description>
        <snippet>class ${1:name}(${2:object}):
    def __init__(self, ${3:args}):
        ${3:pass}</snippet>
    </entry>

    <entry>
        <trigger>for</trigger>
        <description>for boucle</description>
        <snippet>for ${1:variable} in range(${2:lenght}):
    ${3:pass}</snippet>
    </entry>
    
    <entry>
        <trigger>pr</trigger>
        <description>print</description>
        <snippet>print ${1:something}</snippet>
    </entry>
    
    <entry>
        <trigger>pd</trigger>
        <description>print debug</description>
        <snippet>print '${1:SomeChain} %$2'%(${2:replacement})</snippet>
    </entry>
    
    <entry>
        <trigger>sqs</trigger>
        <description>simple quoted strings</description>
        <snippet>'${1:SomeChain}'</snippet>
    </entry>

    <entry>
        <trigger>.</trigger>
        <description>self</description>
        <snippet>self</snippet>
    </entry>

</snip>

</SyntaxScheme>
