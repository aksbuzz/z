.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.31)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PIP 1"
.TH PIP 1 "2015-10-26" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pip \- wrap programs to use them as filters
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`pip [\-I] [\-O] [\-i|\-o|\-b]... PROG ARGUMENTS\*(C'\fR
.PP
where for every \f(CW\*(C`\-i\*(C'\fR (input), \f(CW\*(C`\-o\*(C'\fR (output), or \f(CW\*(C`\-b\*(C'\fR (both) switch,
there is one argument of the form '\-', or '\-.foo' for some string
\&'foo'.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The '\-' or '\-.foo' arguments are placeholders and are matched up
left-to-right with the \f(CW\*(C`\-i\*(C'\fR, \f(CW\*(C`\-o\*(C'\fR and \f(CW\*(C`\-b\*(C'\fR switches.  Each placeholder is
replaced by the name of a temporary file.  For a \f(CW\*(C`\-i\*(C'\fR switch this is an
input file, which is created by pip before the command runs and
contains data read from pip's standard input.  For \f(CW\*(C`\-o\*(C'\fR it is an
output file, whose contents are printed after the command runs.  For
\&\f(CW\*(C`\-b\*(C'\fR the temporary file is both an input file and an output file.
.PP
If a placeholder argument has the form '\-.foo' then the temporary
filename will end in '.foo'.  This is useful for programs which change
behaviour based on filename, such as the C compiler.  But note that an
argument of '\-foo' would not be changed.
.PP
The \f(CW\*(C`\-I\*(C'\fR switch is used with programs that can read from standard
input, but require it to be seekable.  Pip buffers standard input into
a file if necessary.  (If both \f(CW\*(C`\-I\*(C'\fR and input placeholders are used,
the program's standard input will be buffered but unchanged \- not
empty as it would be without \f(CW\*(C`\-I\*(C'\fR.)  Similarly <\-O> causes the
program's standard output to be buffered to a file and written
after the program has terminated.
.PP
If there are multiple input files then each input file gets the same
data.  If there are multiple output files then each output file is
printed in turn.  If there are no input files then standard input is
passed through unchanged to the program.  If the program prints
anything to its standard output then this appears before the content
of any output files (whether or not the \f(CW\*(C`\-O\*(C'\fR flag was used).
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.ie n .IP """pip \-i mozilla \-""" 4
.el .IP "\f(CWpip \-i mozilla \-\fR" 4
.IX Item "pip -i mozilla -"
will read a file from standard input, and give it to mozilla to
display.  The final commandline might be \f(CW\*(C`mozilla /tmp/pip123.tmp\*(C'\fR.
.ie n .IP """pip \-io cc \-.c \-o \-""" 4
.el .IP "\f(CWpip \-io cc \-.c \-o \-\fR" 4
.IX Item "pip -io cc -.c -o -"
will pipe a C program through the compiler, giving an executable on
standard output.  The temporary input filename given to cc will end in
\&'.c'.
.ie n .IP """pip \-b emacs \-""" 4
.el .IP "\f(CWpip \-b emacs \-\fR" 4
.IX Item "pip -b emacs -"
will read data, give the user the chance to modify it in emacs, and
then print it.
.ie n .IP """pip \-I dvips \-f""" 4
.el .IP "\f(CWpip \-I dvips \-f\fR" 4
.IX Item "pip -I dvips -f"
runs dvips in 'filter' mode, which can read from stdin but needs it to
be seekable.
.ie n .IP """pip \-O pnmtotiff""" 4
.el .IP "\f(CWpip \-O pnmtotiff\fR" 4
.IX Item "pip -O pnmtotiff"
turns pnmtotiff, which requires that its stdout be seekable, into a
general filter program.
.SH "COMPARISON WITH REAL PIPES"
.IX Header "COMPARISON WITH REAL PIPES"
When using pip you must wait for all input to be consumed before the
command is run, and for the command to exit before seeing any of the
output.  You don't get partial output as you would with pipes.
But pip works with programs that seek backwards and forwards in their
input, and which may write their output in a strange order too.  This
makes it work in places where the shell's process substitution
would not.
.PP
For some programs you may find the devices /dev/stdin and /dev/stdout
a better option than pip, since these allow partial input and partial
output.  However they are not seekable, so will not work with all
programs.
.SH "BUGS"
.IX Header "BUGS"
Because pip unlinks temporary files before exiting, and exits as soon
as running the program returns, any command which puts itself
into the background before opening its input files will not work.
.PP
Not related to the \s-1CP/M\s0 command of the same name.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIpip_tex\fR\|(1).
.SH "AUTHOR"
.IX Header "AUTHOR"
Ed Avis, ed@membled.com
