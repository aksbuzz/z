{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\froman\fcharset128\fprq1{\*\panose 00000000000000000000}Mincho{\*\falt ??};}{\f16\fnil\fcharset129\fprq1{\*\panose 00000000000000000000}Batang{\*\falt ??};}
{\f17\fnil\fcharset134\fprq2{\*\panose 00000000000000000000}SimSun{\*\falt ??};}{\f18\fnil\fcharset136\fprq2{\*\panose 00000000000000000000}PMingLiU{\*\falt ????};}{\f19\fmodern\fcharset128\fprq1{\*\panose 00000000000000000000}Gothic{\*\falt ?????};}
{\f20\fmodern\fcharset129\fprq1{\*\panose 00000000000000000000}Dotum{\*\falt ??};}{\f21\fmodern\fcharset134\fprq1{\*\panose 00000000000000000000}SimHei{\*\falt ??};}{\f22\fmodern\fcharset136\fprq1{\*\panose 00000000000000000000}MingLiU{\*\falt ???};}
{\f23\froman\fcharset128\fprq1{\*\panose 00000000000000000000}MS Mincho{\*\falt ?? ??};}{\f24\froman\fcharset129\fprq1{\*\panose 00000000000000000000}Gulim{\*\falt ??};}
{\f25\fmodern\fcharset128\fprq1{\*\panose 00000000000000000000}MS Gothic{\*\falt ?? ????};}{\f26\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Century;}{\f27\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f28\froman\fcharset0\fprq2{\*\panose 02040502050405020303}Georgia;}{\f29\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f30\froman\fcharset238\fprq2 Times New Roman CE;}{\f31\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f33\froman\fcharset161\fprq2 Times New Roman Greek;}{\f34\froman\fcharset162\fprq2 Times New Roman Tur;}{\f35\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f36\froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f37\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f38\fswiss\fcharset238\fprq2 Arial CE;}{\f39\fswiss\fcharset204\fprq2 Arial Cyr;}{\f41\fswiss\fcharset161\fprq2 Arial Greek;}{\f42\fswiss\fcharset162\fprq2 Arial Tur;}
{\f43\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f44\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f45\fswiss\fcharset186\fprq2 Arial Baltic;}{\f46\fmodern\fcharset238\fprq1 Courier New CE;}{\f47\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f49\fmodern\fcharset161\fprq1 Courier New Greek;}{\f50\fmodern\fcharset162\fprq1 Courier New Tur;}{\f51\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f52\fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f53\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f246\fswiss\fcharset238\fprq2 Tahoma CE;}{\f247\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f249\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f250\fswiss\fcharset162\fprq2 Tahoma Tur;}
{\f251\fswiss\fcharset177\fprq2 Tahoma (Hebrew);}{\f252\fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f253\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f262\fswiss\fcharset238\fprq2 Verdana CE;}{\f263\fswiss\fcharset204\fprq2 Verdana Cyr;}
{\f265\fswiss\fcharset161\fprq2 Verdana Greek;}{\f266\fswiss\fcharset162\fprq2 Verdana Tur;}{\f269\fswiss\fcharset186\fprq2 Verdana Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{
\s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 heading 1,H1;}{
\s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \snext0 heading 2,H2;}{
\s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \snext0 heading 3,H3;}{
\s4\ql \li720\ri0\sa120\keep\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f29\fs30\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \snext0 heading 4,H4;}{
\s5\ql \li720\ri0\sa120\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin720\itap0 \f29\fs22\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \sbasedon4 \snext0 heading 5,H5;}{\s6\ql \li720\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f8\fs22\ul\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 6;}{\s7\ql \li720\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \i\f8\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 7;}{\s8\ql \li720\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \i\f8\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 8;}{\s9\ql \li720\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \i\f8\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\ql \li360\ri0\sa180\sl270\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Intro;}{\s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 
\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext16 Code;}{\s17\ql \li360\ri0\sa60\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 
\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 \sbasedon16 \snext18 CodeInline;}{\s18\ql \li1224\ri0\sa20\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1224\itap0 
\f28\fs6\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \snext0 CodeInlineTrailer;}{\s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 toc 2;}{\s20\ql \fi-202\li202\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin202\itap0 
\f28\fs18\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 index 1;}{\s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 
\f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 \sbasedon0 \snext0 toc 1;}{\s22\ql \fi-200\li400\ri0\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin400\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 index 2;}{\s23\ql \fi-200\li600\ri0\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin600\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 index 3;}{\s24\ql \fi-200\li800\ri0\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin800\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 index 4;}{\s25\ql \fi-200\li1000\ri0\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1000\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 index 5;}{\s26\ql \fi-200\li1200\ri0\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1200\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 index 6;}{\s27\ql \fi-200\li1400\ri0\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1400\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 index 7;}{\s28\ql \fi-200\li1600\ri0\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1600\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 index 8;}{\s29\ql \fi-200\li1800\ri0\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin1800\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 index 9;}{\s30\ql \li360\ri0\sb360\sa240\sl240\slmult0\widctlpar\brdrt\brdrs\brdrw30 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\b\i\f28\fs24\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext20 index heading;}{\s31\ql \li1008\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1008\itap0 
\f28\fs16\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 toc 3;}{\s32\ql \li600\ri0\sa180\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin600\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 toc 4;}{\s33\ql \li800\ri0\sa180\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin800\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 toc 5;}{\s34\ql \li1000\ri0\sa180\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1000\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 toc 6;}{\s35\ql \li1200\ri0\sa180\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1200\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 toc 7;}{\s36\ql \li1400\ri0\sa180\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1400\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 toc 8;}{\s37\ql \li1600\ri0\sa180\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1600\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 toc 9;}{\s38\ql \li0\ri0\sa120\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext38 Body Text;}{\s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin1080\itap0 \f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext39 
Exercises;}{\s40\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \cbpat9 \f27\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext40 Document Map;}{\*\cs41 \additive \ul\cf12 
\sbasedon10 FollowedHyperlink;}{\*\cs42 \additive \ul\cf2 \sbasedon10 Hyperlink;}{\s43\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext43 h;}{\s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext44 footnote text;}{\*\cs45 \additive 
\super \sbasedon10 footnote reference;}{\s46\ql \fi-648\li1008\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1008\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin1008\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext46 Numbered;}{\s47\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\tqc\tx4320\tqr\tx8640\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext47 header;}{
\s48\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\tqc\tx4320\tqr\tx8640\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext48 footer;}{
\s49\ql \fi-1080\li994\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin994\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext0 ContentsHeading;}{
\s50\qc \li0\ri0\sl-1440\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f28\fs160\expnd-4\expndtw-20\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext50 Title;}{\*\cs51 \additive 
\fs20\loch\f2\hich\af2\dbch\af2 \sbasedon10 HTML Code;}{\*\cs52 \additive \fs20\loch\f2\hich\af2\dbch\af2 \sbasedon10 HTML Typewriter;}{\s53\qc \li360\ri0\sb360\sa600\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs60\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext53 Body Text 2;}{\s54\qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs64\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext54 Title Small;}{\s55\qc \li360\ri0\sb360\sa600\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs60\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon53 \snext55 Title Page Subtitle 1;}{\s56\qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs64\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext56 Title Page Subtitle 2;}{\s57\qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs48\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext57 Title Page Subtitle 3;}{\*\cs58 \additive \b \sbasedon10 Strong;}}{\*\listtable{\list\listtemplateid-234070958\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc2
\leveljcn2\levelfollow0\levelstartat1\levelspace1080\levelindent0{\leveltext\leveltemplateid78657612\'03\'00. ;}{\levelnumbers\'01;}\b0\i0\f29\fs24\ulnone\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \s39\fi-360\li1080\jclisttab\tx1080 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1080\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1080
\jclisttab\tx1080 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace1080\levelindent0{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 
\fi-180\li1800\jclisttab\tx1800 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1080\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1 \fi-360\li2520\jclisttab\tx2520 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1080\levelindent0{\leveltext\leveltemplateid67698713\'02\'04.;}{\levelnumbers\'01;}\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li3240\jclisttab\tx3240 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace1080\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li3960\jclisttab\tx3960 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1080\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers
\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li4680\jclisttab\tx4680 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace1080\levelindent0{\leveltext\leveltemplateid67698713
\'02\'07.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li5400\jclisttab\tx5400 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace1080\levelindent0{\leveltext
\leveltemplateid67698715\'02\'08.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li6120\jclisttab\tx6120 }{\listname ;}\listid46731136}{\list\listtemplateid-1944669174\listhybrid{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1080\jclisttab\tx1080 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1800\jclisttab\tx1800 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2520
\jclisttab\tx2520 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 
\fi-360\li3240\jclisttab\tx3240 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3960\jclisttab\tx3960 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4680\jclisttab\tx4680 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689
\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5400\jclisttab\tx5400 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6120\jclisttab\tx6120 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0
{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6840\jclisttab\tx6840 }{\listname ;}\listid355665301}{\list\listtemplateid364415948\listhybrid{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1080\jclisttab\tx1080 }{\listlevel
\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'01.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1800\jclisttab\tx1800 }
{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li2520
\jclisttab\tx2520 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 
\fi-360\li3240\jclisttab\tx3240 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'04.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1 \fi-360\li3960\jclisttab\tx3960 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li4680\jclisttab\tx4680 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers\'01;}
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li5400\jclisttab\tx5400 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'07.;}{\levelnumbers
\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li6120\jclisttab\tx6120 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715
\'02\'08.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li6840\jclisttab\tx6840 }{\listname ;}\listid393240191}{\list\listtemplateid976500006\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid303452696\'02\'00.;}{\levelnumbers\'01;}\f29\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \s46\fi-648\li1008\jclisttab\tx1008 }{\listlevel\levelnfc4\levelnfcn4\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'01.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc2\levelnfcn2
\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'02.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li2160\jclisttab\tx2160 }{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703\'02\'03.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li2880\jclisttab\tx2880 }{\listlevel
\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'04.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li3600\jclisttab\tx3600 }
{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'05.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li4320
\jclisttab\tx4320 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698703\'02\'06.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 
\fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698713\'02\'07.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698715\'02\'08.;}{\levelnumbers\'01;}\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-180\li6480\jclisttab\tx6480 }{\listname ;}\listid571043402}{\list\listtemplateid15361078\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1080\jclisttab\tx1080 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1800\jclisttab\tx1800 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2520\jclisttab\tx2520 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3240\jclisttab\tx3240 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3960\jclisttab\tx3960 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4680
\jclisttab\tx4680 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 
\fi-360\li5400\jclisttab\tx5400 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6120\jclisttab\tx6120 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6840\jclisttab\tx6840 }{\listname ;}\listid879438500}{\list\listtemplateid1040641540\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1080\jclisttab\tx1080 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1800\jclisttab\tx1800 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2520\jclisttab\tx2520 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3240\jclisttab\tx3240 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3960\jclisttab\tx3960 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4680
\jclisttab\tx4680 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 
\fi-360\li5400\jclisttab\tx5400 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6120\jclisttab\tx6120 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6840\jclisttab\tx6840 }{\listname ;}\listid1028916564}{\list\listtemplateid332574114\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1080\jclisttab\tx1080 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1800\jclisttab\tx1800 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2520\jclisttab\tx2520 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3240\jclisttab\tx3240 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3960\jclisttab\tx3960 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4680
\jclisttab\tx4680 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 
\fi-360\li5400\jclisttab\tx5400 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6120\jclisttab\tx6120 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6840\jclisttab\tx6840 }{\listname ;}\listid1338459850}{\list\listtemplateid-30253068\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1080\jclisttab\tx1080 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1800\jclisttab\tx1800 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2520\jclisttab\tx2520 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3240\jclisttab\tx3240 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3960\jclisttab\tx3960 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4680
\jclisttab\tx4680 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 
\fi-360\li5400\jclisttab\tx5400 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6120\jclisttab\tx6120 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6840\jclisttab\tx6840 }{\listname ;}\listid1841845223}}{\*\listoverridetable{\listoverride\listid571043402\listoverridecount0\ls1}{\listoverride\listid46731136\listoverridecount1{\lfolevel
\listoverridestartat\levelstartat1}\ls2}{\listoverride\listid46731136\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls3}{\listoverride\listid571043402\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls4}
{\listoverride\listid46731136\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls5}{\listoverride\listid46731136\listoverridecount0\ls6}{\listoverride\listid46731136\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls7}
{\listoverride\listid46731136\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls8}{\listoverride\listid46731136\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls9}{\listoverride\listid46731136\listoverridecount1{\lfolevel
\listoverridestartat\levelstartat1}\ls10}{\listoverride\listid46731136\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls11}{\listoverride\listid46731136\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls12}
{\listoverride\listid46731136\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls13}{\listoverride\listid393240191\listoverridecount0\ls14}{\listoverride\listid46731136\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls15}
{\listoverride\listid1841845223\listoverridecount0\ls16}{\listoverride\listid1338459850\listoverridecount0\ls17}{\listoverride\listid571043402\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls18}{\listoverride\listid1028916564
\listoverridecount0\ls19}{\listoverride\listid355665301\listoverridecount0\ls20}{\listoverride\listid46731136\listoverridecount1{\lfolevel\listoverridestartat\levelstartat1}\ls21}{\listoverride\listid879438500\listoverridecount0\ls22}}{\*\revtbl {Unknown;}}{\info
{\title Thinking in Python}{\author Bruce Eckel}{\operator Bruce Eckel}{\creatim\yr2001\mo12\dy31\hr8\min24}{\revtim\yr2001\mo12\dy31\hr8\min24}{\printim\yr2000\mo2\dy29\hr14\min11}{\version2}{\edmins0}{\nofpages1}{\nofwords45595}{\nofchars259895}
{\*\company www.MindView.net}{\nofcharsws319169}{\vern8269}}\margl2520\margr2160\margt2491\margb2563 
\facingp\widowctrl\ftnbj\aenddoc\ftnrestart\hyphhotz144\margmirror\noextrasprl\prcolbl\cvmme\sprsspbf\brkfrm\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\lytprtmet\hyphcaps0\hyphconsec2\horzdoc\fracwidth\dghspace180\dgvspace180\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow0\jexpand\viewkind4\viewscale120\pgbrdrhead\pgbrdrfoot\bdrrlswsix\nolnhtadjtbl \fet0{\*\docvar {commentCounter}{316}}{\*\docvar {filled}{0}}{\*\docvar {LastIndexSelection}{test}}\sectd 
\binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\s50\qc \li0\ri0\sl-1440\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f28\fs160\expnd-4\expndtw-20\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Thinking
\par }\pard\plain \s54\qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs64\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {in
\par }\pard\plain \s50\qc \li0\ri0\sl-1440\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f28\fs160\expnd-4\expndtw-20\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Python
\par }\pard\plain \s55\qc \li360\ri0\sb360\sa600\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs60\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Design Patterns and Problem-Solving  Techniques
\par }\pard\plain \s56\qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs64\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Bruce Eckel
\par }\pard\plain \s57\qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs48\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {President, MindView, Inc.
\par }\pard\plain \ql \li360\ri0\sb360\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_1]#}{
Please note that this document is in its initial form, and much remains to be done.  \sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain 
\s49\ql \fi-1080\li994\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin994\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Contents
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst { TOC \\o "1-3" \\h \\z }}{\fldrslt {\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420052"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350032000000}}}{\fldrslt {\cs42\ul\cf2 Preface}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420052 \\h }{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350032000000}}}{\fldrslt {\webhidden 5}}}}}{\f0\fs24\kerning0 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420053"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350033000000}}}{\fldrslt {\cs42\ul\cf2 
Introduction}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420053 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350033000000}}}{\fldrslt {\webhidden 7}}}}}{
\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420054"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350034000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof The Y2K syndrome}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420054 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350034000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 8}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420055"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350035000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Context and composition}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420055 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350035000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 9}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420056"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350036000000}}}{\fldrslt {\cs42\ul\cf2 
A quick course in Python for programmers}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420056 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350036000000}}
}{\fldrslt {\webhidden 11}}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420057"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350037000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Python overview}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420057 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350037000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 11}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s31\ql \li1008\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1008\itap0 \f28\fs16\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420058"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350038000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Built-in containers}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420058 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350038000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 12}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420059"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350039000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Functions}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420059 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000350039000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 13}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420060"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360030000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Strings}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420060 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360030000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 14}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420061"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360031000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Classes}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420061 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360031000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 16}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420062"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360032000000}}}{\fldrslt {\cs42\ul\cf2 
The pattern concept}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420062 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360032000000}}}{\fldrslt {\webhidden 21}
}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420063"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360033000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof What is a pattern?}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420063 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360033000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 21}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420064"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360034000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Pattern taxonomy}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420064 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360034000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 23}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420065"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360035000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Design Structures}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420065 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360035000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 24}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420066"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360036000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Design principles}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420066 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360036000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 25}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420067"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360037000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof The Singleton}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420067 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360037000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 27}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420068"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360038000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Classifying patterns}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst 
{\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420068 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360038000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 32}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420069"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360039000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof The development challenge}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420069 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000360039000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 33}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420070"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370030000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420070 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370030000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 34}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420071"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370031000000}}}{\fldrslt {\cs42\ul\cf2 
2: Unit Testing}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420071 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370031000000}}}{\fldrslt {\webhidden 34}}}}}{
\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420072"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370032000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Write tests first}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420072 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370032000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 36}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420073"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370033000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Simple Python testing}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420073 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370033000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 37}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420074"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370034000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof A very simple framework}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420074 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370034000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 38}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420075"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370035000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Writing tests}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420075 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370035000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 39}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420076"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370036000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof White-box & black-box tests}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420076 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370036000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 42}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420077"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370037000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Running tests}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420077 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370037000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 44}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420078"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370038000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Automatically executing tests}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420078 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370038000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 47}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420079"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370039000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420079 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000370039000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 47}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420080"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380030000000}}}{\fldrslt {\cs42\ul\cf2 
3: Building application frameworks}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420080 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380030000000}}}{\fldrslt {
\webhidden 47}}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420081"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380031000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Template method}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420081 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380031000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 48}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420082"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380032000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420082 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380032000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 49}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420083"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380033000000}}}{\fldrslt {\cs42\ul\cf2 
4:Fronting for an implementation}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420083 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380033000000}}}{\fldrslt {
\webhidden 49}}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420084"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380034000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Proxy}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420084 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380034000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 50}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420085"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380035000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof State}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420085 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380035000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 52}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420086"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380036000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof StateMachine}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420086 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380036000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 54}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420087"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380037000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Table-Driven State Machine}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420087 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380037000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 61}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s31\ql \li1008\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1008\itap0 \f28\fs16\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420088"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380038000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof The State class}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420088 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380038000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 63}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420089"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380039000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Conditions for transition}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420089 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000380039000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 63}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420090"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390030000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Transition actions}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420090 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390030000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 64}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420091"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390031000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof The table}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420091 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390031000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 64}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420092"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390032000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof The basic machine}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420092 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390032000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 65}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420093"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390033000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Simple vending machine}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420093 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390033000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 65}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420094"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390034000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Testing the machine}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420094 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390034000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 70}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420095"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390035000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Tools}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420095 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390035000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 70}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420096"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390036000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420096 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390036000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 70}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420097"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390037000000}}}{\fldrslt {\cs42\ul\cf2 
X: Decorators: dynamic type selection}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420097 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390037000000}}
}{\fldrslt {\webhidden 72}}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420098"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390038000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Basic decorator structure}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420098 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390038000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 73}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420099"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390039000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof A coffee example}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420099 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003000390039000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 73}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420100"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300030000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Class for each combination}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420100 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300030000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 73}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420101"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300031000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof The decorator approach}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420101 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300031000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 76}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420102"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300032000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Compromise}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420102 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300032000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 79}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420103"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300033000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Other considerations}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst 
{\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420103 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300033000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 82}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420104"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300034000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420104 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300034000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 82}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420105"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300035000000}}}{\fldrslt {\cs42\ul\cf2 
Y: Iterators: decoupling algorithms from containers}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420105 \\h }{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300035000000}}}{\fldrslt {\webhidden 83}}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420106"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300036000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Type-safe iterators}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420106 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300036000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 84}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420107"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300037000000}}}{\fldrslt {\cs42\ul\cf2 
5: Factories: encapsulating object creation}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420107 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300037000000}}
}{\fldrslt {\webhidden 85}}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420108"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300038000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Simple Factory method}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420108 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300038000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 86}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420109"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300039000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Polymorphic factories}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420109 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100300039000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 88}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420110"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310030000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Abstract factories}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420110 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310030000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 90}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420111"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310031000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420111 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310031000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 94}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420112"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310032000000}}}{\fldrslt {\cs42\ul\cf2 
6: Function objects}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420112 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310032000000}}}{\fldrslt {\webhidden 94}
}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420113"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310033000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Command: choosing the operation at run-time}{\lang1024\langfe1024\noproof\webhidden 
\tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420113 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310033000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 95}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420114"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310034000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Strategy: choosing the algorithm at run-time}{\lang1024\langfe1024\noproof\webhidden 
\tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420114 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310034000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 96}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420115"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310035000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Chain of responsibility}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420115 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310035000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 98}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420116"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310036000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420116 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310036000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 101}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420117"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310037000000}}}{\fldrslt {\cs42\ul\cf2 
7: Changing the interface}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420117 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310037000000}}}{\fldrslt {
\webhidden 102}}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420118"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310038000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Adapter}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420118 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310038000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 102}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420119"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310039000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Fa\'e7ade}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420119 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100310039000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 104}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420120"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320030000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420120 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320030000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 105}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420121"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320031000000}}}{\fldrslt {\cs42\ul\cf2 
8: Table-driven code: configuration flexibility}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420121 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320031000000}
}}{\fldrslt {\webhidden 105}}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420122"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320032000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Table-driven code using anonymous inner classes}{
\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420122 \\h }{\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320032000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 105}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420123"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320033000000}}}{\fldrslt {\cs42\ul\cf2 
10: Callbacks}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420123 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320033000000}}}{\fldrslt {\webhidden 107}}}}}{
\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420124"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320034000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Observer}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420124 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320034000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 107}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s31\ql \li1008\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1008\itap0 \f28\fs16\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420125"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320035000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Observing flowers}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420125 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320035000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 109}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420126"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320036000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof A visual example of observers}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420126 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320036000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 116}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420127"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320037000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420127 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320037000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 122}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420128"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320038000000}}}{\fldrslt {\cs42\ul\cf2 
11: Multiple dispatching}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420128 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320038000000}}}{\fldrslt {
\webhidden 122}}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420129"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320039000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Visitor, a type of multiple dispatching}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420129 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100320039000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 127}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420130"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330030000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420130 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330030000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 128}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420131"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330031000000}}}{\fldrslt {\cs42\ul\cf2 
12: Pattern refactoring}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420131 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330031000000}}}{\fldrslt {\webhidden 
130}}}}}{\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420132"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330032000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Simulating the trash recycler}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420132 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330032000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 130}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420133"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330033000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Improving the design}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst 
{\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420133 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330033000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 134}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s31\ql \li1008\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1008\itap0 \f28\fs16\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420134"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330034000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof \'93Make more objects\'94}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420134 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330034000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 135}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420135"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330035000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof A pattern for prototyping creation}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420135 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330035000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 137}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s31\ql \li1008\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1008\itap0 \f28\fs16\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420136"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330036000000}}}{\fldrslt {\cs42\b\ul\cf2\lang1024\langfe1024\noproof Trash}{\cs42\ul\cf2\lang1024\langfe1024\noproof  subclasses}{
\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420136 \\h }{\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330036000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 142}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420137"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330037000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Parsing }{\cs42\b\ul\cf2\lang1024\langfe1024\noproof Trash}{
\cs42\ul\cf2\lang1024\langfe1024\noproof  from an external file}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420137 \\h }{\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330037000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 143}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420138"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330038000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Recycling with prototyping}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420138 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330038000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 146}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420139"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330039000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Abstracting usage}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420139 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100330039000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 147}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420140"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340030000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Multiple dispatching}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst 
{\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420140 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340030000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 151}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s31\ql \li1008\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1008\itap0 \f28\fs16\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420141"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340031000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Implementing the double dispatch}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420141 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340031000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 152}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420142"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340032000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof The }{\cs42\i\ul\cf2\lang1024\langfe1024\noproof Visitor}{
\cs42\ul\cf2\lang1024\langfe1024\noproof  pattern}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420142 \\h }{\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340032000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 158}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s31\ql \li1008\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1008\itap0 \f28\fs16\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420143"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340033000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof A Reflective Decorator}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420143 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340033000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 161}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420144"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340034000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof More coupling?}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420144 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340034000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 166}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420145"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340035000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof RTTI considered harmful?}{\lang1024\langfe1024\noproof\webhidden \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420145 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340035000000}}
}{\fldrslt {\lang1024\langfe1024\noproof\webhidden 166}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420146"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340036000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Summary}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420146 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340036000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 169}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }{\field\fldedit{\*\fldinst {\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420147"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340037000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Exercises}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420147 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340037000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 171}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s21\ql \li0\ri0\sb120\sl240\slmult0\keep\keepn\widctlpar\tqr\tx3557\tqr\tx7560\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \shading1250\cbpat8 \f28\fs28\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 
{\field\fldedit{\*\fldinst {\cs42\ul\cf2  }{HYPERLINK \\l "_Toc534420148"}{\cs42\ul\cf2  }{\ul\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340038000000}}}{\fldrslt {\cs42\ul\cf2 
13: Projects}{\webhidden \tab }{\field{\*\fldinst {\webhidden  PAGEREF _Toc534420148 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340038000000}}}{\fldrslt {\webhidden 171}}}}}{
\f0\fs24\kerning0 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420149"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340039000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Rats & Mazes}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420149 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100340039000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 171}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s31\ql \li1008\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin1008\itap0 \f28\fs16\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420150"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100350030000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof Other maze resources}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst 
{\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420150 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100350030000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 176}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \s19\ql \li720\ri0\sl240\slmult0\widctlpar\tqr\tldot\tx3564\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\lang1024\langfe1024\noproof HYPERLINK \\l "_Toc534420151"}{\cs42\ul\cf2\lang1024\langfe1024\noproof  }{\ul\cf2\lang1024\langfe1024\noproof {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100350031000000}}}{\fldrslt {\cs42\ul\cf2\lang1024\langfe1024\noproof XML Decorator}{\lang1024\langfe1024\noproof\webhidden \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden  PAGEREF _Toc534420151 \\h }{\lang1024\langfe1024\noproof {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003500330034003400320030003100350031000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden 176}}}}}{\f0\fs24\lang1024\langfe1024\kerning0\noproof 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 }}\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v {\*\bkmkstart TOCOverview}{\*\bkmkend TOCOverview}\sect }\sectd 
\binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 
\cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420052}Preface{\*\bkmkend _Toc534420052}
\par }\pard\plain \s15\ql \li360\ri0\sa180\sl270\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
The material in this book began in conjunction with a Java seminar that I have given for several years, a couple of times with Larry O\rquote Brien, then with Bill Venners. Bill and I have given many iterations of this seminar and we\rquote 
ve changed it many times over the years as we both have learned more about patterns and about giving the seminar. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_1" \\o "A_1" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7a00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f0031000000}}}{\fldrslt {\cs42\fs22\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {In the process we\rquote 
ve both produced more than enough information for us each to have our own seminars, an urge that we\rquote ve both strongly resisted because we have so much fun giving the seminar together. We\rquote 
ve given the seminar in numerous places in the US, as well as in Prague (where we try to have a mini-conference every Spring together with a number of other seminars). We\rquote 
ve occasionally given it as an on-site seminar, but this is expensive and difficult to schedule, because there are two of us. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_2" \\o "A_2" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7a00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f0032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par A great deal of appreciation goes to the people who have participated in these seminars over the years, and to Larry and Bill, as they have helped me work through these ideas and
 to refine them. I hope to be able to continue to form and develop these kinds of ideas through this book and seminar for many years to come. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_3" \\o "A_3" 
}{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7a00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f0033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par This book will 
not stop here, either. Originally, this material was part of a C++ book, then a Java book, then it broke off into its own Java-based book, and finally, after much pondering, I decided that the best way to initially create my design patterns treatise is to
 write it in Python first (since we know Python makes an ideal prototyping language!) and then translate the relevant parts of the book }{\i back}{ into the Java version. I\rquote 
ve had the experience before of casting an idea in a more powerful language, then translating it back into another language, and I\rquote ve found that it\rquote s much easier to gain insights and keep the idea clear. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_4" \\o "A_4" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7a00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f0034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par So }{\i Thinking in Python}{ is, initially, a translation of }{\i Thinking in Patterns with Java}{
, rather than an introduction to Python (there are already plenty of fine introductions to that superb language). I find this prospect to be much more exciting than the idea of struggling through another language tut
orial (my apologies to those who were hoping for that). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_5" \\o "A_5" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7a00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f0035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v \sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_2]#
\par \sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0
\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420053}Introduction{\*\bkmkend _Toc534420053}
\par }\pard\plain \s15\ql \li360\ri0\sa180\sl270\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This is a book about design that I have been working on for years, basically 
ever since I first started trying to read }{\i Design Patterns}{ (Gamma, Helm, Johnson & Vlissides, Addison-Wesley, 1995), commonly referred to as the }{\i Gang of Four}{\cs45\i\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{
 This is a tongue-in-cheek reference to an event in China after the death of Mao-Tze Tung, when four persons including Mao\rquote s widow made a power play, and were demonized by the Chinese Communist Party under that name.}}}{ or just GoF). }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_6" \\o "A_6" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7a00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f0036000000}}}{\fldrslt {\cs42\fs22\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {There is a chapter on design patterns in the first edition of }{\i 
Thinking in C++}{, which has evolved in Volume 2 of the second edition of }{\i Thinking in C++}{, and you\rquote ll also find a chapter on patterns in the first edition of }{\i Thinking in Java}{. I took that chapter out of the second edition of }{\i 
Thinking in Java}{ because that book was getting too big, and also because I had decided to write }{\i Thinking in Patterns}{. That book, still to be finished, has become this one. The ease of expressing these more comple
x ideas in Python will, I think, finally allow me to get it all out. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_7" \\o "A_7" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7a00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f0037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par This is not an introductory book. I am assuming that you have worked your way through at least }{\i Learning Python}{ (by Mark Lutz & David Ascher; OReilly, 1999) or an equivalent text before coming to this book. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_8" \\o "A_8" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7a00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f0038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par In addition, I assume you have more than just a grasp of the syntax of Python. You should have a good understanding of objects and what they\rquote re about, including polymorphism. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_9" \\o "A_9" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7a00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f0039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par On the other hand, by going through this book you\rquote re going to learn a }{\i lot}{
 about object-oriented programming by seeing objects used in many different situations. If your knowledge of objects is rudimentary, it will get much stronger in the process of understanding the designs in this book. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_10" \\o "A_10" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00310030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420054}
The Y2K syndrome{\*\bkmkend _Toc534420054}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {In a book that has \'93problem-solving techniques\'94 in its subtitle, it
\rquote s worth mentioning one of the biggest pitfalls in programming: premature optimization. Every time I bring this concept forward, virtually everyone agrees to it. Also, everyone seems to reserve in their own mind a special case \'93
except for this thing that I happen to know is a particular problem.\'94 }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_11" \\o "A_11" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00310031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par The reason I call this the Y2K syndrome has to do with that special knowledge. Computers are a mystery to most people, so when someone announced that those silly computer 
programmers had forgotten to put in enough digits to hold dates past the year 1999, then suddenly everyone became a computer expert \endash  \'93these things aren\rquote t so difficult after all, if I can see such an obvious problem.\'94
 For example, my background was originally in computer engineering, and I started out by programming embedded systems. As a result, I know that many embedded systems have no idea what the date or time is, and even if they do that data often isn\rquote 
t used in any important calculations. And yet I was told in no uncertain terms that all the embedded systems were going to crash on January 1, 2000}{\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{
 These same people were also convinced that all the computers were going to crash then, too. But since virtually everyone had the experience of their Windows machine crashing all the time without particularly dire results, this didn\rquote t se
em to carry the same drama of impending doom.}}}{. As far as I can tell the only memory that was lost on that particular date was that of the people who were predicting doom \endash  it\rquote s as if they had never said any of that stuff. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_12" \\o "A_12" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00310032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par The point is that it\rquote s very easy to fall into a habit of thinking that the particular algorithm or piece of code that you happen to part
ly or thoroughly understand is naturally going to be the bottleneck in your system, simply because you can imagine what\rquote 
s going on in that piece of code and so you think that it must somehow be much less efficient than all the other pieces of code that you don\rquote t know about. But unless you\rquote ve run actual tests, typically with a profiler, you can\rquote 
t really know what\rquote s going on. And even if you are right, that a piece of code is very inefficient, remember that most programs spend something like 90% of their time in less than 10% of the code in the program, so unless the piece of code you
\rquote re thinking about happens to fall into that 10% it isn\rquote t going to be important. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_13" \\o "A_13" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00310033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par \'93Premature optimization is the root of all evil.\'94 is sometimes referred to as \'93Knuth\rquote s law\'94 (from Donald E. Knuth). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_14" \\o "A_14" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00310034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420055}
Context and composition{\*\bkmkend _Toc534420055}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {One of the t
erms you will see used over and over in design patterns literature is }{\i context}{. In fact, one common definition of a design pattern is \'93a solution to a problem in a context.\'94 The GoF patterns often have a \'93context object\'94
 that the client programmer interacts with. At one point it occurred to me that such objects seemed to dominate the landscape of many patterns, and so I began asking what they were about. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_15" \\o "A_15" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00310035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par The context object often acts as a little fa\'e7
ade to hide the complexity of the rest of the pattern, and in addition it will often be the controller that manages the operation of the pattern. Initially, it seemed to me that these were not really essential to th
e implementation, use and understanding of the pattern. However, I remembered one of the more dramatic statements made in the GoF: \'93prefer composition to inheritance.\'94
 The context object allows you to use the pattern in a composition, and that may be its primary value. }{\field\fldedit{\*\fldinst {HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A1_15" \\o "A1_15"}{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410031005f00310035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl 
\pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {
{\*\bkmkstart _Toc534420056}A quick course in Python for programmers{\*\bkmkend _Toc534420056}
\par }\pard\plain \s15\ql \li360\ri0\sa180\sl270\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This book assumes you\rquote re an experienced programmer, and it\rquote 
s best if you have learned Python through another book. For everyone else, this chapter gives a fast introduction to the language. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0001" \\o "A2_0001" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000300031000000}}}{\fldrslt {\cs42\fs22\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc524504143}
{\*\bkmkstart _Toc534420057}Python overview{\*\bkmkend _Toc524504143}{\*\bkmkend _Toc534420057}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {This}{\v #[BT_266]#This}{ brief introduction is fo
r the experienced programmer (which is what you should be if you\rquote re reading this book). You can refer to the full documentation at }{\i www.Python.org}{ (especially the incredibly useful HTML page }{\i A Python Quick Reference}{),}{\i  }{
and also numerous books such as }{\i Learning Python}{ by Mark Lutz and David Ascher (O\rquote Reilly, 1999). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0002" \\o "A2_0002" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000300032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_267]#}{Python is often referred to as a scripting language, but scripting languages tend 
to be limiting, especially in the scope of the problems that they solve. Python, on the other hand, is a programming language that also supports scripting. It }{\i is}{
 marvelous for scripting, and you may find yourself replacing all your batch files, shell scripts, and simple programs with Python scripts. But it is far more than a scripting language. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0003" \\o "A2_0003" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000300033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_268]#}{Python is designed to be very clean to write and especially to read. You will find that it\rquote s quite easy to read your own code long after you\rquote ve written it, and also to read other people\rquote 
s code. This is accomplished partially through clean, to-the-point syntax, but a major factor in code readability is indentation \endash  scoping in Python is determined by indentation. For example: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0004" \\o "A2_0004" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000300034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:if.py
\par response = "yes"
\par if response == "yes":
\par   print "affirmative"
\par   val = 1
\par print "continuing..."
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_269]#}{The \lquote }{\b #}{\rquote 
 denotes a comment that goes until the end of the line, just like C++ and Java \lquote }{\b //}{\rquote  comments. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0005" \\o "A2_0005" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000300035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_270]#}{First notice that the basic syntax of Python is C-ish as you can see in the }{\b if}{ statement. But in a C }{\b if}{, you would be required to use parentheses around the conditional, whereas they are not necessary in Python (it won
\rquote t complain if you use them anyway). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0006" \\o "A2_0006" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000300036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_271]#}{The conditional clause ends with a colon, and this indicates that what follows will be a group of indented statements, which are the \'93then\'94 part of the }{\b if}{ statement. In this case, there is a \'93print\'94
 statement which sends the result to standard output, followed by an assignment to a variable named }{\b val}{. The subsequent statement is not indented so it is no longer part of the }{\b if}{. Indenting 
can nest to any level, just like curly braces in C++ or Java, but unlike those languages there is no option (and no argument) about where the braces are placed \endash  the compiler forces everyone\rquote 
s code to be formatted the same way, which is one of the main reasons for Python\rquote s consistent readability. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0007" \\o "A2_0007" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000300037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_272]#}{Python normally has only one statement per line (you can put more by separating them with semicol
ons), thus no terminating semicolon is necessary.  Even from the brief example above you can see that the language is designed to be as simple as possible, and yet still very readable. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0008" \\o "A2_0008" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000300038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc524504144}
{\*\bkmkstart _Toc534420058}Built-in containers{\*\bkmkend _Toc524504144}{\*\bkmkend _Toc534420058}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_273]#}{
With languages like C++ and Java, containers are add-on libraries and not integral to the language. In Python, the essential nature of containers for programming is acknowledged by building 
them into the core of the language: both lists and associative arrays (a.k.a. maps, dictionaries, hash tables) are fundamental data types. This adds much to the elegance of the language. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0009" \\o "A2_0009" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000300039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_274]#}{In addition, the }{\b for}{ statement automatically iterates through lists rather than just counting through a sequence of numbers. This makes a lot of sense when you think about it, since you\rquote re almost always using a }{\b for}{
 loop to step through an array or a container. Python formalizes this by automatically making }{\b for}{ use an iterator that works through a sequence. Here\rquote s an example: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0010" \\o "A2_0010" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000310030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:list.py
\par list = [ 1, 3, 5, 7, 9, 11 ]
\par print list
\par list.append(13)
\par for x in list:
\par }\pard \s16\qj \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {  print x
\par }\pard \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {#:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_275]#}{
The first line creates a list. You can print the list and it will look exactly as you put it in (in contrast, remember that I had to create a special }{\b Arrays2}{ class in }{\i Thinking in Java, 2}{\i\super nd}{\i  Edition }{
in order to print arrays in Java). Lists are like Java containers \endash  you can add new elements to them (here, }{\b append(\~) }{is used) and they will automatically resize themselves. The }{\b for}{ statement creates an iterator }{\b x}{
 which takes on each value in the list. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0011" \\o "A2_0011" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000310031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_276]#}{You can create a list of numbers with the }{\b range(\~)}{ function, so if you really need to imitate C\rquote s }{\b for}{, you can. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0012" \\o "A2_0012" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000310032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_277]#}{Notice that there aren\rquote t any type declarations \endash  the object names simply appear, and Python infers their type by the way that you use them. It\rquote 
s as if Python is designed so that you only need to press the keys that absolutely must. You\rquote ll find after you\rquote ve worked with Python for a short while that you\rquote ve been using up a lot of brain cycles parsing sem
icolons, curly braces, and all sorts of other extra verbiage that was demanded by your non-Python programming language but didn\rquote t actually describe what your program was supposed to do. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0013" \\o "A2_0013" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000310033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc524504145}
{\*\bkmkstart _Toc534420059}Functions{\*\bkmkend _Toc524504145}{\*\bkmkend _Toc534420059}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_278]#}{To create a function in Python, you use the }{\b def}{
 keyword, followed by the function name and argument list, and a colon to begin the function body. Here is the first example turned into a function: }{\field\fldedit{\*\fldinst { H
YPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0014" \\o "A2_0014" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000310034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:myFunction.py
\par def myFunction(response):
\par   val = 0
\par   if response == "yes":
\par     print "affirmative"
\par     val = 1
\par   print "continuing..."
\par   return val
\par 
\par print myFunction("no")
\par print myFunction("yes")
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_279]#}{
Notice there is no type information in the function signature \endash  all it specifies is the name of the function and the argument identifiers, but no argument types or return types. Python is a }{\i weakly-typed}{
 language, which means it puts the minimum possible requirements on typing. For example, you could pass and return different types from the same function: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0015" \\o "A2_0015" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000310035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:differentReturns.py
\par def differentReturns(arg):
\par   if arg == 1:
\par     return "one"
\par   if arg == "one":
\par     return 1
\par 
\par print differentReturns(1)
\par print differentReturns("one")
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_280]#}{The only constraints on an object that is passed in
to the function are that the function can apply its operations to that object, but other than that, it doesn\rquote t care. Here, the same function applies the \lquote }{\b +}{\rquote  operator to integers and strings: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0016" \\o "A2_0016" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000310036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:sum.py
\par def sum(arg1, arg2):
\par   return arg1 + arg2
\par 
\par print sum(42, 47)
\par print sum('spam ', "eggs")
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_281]#}{When the operator \lquote }{\b +}{\rquote 
 is used with strings, it means concatenation (yes, Python supports operator overloading, and it does a nice job of it). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0017" \\o "A2_0017" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000310037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc524504146}
{\*\bkmkstart _Toc534420060}Strings{\*\bkmkend _Toc524504146}{\*\bkmkend _Toc534420060}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_282]#}{
The above example also shows a little bit about Python string handling,  which is the best of any language I\rquote 
ve seen. You can use single or double quotes to represent strings, which is very nice because if you surround a string with double quotes, you can embed single quotes and vice versa: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0018" \\o "A2_0018" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000310038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:strings.py
\par print "That isn't a horse"
\par print 'You are not a "Viking"'
\par print """You're just pounding two
\par coconut halves together."""
\par print '''"Oh no!" He exclaimed.
\par "It's the blemange!"'''
\par print r'c:\\python\\lib\\utils'
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_283]#}{
Note that Python was not named after the snake, but rather the Monty Python comedy troupe, and so examples are virtually required to include Python-esque references. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/B
ackTalk/FindPage/A2_0019" \\o "A2_0019" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000310039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_284]#}{The triple-quote syntax quotes everything, including newlines. This makes it particularly useful for doing things like generating web pages (Python is an especially good CGI language), since y
ou can just triple-quote the entire page that you want without any other editing. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0020" \\o "A2_0020" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000320030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_285]#}{The \lquote }{\b r}{\rquote  right before a string means \'93raw,\'94 which takes the backslashes literally so you don\rquote t have to put in an extra backslash in order to insert a literal backslash. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0021" \\o "A2_0021" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000320031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_286]#}{Substitution in strings is exceptionally easy, since Python uses C\rquote s }{\b printf(\~)}{ substitution syntax, but for any string at all. You simply follow the string with a \lquote }{\b %}{\rquote  and the values to substitute: }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0022" \\o "A2_0022" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000320032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:stringFormatting.py
\par val = 47
\par print "The number is %d" % val
\par val2 = 63.4
\par s = "val: %d, val2: %f" % (val, val2)
\par print s
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_287]#}{
As you can see in the second case, if you have more than one argument you surround them in parentheses (this forms a }{\i tuple}{, which is a list that cannot be modified \endash 
 you can also use regular lists for multiple arguments, but tuples are typical). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0023" \\o "A2_0023" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000320033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_288]#}{All the formatting from }{\b printf(\~)}{ is available, including control over the number of decimal places and alignment. Python also has very sophisticated regular expressions. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0024" \\o "A2_0024" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000320034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc524504147}
{\*\bkmkstart _Toc534420061}Classes{\*\bkmkend _Toc524504147}{\*\bkmkend _Toc534420061}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_289]#}{
Like everything else in Python, the definition of a class uses a minimum of additional syntax. You use the }{\b class}{ keyword, and inside the body you use }{\b def}{ to create methods. Here\rquote s a simple class: }{\field\fldedit{\*\fldinst { HYPERLIN
K "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0025" \\o "A2_0025" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000320035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:SimpleClass.py}{\b 
\par }{class Simple:
\par   def __init__(self, str):
\par     print "Inside the Simple constructor"
\par     self.s = str
\par   # Two methods:
\par   def show(self):
\par     print self.s
\par   def showMsg(self, msg):
\par     print msg + ':',
\par     self.show() # Calling another method
\par 
\par if __name__ == "__main__":
\par   # Create an object:
\par   x = Simple("constructor argument")
\par   x.show()
\par   x.showMsg("A message")
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_290]#}{Both methods have \'93}{\b self}{\'94}{\b  }{
as their first argument. C++ and Java both have a hidden first argument in their class methods, which points to the object that the method was called for and can be accessed using the keyword }{\b this}{. Python methods also use a reference to the curren
t object, but when you are }{\i defining}{ a method you must explicitly specify the reference as the first argument. Traditionally, the reference is called }{\b self}{ but you could use any identifier you want (if you do not use }{\b self}{
 you will probably confuse a lot of people, however). If you need to refer to fields in the object or other methods in the object, you must use }{\b self}{ in the expression. However, when you call a method for an object as in }{\b x.show(\~)}{
, you do not hand it the reference to the object \endash  }{\i that}{ is done for you. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0026" \\o "A2_0026" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000320036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_291]#}{Here, the first method is special, as is any identifier that begins and ends with double underscores. In this case, it defines the
 constructor, which is automatically called when the object is created, just like in C++ and Java. However, at the bottom of the example you can see that the creation of an object looks just like a function call using the class name. Python\rquote 
s spare syntax makes you realize that the }{\b new}{ keyword isn\rquote t really necessary in C++ or Java, either. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0027" \\o "A2_0027" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000320037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_292]#}{All the code at the bottom is set off by an }{\b if}{ clause, which checks to see if something called }{\b __name\-__}{ is equivalent to }{\b __main__}{. Again, the double underscores indicate special names. The reason for the }{\b if}{
 is that any file can also be used as a library module within another program (modules are described shortly). In that case, you just want the classes defined, but you don\rquote t want the code at the bottom of the file to be executed. This particular }{
\b if}{ statement is only true when you are running this file directly; that is, if you say on the command line: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0028" \\o "A2_0028" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000320038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {Python SimpleClass.py
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_293]#}{
However, if this file is imported as a module into another program, the }{\b __main__}{ code is not executed. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0029" \\o "A2_0029" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000320039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_294]#}{Something that\rquote s a little surprising at first is that you define fields inside methods, and not outside of the methods like C++ or Java (if you create fields
 using the C++/Java style, they implicitly become static fields). To create an object field, you just name it \endash  using }{\b self}{ \endash 
 inside of one of the methods (usually in the constructor, but not always), and space is created when that method is run. This seems
 a little strange coming from C++ or Java where you must decide ahead of time how much space your object is going to occupy, but it turns out to be a very flexible way to program. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0030" \\o "A2_0030" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000330030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s4\ql \li720\ri0\sa120\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin720\itap0 \f29\fs30\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {Inheritance
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_295]#}{Because Python is weakly typed, it doesn\rquote 
t really care about interfaces \endash  all it cares about is applying operations to objects (in fact, Java\rquote s }{\b interface}{ keyword would be wasted in Python). This means th
at inheritance in Python is different from inheritance in C++ or Java, where you often inherit simply to establish a common interface. In Python, the only reason you inherit is to inherit an implementation \endash  to re-use the code in the base class.  }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0031" \\o "A2_0031" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000330031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_296]#}{If you\rquote re going to inherit from a class, you must tell Python to bring that class into your new file. Python controls its name spaces as aggressively as Java does, and in a similar fashion (albeit with Python\rquote 
s penchant for simplicity). Every time you create a file, you implicitly create a module (which is like a package in Java) with the same name as that file. Thus, no }{\b package}{ keyword is needed in Python. When you want to use a module, you just say }{
\b import}{ and give the name of the module. Python searches the PYTHONPATH in the same way that Java searches the CLASSPATH (but for some reason, Python doesn\rquote t have the same kinds of pitfalls as Java does) an
d reads in the file. To refer to any of the functions or classes within a module, you give the module name, a period, and the function or class name. If you don\rquote t want the trouble of qualifying the name, you can say 
\par }{\b\v #[BT_297]#}{\b from }{\i module}{ }{\b import}{ }{\i name(s)}{
\par }{\v #[BT_298]#}{Where \'93name(s)\'94 can be a list of names separated by commas. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0032" \\o "A2_0032" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000330032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_299]#}{You inherit a class (or classes \endash  Python supports multiple inheritance) by listing the name(s) of the class inside parentheses after the name of the inheriting class. Note that the }{\b Simple}{
 class, which resides in the file (and thus, module) named }{\b SimpleClass}{ is brought into this new name space using an }{\b import}{ statement: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0033" 
\\o "A2_0033" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000330033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:Simple2.py
\par from SimpleClass import Simple
\par 
\par class Simple2(Simple):
\par   def __init__(self, str):
\par     print "Inside Simple2 constructor"
\par     # You must explicitly call 
\par     # the base-class constructor:
\par     Simple.__init__(self, str)
\par   def display(self):
\par     self.showMsg("Called from display()")
\par   # Overriding a base-class method
\par   def show(self):
\par     print "Overridden show() method"
\par     # Calling a base-class method from inside
\par     # the overridden method:
\par     Simple.show(self)
\par 
\par class Different:
\par   def show(self):
\par     print "Not derived from Simple"
\par 
\par if __name__ == "__main__":
\par   x = Simple2("Simple2 constructor argument")
\par   x.display()
\par   x.show()
\par   x.showMsg("Inside main")
\par   def f(obj): obj.show() # One-line definition
\par   f(x)
\par   f(Different())
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\b\v #[BT_300]#}{\b Simple2}{ is inherited from }{\b Simple}{
, and in the constructor, the base-class constructor is called. In }{\b display(\~)}{, }{\b showMsg(\~)}{ can be called as a method of }{\b self}{
, but when calling the base-class version of the method you are overriding, you must fully qualify the name and pass }{\b self}{ in as the first argument, as shown in the base-class constructor call. This can also be seen in the overridden version of }{
\b show(\~)}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0034" \\o "A2_0034" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000330034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_301]#}{In }{\b __main__}{, you will see (when you run the program) that the base-class constructor is called. You can also see that the }{\b showMsg(\~)}{ method is available in the derived class, just as you would expect with inheritance. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0035" \\o "A2_0035" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000330035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_302]#}{The class }{\b Different}{ also has a method named }{\b show(\~)}{, but this class is not derived from }{\b Simple}{. The }{\b f(\~)}{ method defined in }{\b __main__}{ demonstrates weak typing: all it cares about is that }{\b show(\~)}{
 can be applied to }{\b obj}{, and it doesn\rquote t have any other type requirements. You can see that }{\b f(\~)}{ can be applied equally to an object of a class derived from }{\b Simple}{ and one that isn\rquote t, without discrimination. If you
\rquote re a C++ programmer, you should see that the objective of the C++ }{\b template}{ feature is exactly this: to provide weak typing in a strongly-typed language. Thus, in Python you automatically get the equivalent of templates \endash 
 without having to learn that particularly difficult syntax and semantics. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0036" \\o "A2_0036" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000330036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par [[ Suggest Further Topics for inclusion in the introductory chapter ]]}{\v [}{ }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A2_0037" \\o "A2_0037" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b8200000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410032005f0030003000330037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par \sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v \sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_4]#
\par \sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \li0\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 
\cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420062}The pattern concept{\*\bkmkend _Toc534420062}
\par }\pard\plain \s15\ql \li360\ri0\sa180\sl270\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\'93Design patterns help you learn from others' successes instead of yo
ur own failures}{\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{
 From Mark Johnson.}}}{.\'94 }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_16" \\o "A_16" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00310036000000}}}{\fldrslt {\cs42\fs22\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_6]#}{
Probably the most important step forward in object-oriented design is the \'93design patterns\'94 movement, chronicled in }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {patterns, design patterns}}}{\i Design Patterns (ibid)}{\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{ }{\v #[BT_F1]#}{But be warned: the examples are in C++.}}}{
. That book shows 23 different solutions to particular classes of problems. In this book, the basic concepts of design patterns will be introduced along with examples. This should whet your appetite to read }{\i Design Patterns}{
 by Gamma, et. al., a source of what has now become an essential, almost mandatory, vocabulary for OOP programmers. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_17" \\o "A_17" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00310037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_7]#}{
The latter part of this book contains an example of the design evolution process, starting with an initial solution and moving through the logic and process of evolving the solution to more appropriate designs. The program shown (a trash sorting simula
tion) has evolved over time, and you can look at that evolution as a prototype for the way your own design can start as an adequate solution to a particular problem and evolve into a flexible approach to a class of problems. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_18" \\o "A_18" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00310038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420063}
What is a pattern?{\*\bkmkend _Toc534420063}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_8]#}{
Initially, you can think of a pattern as an especially clever and insightful way of solving a particular class of problems. That is, it looks like a lot of peo
ple have worked out all the angles of a problem and have come up with the most general, flexible solution for it. The problem could be one you have seen and solved before, but your solution probably didn\rquote t have the kind of completeness you\rquote 
ll see embodied in a pattern. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_19" \\o "A_19" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00310039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_9]#}{Although they\rquote re called \'93design patterns,\'94 they really aren\rquote t tied to the realm of design. A pattern seems to stand apart from the tr
aditional way of thinking about analysis, design, and implementation. Instead, a pattern e}{m}{
bodies a complete idea within a program, and thus it can sometimes appear at the analysis phase or high-level design phase. This is interesting because a pattern has
 a direct implementation in code and so you might not expect it to show up before low-level design or implementation (and in fact you might not realize that you need a particular pattern until you get to those phases). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_20" \\o "A_20" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00320030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_10]#}{The basic concept of a pattern can also be seen as the basic concept of pr}{o}{gram design: adding a layer of }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {abstraction\: in program design}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design\: abstraction in program design}}}{abstraction. Whenever you abstract something you\rquote re isolating particular details, and one of the most compelling motiv}{a}{
tions behind this is to }{\i separate things that change from things that stay the same}{. Another way to put this is that once you find some part of your pr}{o}{gram that\rquote s likely to change for one reason or another, you\rquote 
ll want to keep those changes from propagating other changes throughout your code. Not only does this make the code much cheaper to maintain, but it also turns out that it is usually simpler to understand (which results in lowered costs). }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_21" \\o "A_21" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00320031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_11]#}{Often, the most difficult part of developing an elegant and cheap-to-maintain design is in discovering what I call \'93the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {vector of change}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {change\: vector of change}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: vector of change}}}{vector of change.\'94 (Here, \'93vector\'94 refers to the maximum gradient and not a container class.) This means finding the 
most important thing that changes in your system, or put another way, di}{s}{covering where your greatest cost is. Once you discover the vector of change, you have the focal point around which to structure your design. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_22" \\o "A_22" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00320032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_12]#}{So the goal of design patterns is to isolate changes in your code. If you look at it this way, you\rquote ve been seeing some design patterns already in this book. For example, }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {inheritance\: and design patterns}}}{
inheritance can be thought of as a design pattern (albeit one implemented by the compiler). It allows you to express differences in b}{e}{havior (that\rquote s the thing that changes) in objects that all have the same inte}{r}{face (that\rquote s what st
ays the same). }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {composition\:and design patterns}}}{
Composition can also be considered a pattern, since it allows you to change\emdash dynamically or statically\emdash the objects that implement your class, and thus the way that class works. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.m
indview.net/Books/TIPython/BackTalk/FindPage/A_23" \\o "A_23" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00320033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_13]#}{Another pattern that appears in }{\i Design Patterns}{ is the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {iterator}}}{\i iterator}{, which has been implicitly available in }{\b for}{ loops from the beginning of the language, and 
was introduced as an explicit feature in Python 2.2. An iterator allows you to hide the particular implementation of the container as you\rquote 
re stepping through and selecting the elements one by one. Thus, you can write generic code that performs an operation
 on all of the elements in a sequence without regard to the way that sequence is built. Thus your generic code can be used with any object that can pr}{o}{duce an iterator. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_24" \\o "A_24" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00320034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420064}
Pattern taxonomy{\*\bkmkend _Toc534420064}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_14]#}{One of the events that\rquote 
s occurred with the rise of design patterns is what could be thought of as the \'93pollution\'94 of the term \endash  people have begun to use the term to mean just about anything synonymous with \'93good.\'94 After some pondering, I\rquote 
ve come up with a sort of hierarchy describing a succession of different types of categories: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_25" \\o "A_25" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00320035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\b\v\f28\fs22\kerning18 \hich\af28\dbch\af0\loch\f28 1.\tab}}\pard \ql \fi-360\li1080\ri0\sa180\sl240\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls14\adjustright\rin0\lin1080\itap0 {\b\v #[BT_15]#}{\b Idiom}{
: how we write code in a particular language to do this particular type of thing. This could be something as common as the way that you code the process of stepping through an array in C (and not running off the end). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_26" \\o "A_26" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00320036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\b\v\f28\fs22\kerning18 \hich\af28\dbch\af0\loch\f28 2.\tab}}{\b\v #[BT_16]#}{\b Specific Design}{
: the solution that we came up with to solve this particular problem. This might be a clever design, but it makes no attempt to be general. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_27" \\o "A_27" 
}{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00320037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\b\v\f28\fs22\kerning18 \hich\af28\dbch\af0\loch\f28 3.\tab}}{\b\v #[BT_17]#}{\b Standard Design}{: a way to solve this }{\i kind}{ of problem. A design that has become more general, typically through reuse. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_28" \\o "A_28" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00320038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\b\v\f28\fs22\kerning18 \hich\af28\dbch\af0\loch\f28 4.\tab}}{\b\v #[BT_18]#}{\b Design Pattern}{
: how to solve an entire class of similar problem. This usually only appears after applying a standard design a number of times, and then seeing a common pattern throughout these applications. }{\field\fldedit{\*\fldinst { HYPERLINK "http://w
ww.mindview.net/Books/TIPython/BackTalk/FindPage/A_29" \\o "A_29" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00320039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_19]#}{I feel this helps put things in perspective, and to show where something might fit. However, it doesn\rquote 
t say that one is better than another. It doesn\rquote t make sense to try to take every problem solution and generalize it to a design pattern \endash  it\rquote s not a good use of your time, and you can\rquote 
t force the discovery of patterns that way; they tend to be subtle and appear over time. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_30" \\o "A_30" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00330030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_20]#}{One could also argue for the inclusion of }{\i Analysis Pattern}{ and }{\i Architectural Pattern}{ in this taxonomy. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_31" \\o "A_31" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00330031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705894}
{\*\bkmkstart _Toc534420065}Design Structures{\*\bkmkend _Toc534420065}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {One of the struggles that I\rquote 
ve had with design patterns is their classification \endash  I\rquote ve often found the GoF approach to be too obscure, and not always very helpful. Certainly, the }{\i Creational}{ patterns are fairly straightforward: 
how are you going to create your objects? This is a question you normally need to ask, and the name brings you right to that group of patterns. But I find }{\i Structural}{ and }{\i Behavioral}{
 to be far less useful distinctions. I have not been able to look at a problem and say \'93clearly, you need a structural pattern here,\'94 so that classification doesn\rquote t lead me to a solution (I\rquote 
ll readily admit that I may be missing something here). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_32" \\o "A_32" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00330032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par I\rquote ve labored for awhile with this problem, first noting that the underlying structure of some of the GoF patterns are similar to each other, and trying to develop relationships based on that similarity. While this was an interesting experime
nt, I don\rquote t think it produced much of use in the end because the point is to solve problems, so a helpful approach will look at the problem to solve and try to find relationships between the problem and potential solutions. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_33" \\o "A_33" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00330033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par To that end, I\rquote ve begun to try to collect basic design structures, and to try to see if there\rquote s a way to relate those structures to the various design patterns that appear in well thought-out systems. Currently, I\rquote 
m just trying to make a list, but eventually I hope to make steps towards connecting these structures with patterns (or I may come up with a different approach altogether \endash  this is still in its formative stages). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_34" \\o "A_34" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00330034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Here}{\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{
 This list includes suggestions by Kevlin Henney, David Scott, and others.}}}{ is the present list of candidates, only some of which will make it to the final list. Feel free to suggest others, or possibly relationships with patterns. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_35" \\o "A_35" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00330035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\sa180\sl240\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls22\adjustright\rin0\lin1080\itap0 {\b Encapsulation}{
: self containment and embodying a model of usage
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\sa180\sl240\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls19\adjustright\rin0\lin1080\itap0 {\b Gathering }{\field\fldedit{\*\fldinst {
\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_36" \\o "A_36" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00330036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Localization }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_37" \\o "A_37" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00330037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Separation }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_38" \\o "A_38" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00330038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Hiding }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_39" \\o "A_39" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00330039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Guarding }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_40" \\o "A_40" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00340030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Connector }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_41" \\o "A_41" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00340031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Barrier/fence }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_42" \\o "A_42" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00340032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Variation in behavior }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_43" \\o "A_43" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00340033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Notification }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_44" \\o "A_44" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00340034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Transaction }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_45" \\o "A_45" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00340035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Mirror}{: \'93the ability to keep a parallel universe(s) in step with the golden world\'94 }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_46" \\o "A_46" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00340036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Shadow}{ \'93follows your movement and does something different in a different medium\'94 (May be a variation on Proxy). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_47" \\o "A_47" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00340037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420066}
Design principles{\*\bkmkend _Toc534420066}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {When I put out a call for ideas in my newsletter}{\cs45\super \chftn 
{\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{
 A free email publication. See www.BruceEckel.com to subscribe.}}}{, a number of suggestions came back which
 turned out to be very useful, but different than the above classification, and I realized that a list of design principles is at least as important as design structures, but for a different reason: these allow you to ask questions about your proposed des
ign, to apply tests for quality. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_48" \\o "A_48" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00340038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\sa180\sl240\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls19\adjustright\rin0\lin1080\itap0 {\b Principle of least astonishment}{ (don
\rquote t be astonishing). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_49" \\o "A_49" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00340039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Make common things easy, and rare things possible }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_50" \\o "A_50" }{\b 
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00350030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Consistency}{. One thing has become very clear to me, especially because 
of Python: the more random rules you pile onto the programmer, rules that have nothing to do with solving the problem at hand, the slower the programmer can produce. And this does not appear to be a linear factor, but an exponential one. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_51" \\o "A_51" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00350031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Law of Demeter}{: a.k.a. \'93Don\rquote t talk to strangers.\'94 An object should only reference itself, its attributes, and the arguments of its methods. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_52" \\o "A_52" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00350032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Subtraction}{: a design is finished when you cannot take anything else away}{\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{ This idea is generally attributed to Antoine de St. Exupery from }{\i The Little Prince}{
: "La perfection est atteinte non quand il ne reste rien \'e0 ajouter, mais quand il ne reste rien \'e0 enlever," or: "perfection is reached not when there's nothing left to add, but when there's nothing left to remove".  }}}{. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_53" \\o "A_53" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00350033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Simplicity before generality}{\cs45\b\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{ From an email from Kevlin Henney.}}}{. (A variation of }{\i Occam\rquote s Razor}{, which says \'93the simplest solution is the best\'94
). A common problem we find in frameworks is that they are designed to be general purpose without reference to actual systems. This leads to a dizzying array o
f options that are often unused, misused or just not useful. However, most developers work on specific systems, and the quest for generality does not always serve them well. The best route to generality is through understanding well-defined specific examp
les. So, this principle acts as the tie breaker between otherwise equally viable design alternatives. Of course, it is entirely possible that the simpler solution is the more general one. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_54" \\o "A_54" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00350034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Reflexivity}{ (my suggested term). One abstraction per class, one class per abstraction. Might also be called }{\b Isomorphism}{. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_55" \\o "A_55" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00350035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Independence}{ or }{\b Orthogonality}{
. Express independent ideas independently. This complements Separation, Encapsulation and Variation, and is part of the Low-Coupling-High-Cohesion message. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_56" \\o "A_56" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00350036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Once and once only}{: Avoid duplication of logic and structure where the duplication is not accidental, ie where both pieces of code express the same intent for the same reason. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_57" \\o "A_57" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00350037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {
In the process of brainstorming this idea, I hope to come up with a small handful of fundamental ideas that can be held in your head while you analyze a problem. However, other ideas that come from this list
 may end up being useful as a checklist while walking through and analyzing your design. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_58" \\o "A_58" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00350038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420067}
The Singleton{\*\bkmkend _Toc476705894}{\*\bkmkend _Toc534420067}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_21]#}{Possibly the simplest design pattern is the }{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {singleton}}}{\i singleton}{
, which is a way to provide one and only one object of a particular type. To accomplish this, you must take control of object creation out of the hands of the programmer. One convenient way to do this is to delegate to a single 
instance of a private nested inner class: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_59" \\o "A_59" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00350039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:SingletonPattern.py
\par 
\par class OnlyOne:
\par   class __OnlyOne:
\par     def __init__(self, arg):
\par       self.val = arg
\par     def __str__(self):
\par       return `self` + self.val
\par   instance = None
\par   def __init__(self, arg):
\par     if not OnlyOne.instance:
\par       OnlyOne.instance = OnlyOne.__OnlyOne(arg)
\par     else:
\par       OnlyOne.instance.val = arg
\par   def __getattr__(self, name):
\par     return getattr(self.instance, name)
\par 
\par x = OnlyOne('sausage')
\par print x
\par y = OnlyOne('eggs')
\par print y
\par z = OnlyOne('spam')
\par print z
\par print x
\par print y
\par print `x`
\par print `y`
\par print `z`
\par output = '''
\par <__main__.__OnlyOne instance at 0076B7AC>sausage
\par <__main__.__OnlyOne instance at 0076B7AC>eggs
\par <__main__.__OnlyOne instance at 0076B7AC>spam
\par <__main__.__OnlyOne instance at 0076B7AC>spam
\par <__main__.__OnlyOne instance at 0076B7AC>spam
\par <__main__.OnlyOne instance at 0076C54C>
\par <__main__.OnlyOne instance at 0076DAAC>
\par <__main__.OnlyOne instance at 0076AA3C>
\par '''
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {
Because the inner class is named with a double underscore, it is private so the user cannot directly access it. The inner class contains all the methods that you would normally put  in the class if it weren\rquote t going to be a sing
leton, and then it is wrapped in the outer class which controls creation by using its constructor. The first time you create an }{\b OnlyOne}{, it initializes }{\b instance}{, but after that it just ignores you. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_60" \\o "A_60" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00360030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Access comes through delegation, using the }{\b __getattr__(\~)}{ method to redirect calls to the single instance. You can see from the output that even though it appears that multiple objects have been created, the same }{\b __OnlyOne}{
 object is used for both. The instances of }{\b OnlyOne}{ are distinct but they all proxy to the same }{\b __OnlyOne}{ object. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_61" \\o "A_61" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00360031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_25]##[BT_26]#}{Note that the above approach doesn\rquote t restrict you to creating only one object. This is also a tec}{h}{
nique to create a limited pool of objects. In that situation, however, you can be confronted with the problem of sharing objects in the pool. If this is an i}{s}{sue, you can create a solution involving a check-out and check-in of the shared objects. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_62" \\o "A_62" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00360032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par A variation on this technique uses the class method }{\b __new__}{ added in Python 2.2:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:NewSingleton.py
\par 
\par class OnlyOne(object):
\par   class __OnlyOne:
\par     def __init__(self):
\par       self.val = None
\par     def __str__(self):
\par       return `self` + self.val
\par   instance = None
\par   def __new__(cls): # __new__ always a classmethod
\par     if not OnlyOne.instance:
\par       OnlyOne.instance = OnlyOne.__OnlyOne()
\par     return OnlyOne.instance
\par   def __getattr__(self, name):
\par     return getattr(self.instance, name)
\par   def __setattr__(self, name):
\par     return setattr(self.instance, name)
\par 
\par x = OnlyOne()
\par x.val = 'sausage'
\par print x
\par y = OnlyOne()
\par y.val = 'eggs'
\par print y
\par z = OnlyOne()
\par z.val = 'spam'
\par print z
\par print x
\par print y
\par #<hr>
\par output = '''
\par <__main__.__OnlyOne instance at 0x00798900>sausage
\par <__main__.__OnlyOne instance at 0x00798900>eggs
\par <__main__.__OnlyOne instance at 0x00798900>spam
\par <__main__.__OnlyOne instance at 0x00798900>spam
\par <__main__.__OnlyOne instance at 0x00798900>spam
\par '''
\par #:~}{\v Aa}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Alex Martelli makes the }{\field{\*\fldinst {
 HYPERLINK "http://www.aleax.it/Python/5ep.html" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b4800000068007400740070003a002f002f007700770077002e0061006c006500610078002e00690074002f0050007900740068006f006e002f003500650070002e00680074006d006c000000}}}{\fldrslt {
\cs42\ul\cf2 observation}}}{ that what we really want with a Singleton is to have 
a single set of state data for all objects. That is, you could create as many objects as you want and as long as they all refer to the same state information then you achieve the effect of Singleton. He accomplishes this with what he calls the }{\i Borg}{
\cs45\i\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{
 From the television show }{\i Star Trek: The Next Generation}{. The Borg are a hive-mind collective: \'93we are all one.\'94}}}{, which is accomplished by setting all the }{\b __dict__}{s to the same static piece of storage: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_63" \\o "A_63" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00360033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:BorgSingleton.py
\par # Alex Martelli's 'Borg'
\par 
\par class Borg:
\par   _shared_state = \{\}
\par   def __init__(self):
\par     self.__dict__ = self._shared_state
\par 
\par class Singleton(Borg):
\par   def __init__(self, arg):
\par     Borg.__init__(self)
\par     self.val = arg
\par   def __str__(self): return self.val
\par 
\par x = Singleton('sausage')
\par print x
\par y = Singleton('eggs')
\par print y
\par z = Singleton('spam')
\par print z
\par print x
\par print y
\par print `x`
\par print `y`
\par print `z`
\par output = '''
\par sausage
\par eggs
\par spam
\par spam
\par spam
\par <__main__.Singleton instance at 0079EF2C>
\par <__main__.Singleton instance at 0079E10C>
\par <__main__.Singleton instance at 00798F9C>
\par '''
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {This has an identical effect as }{\b SingletonPattern.py}{ does, but it
\rquote s more elegant. In the former case, you must wire in }{\i Singleton}{ behavior to each of your classes, but }{\i Borg}{ is designed to be easily reused through inheritance. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mi
ndview.net/Books/TIPython/BackTalk/FindPage/A_64" \\o "A_64" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00360034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Two other interesting ways to define singleton}{\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{ Suggested by Chih-Chung Chang.}}}{ include wrapping a class and using metaclasses. The first approach could be thought of as a }{\i class decorator}{
 (decorators will be defined later in the book), because it takes the class of interest and adds functionality to it by wrapping it in another class:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:SingletonDecorator.py
\par }{\kerning0 class }{SingletonDecorator}{\kerning0 :
\par   def __init__(self,klass):
\par     self.klass = klass
\par     self.instance = None
\par   def __call__(self,*args,**kwds):
\par     if self.instance == None:
\par       self.instance = self.klass(*args,**kwds)
\par     return self.instance
\par 
\par class foo: pass
\par foo = }{SingletonDecorator}{\kerning0 (foo)
\par 
\par x=foo()
\par y=foo()
\par z=foo()
\par x.val = 'sausage'
\par y.val = 'eggs'
\par z.val = 'spam'
\par print x.val
\par print y.val
\par print z.val
\par print x is y is z
\par }{#:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {[[ Description ]] }{\field\fldedit{\*\fldinst {
HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A1_64" \\o "A1_64"}{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410031005f00360034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par The second approach uses metaclasses, a topic I do not yet understand but which looks very interesting and powerful indeed (note that Python 2.2 has improved/simplified the metaclass syntax, and so this example may change):
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c01:SingletonMetaClass.py
\par class SingletonMetaClass(type):
\par   def __init__(cls,name,bases,dict):
\par     super(SingletonMetaClass,cls)\\
\par       .__init__(name,bases,dict)
\par     original_new = cls.__new__
\par     def my_new(cls,*args,**kwds):
\par       if cls.instance == None:
\par         cls.instance = \\
\par           original_new(cls,*args,**kwds)
\par       return cls.instance
\par     cls.instance = None
\par     cls.__new__ = staticmethod(my_new)
\par 
\par class bar(object):
\par   __metaclass__ = SingletonMetaClass
\par   def __init__(self,val):
\par     self.val = val
\par   def __str__(self):
\par     return `self` + self.val
\par 
\par x=bar('sausage')
\par y=bar('eggs')
\par z=bar('spam')
\par print x
\par print y
\par print z
\par print x is y is z
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {
[[ Long, detailed, informative description of what metaclasses are and how they work, magically inserted here ]] }{\field\fldedit{\*\fldinst {HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A1_65" \\o "A1_65"}{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f00410031005f00360035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s4\ql \li720\ri0\sa120\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin720\itap0 \f29\fs30\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {Exercise:
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Modify }{\b BorgSingleton.py}{ so that it uses a class }{\b __new__( )}{
 method. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_65" \\o "A_65" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00360035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705895}
{\*\bkmkstart _Toc534420068}Classifying patterns{\*\bkmkend _Toc476705895}{\*\bkmkend _Toc534420068}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_27]#}{The }{\i Design Patterns}{ book discusses 23 different patt
erns, classified under three pu}{r}{poses (all of which revolve around the particular aspect that can vary). The three purposes are: }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {creational design patterns}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: creational}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: structural}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {structural design patterns}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: behavioral}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {behavioral design patterns}}}{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_66" \\o "A_66" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00360036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\s46 \b\f29\fs22\kerning18 \hich\af29\dbch\af0\loch\f29 1.\tab}}\pard\plain \s46\ql \fi-648\li1008\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1008\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin1008\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\b Creational}{: how an object can be created. This often involves isolating the details of object creation so your code isn\rquote t d}{e}{
pendent on what types of objects there are and thus doesn\rquote t have to be changed when you add a new type of object. The aforementioned }{\i Singleton}{ is classified as a creational pattern, and later in this book you\rquote ll see examples of }{\i 
Factory Method}{ and }{\i Prototype}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_67" \\o "A_67" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00360037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\s46 \b\f29\fs22\kerning18 \hich\af29\dbch\af0\loch\f29 2.\tab}}{\b Structural}{: designing objects to satisfy particular project constraints. These work with the way o
bjects are connected with other objects to ensure that changes in the system don\rquote t require changes to those connections. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_68" \\o "A_68" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00360038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\s46 \b\f29\fs22\kerning18 \hich\af29\dbch\af0\loch\f29 3.\tab}}{\b Behavioral}{: objects that handle pa
rticular types of actions within a program. These encapsulate processes that you want to perform, such as interpreting a language, fulfilling a r}{e}{quest, moving through a sequence (as in an iterator), or i}{m}{
plementing an algorithm. This book contains examples of the }{\i Observer}{ and the }{\i Visitor}{ patterns. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_69" \\o "A_69" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00360039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_28]#}{The }{\i Design Patterns}{
 book has a section on each of its 23 patterns along with one or more examples for each, typically in C++ but sometimes in Smalltalk. (You\rquote ll find that this doesn\rquote t matter too much since you can easily translate the concepts from e}{i}{
ther language into Python.) This book will not repeat all the pa}{t}{terns shown in }{\i Design Patterns}{ since that book stands on its own and should be studied separately. Instead, this book will give some exa}{m}{
ples that should provide you with a decent feel for what patterns are about and why they are so important. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_70" \\o "A_70" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00370030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_29]#}{After years of looking at these things, it began to occur to me that the patterns themselves use basic principles of organization, other than (and more fundamental than) those described in }{\i Design Patterns}{
. These principles are based on the structure of the implementations, which is where I have seen great similarities between patterns (more than those expressed in }{\i Design Patterns}{
). Although we generally try to avoid implementation in favor of interface,}{\i  }{I have found that it\rquote 
s often easier to think about, and especially to learn about, the patterns in terms of these structural principles. This book will attempt to present the patterns based on their structure instead of the categories presented in }{\i Design Patterns}{. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_71" \\o "A_71" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00370031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420069}
The development challenge{\*\bkmkend _Toc534420069}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_30]#}{
Issues of development, the UML process, Extreme Programming. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_72" \\o "A_72" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00370032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_31]#}{Is evaluation valuable? The Capability Immaturity Model:
\par }{\v\kerning0 #[BT_32]#}{\kerning0 Wiki Page: }{\field{\*\fldinst {\ul\cf2\kerning0  HYPERLINK "http://c2.com/cgi-bin/wiki?CapabilityImMaturityModel" }{\ul\cf2\kerning0 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000003500000068007400740070003a002f002f00630032002e0063006f006d002f006300670069002d00620069006e002f00770069006b0069003f004300610070006100620069006c0069007400790049006d004d0061007400750072006900740079004d006f00
640065006c000000e0c9ea79f9bace118c8200aa004ba90b6a00000068007400740070003a002f002f00630032002e0063006f006d002f006300670069002d00620069006e002f00770069006b0069003f004300610070006100620069006c0069007400790049006d004d0061007400750072006900740079004d006f0064
0065006c000000}}}{\fldrslt {\cs42\ul\cf2\kerning0 http://c2.com/cgi-bin/wiki?CapabilityImMaturityModel}}}{\ul\cf2\kerning0 \line }{\kerning0 Article: }{\field{\*\fldinst {\ul\cf2\kerning0  HYPERLINK "http://www.embedded.com/98/9807br.htm" }{
\ul\cf2\kerning0 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000002600000068007400740070003a002f002f007700770077002e0065006d006200650064006400650064002e0063006f006d002f00390038002f003900380030003700620072002e00680074006d000000e0c9ea79f9bace118c8200aa004ba90b4c0000006800
7400740070003a002f002f007700770077002e0065006d006200650064006400650064002e0063006f006d002f00390038002f003900380030003700620072002e00680074006d000000}}}{\fldrslt {\cs42\ul\cf2\kerning0 http://www.embedded.com/98/9807br.htm}}}{\ul\cf2\kerning0 
\par  }{\field\fldedit{\*\fldinst {\ul\cf2\kerning0  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_73" \\o "A_73" }{\ul\cf2\kerning0 {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00370033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\ul\cf2\kerning0 
\par }{\i\v #[BT_33]#}{\i Pair programming}{ research:
\par }{\v\kerning0 #[BT_34]#}{\field{\*\fldinst {\kerning0  HYPERLINK "http://collaboration.csc.ncsu.edu/laurie/" }{\kerning0 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000002a00000068007400740070003a002f002f0063006f006c006c00610062006f0072006100740069006f006e002e006300730063002e006e006300730075002e006500640075002f006c00610075007200690065002f000000e0c9ea79f9bace118c8200aa004b
a90b5400000068007400740070003a002f002f0063006f006c006c00610062006f0072006100740069006f006e002e006300730063002e006e006300730075002e006500640075002f006c00610075007200690065002f000000}}}{\fldrslt {\cs42\ul\cf2\kerning0 
http://collaboration.csc.ncsu.edu/laurie/}}}{\kerning0 
\par  }{\field\fldedit{\*\fldinst {\kerning0  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_74" \\o "A_74" }{\kerning0 {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00370034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420070}
Exercises{\*\bkmkend _Toc534420070}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls2\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {\b SingletonPattern.py}{ always creates an object, even if it\rquote s never used. Modify this program to use }{\i lazy initialization}{
, so the singleton object is only created the first time that it is needed.}{\b  }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_75" \\o "A_75" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00370035000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{\b 
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 2. \tab}}\pard \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin1080\itap0 {Using }{\b SingletonPattern.py}{
 as a starting point, create a class that manages a fixed number of its own objects. Assume the objects are database connections and you only have a license to use a fixed quantity of these at any one time. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_76" \\o "A_76" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00370036000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_35]#
\par #[BT_36]#\sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0
\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420071}2: Unit Testing{\*\bkmkend _Toc534420071}
\par }\pard\plain \s15\ql \li360\ri0\sa180\sl270\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cf6 This chapter has not had any significant translation yet.
\par }{One of the important recent realizations is the dramatic value of unit testing. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_77" \\o "A_77" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00370037000000}}}{\fldrslt {\cs42\fs22\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_37]#}{
This is the process of building integrated tests into all the code that you create, and running those tests every time you do a build. It\rquote s as if you are ext
ending the compiler, telling it more about what your program is supposed to do. That way, the build process can check for more than just syntax errors, since you teach it how to check for semantic errors as well. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_78" \\o "A_78" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00370038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_38]#}{C-style programming languages, and C++ in particular, have typically valued performance over programming safety. The reason that developing programs in Java is so much faster than in C++ (r
oughly twice as fast, by most accounts) is because of Java\rquote 
s safety net: features like better type checking, enforced exceptions and garbage collection. By integrating unit testing into your build process, you are extending this safety net, and the result 
is that you can develop faster. You can also be bolder in the changes that you make, and more easily refactor your code when you discover design or implementation flaws, and in general produce a better product, faster. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_79" \\o "A_79" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00370039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_39]#}{Unit testing is not generally considered a design pattern; in fact, it might be considered a \'93development pattern,\'94 but perhaps there are enough \'93pattern\'94 phrases in the world already
. Its effect on development is so significant that it will be used throughout this book, and thus will be introduced here. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_80" \\o "A_80" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00380030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_40]#}{My own experience with 
unit testing began when I realized that every program in a book must be automatically extracted and organized into a source tree, along with appropriate makefiles (or some equivalent technology) so that you could just type }{\b make}{
 to build the whole tree. The effect of this process on the code quality of the book was so immediate and dramatic that it soon became (in my mind) a requisite for any programming book\emdash how can you trust code that you didn\rquote 
t compile? I also discovered that if I wanted to make sweeping 
changes, I could do so using search-and-replace throughout the book, and also bashing the code around at will. I knew that if I introduced a flaw, the code extractor and the makefiles would flush it out. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_81" \\o "A_81" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00380031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_41]#}{As programs became more complex, however, I also found that there was a serious hole in my system. Being able to successfully compile programs is clearly an important first step, and for a published
 book it seemed a fairly revolutionary one\emdash usually due to the pressures of publishing, it\rquote 
s quite typical to randomly open a programming book and discover a coding flaw. However, I kept getting messages from readers reporting semantic problems in my code (in }{\i Thinking in Java}{
). These problems could only be discovered by running the code. Naturally, I understood this and had taken some early faltering steps towards implementing a system that would perform automatic execution tests, but I had succumbed to the 
pressures of publishing, all the while knowing that there was definitely something wrong with my process and that it would come back to bite me in the form of embarrassing bug reports (in the open source world, embarrassment is one of the prime motivating
 factors towards increasing the quality of one\rquote s code!). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_82" \\o "A_82" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00380032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_42]#}{The other problem was that I was lacking a structure for the testing system. Eventually, I started hearing about unit testing and JUnit}{\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{ }{\v #[BT_F2]#}{http://www.junit.org}}}{
, which provided a basis for a testing structure. However, even though JUnit is intended to make the creation of test code easy, I wanted to see if I could make it even easier, applying the Extreme Programming principle of \'93
do the simplest thing that could possibly work\'94 as a starting point, and then evolving the system as usage demands (In addition, I wanted to try to reduce the amount of test code, in an attempt to fit more functionality in less code for scree
n presentations). This chapter is the result. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_83" \\o "A_83" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00380033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420072}
Write tests first{\*\bkmkend _Toc534420072}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_43]#}{As I mentioned, one of the problems that I encountered
\emdash that most people encounter, it turns out\emdash was submitting to the pressures of publishing and as a result letting tests fall by the wayside. This is easy to do if you forge ahead and write your program code because there\rquote 
s a little voice that tells you that, after all, you\rquote ve got it working now, and wouldn\rquote 
t it be more interesting/useful/expedient to just go on and write that other part (we can always go back and write the tests later). As a result, the tests take on less importance, as they often do in a development project. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_84" \\o "A_84" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00380034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_44]#}{The answer to this problem, which I first found described in }{\i Extreme Programming Explained}{, is to write the tests }{\i before}{ you write the code. This may seem t
o artificially force testing to the forefront of the development process, but what it actually does is to give testing enough additional value to make it essential. If you write the tests first, you: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_85" \\o "A_85" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00380035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\s46 \f29\fs22\kerning18 \hich\af29\dbch\af0\loch\f29 1.\tab}}\pard\plain \s46\ql \fi-648\li1008\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1008\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin1008\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Describe what the code is supposed to do, not with some external graphical tool but with code that actually lays the specification down in concrete, verifiable terms. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_86" \\o "A_86" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00380036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\s46 \f29\fs22\kerning18 \hich\af29\dbch\af0\loch\f29 2.\tab}}\pard \s46\ql \fi-648\li1008\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1008\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin1008\itap0 {
Provide an example of how the code should be used; again, this is a working, tested example, normally showing all the important method calls, rather than just an academic description of a library. }{\field\fldedit{\*\fldinst { 
HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_87" \\o "A_87" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00380037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\s46 \f29\fs22\kerning18 \hich\af29\dbch\af0\loch\f29 3.\tab}Provide a way to verify when the code is finished (when all the tests run correctly). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_88" \\o "A_88" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00380038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_45]#}{
Thus, if you write the tests first then testing becomes a development tool, not just a verification step that can be skipped if you happen to feel comfortable about the code that you just wrote (a comfort, I have found, that is usually wrong). }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_89" \\o "A_89" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00380039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_46]#}{You can find convincing arguments in }{\i Extreme Programming Explained}{, as \'93write tests first\'94 is a fundamental principle of XP. If you aren\rquote 
t convinced you need to adopt any of the changes suggested by XP, note that according to Software Engineering Institute (SEI) studies, nearly 70% of software organizations are stuck in the first two levels of SEI's scale of sophistication
: chaos, and slightly better than chaos. If you change nothing else, add automated testing. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_90" \\o "A_90" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00390030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420073}
Simple Python testing{\*\bkmkend _Toc534420073}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Sanity check for a quick test of the prog
rams in this book, and to append the output of each program (as a string) to its listing: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_91" \\o "A_91" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00390031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: SanityCheck.py
\par import string, glob, os
\par # Do not include the following in the automatic
\par # tests:
\par exclude = ("SanityCheck.py", "BoxObserver.py",)
\par 
\par def visitor(arg, dirname, names):
\par   dir = os.getcwd()
\par   os.chdir(dirname)
\par   try:
\par     pyprogs = [p for p in glob.glob('*.py') 
\par                if p not in exclude ]
\par     if not pyprogs: return
\par     print '[' + os.getcwd() + ']'
\par     for program in pyprogs:
\par       print '\\t', program
\par       os.system("python %s > tmp" % program)
\par       file = open(program).read()
\par       output = open('tmp').read()
\par       # Append output if it's not already there:
\par       if file.find("output = '''") == -1 and \\
\par         len(output) > 0:
\par         divider = '#' * 50 + '\\n'
\par         file = file.replace('#' + ':~', '#<hr>\\n')
\par         file += "output = '''\\n" + \\
\par           open('tmp').read() + "'''\\n"
\par         open(program,'w').write(file)
\par   finally:
\par     os.chdir(dir)
\par 
\par if __name__ == "__main__":
\par   os.path.walk('.', visitor, None)
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {
Just run this from the root directory of the code listings for the book; it will descend into each subdirectory and run the program th
ere. An easy way to check things is to redirect standard output to a file, then if there are any errors they will be the only thing that appears at the console during program execution. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_92" \\o "A_92" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00390032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420074}
A very simple framework{\*\bkmkend _Toc534420074}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_47]#}{
As mentioned, a primary goal of this code is to make the writing of unit testing code very simple, even simpler than with JUnit. As further needs are discovered }{\i during the use}{ of this system, 
then that functionality can be added, but to start with the framework will just provide a way to easily create and run tests, and report failure if something breaks (success will produce no results other than normal output that may occur during the runnin
g of the test). My intended use of this framework is in makefiles, and }{\b make}{
 aborts if there is a non-zero return value from the execution of a command. The build process will consist of compilation of the programs and execution of unit tests, and if }{\b make}{ ge
ts all the way through successfully then the system will be validated, otherwise it will abort at the place of failure. The error messages will report the test that failed but not much else, so that you can provide whatever granularity that you need by wr
iting as many tests as you want, each one covering as much or as little as you find necessary. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_93" \\o "A_93" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00390033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_48]#}{In some sense, this framework provides an alternative place for all those \'93print\'94 statements I\rquote ve written and later erased over the years. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_94" \\o "A_94" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00390034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_49]#}{To create a set of tests, you start by making a }{\b static }{ inner class inside the class you wish to test (your test code may also test other classes; it\rquote s up to you). This test code is distinguished by inheriting from }{\b 
UnitTest}{: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_95" \\o "A_95" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00390035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#  test:UnitTest.py
\par # The basic unit testing class
\par 
\par class UnitTest:
\par   static String testID
\par   static List errors = ArrayList()
\par   # Override cleanup() if test object 
\par   # creation allocates non-memory 
\par   # resources that must be cleaned up:
\par   def cleanup(self):
\par   # Verify the truth of a condition:
\par   protected final void affirm(boolean condition)\{
\par     if(!condition)
\par       errors.add("failed: " + testID)
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_50]#
\par #[BT_51]#}{The only testing method [[ So far ]] is }{\b affirm(\~)}{\cs45\b\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{ I had originally called this }{\b assert()}{, but that word became reserved in JDK 1.4 when assertions were added to the language.}}}{, which is }{\b protected}{
 so that it can be used from the inheriting class. All this method does is verify that something is }{\b true}{. If not, it adds an error to the list, reporting that the current test (established by the }{\b static testID}{
, which is set by the test-running program that you shall see shortly) has failed. Although this is not a lot of information\emdash you might also wish to have the line number, which could be extracted from an exception\emdash 
it may be enough for most situations. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_96" \\o "A_96" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00390036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_52]#}{Unlike JUnit (which uses }{\b setUp(\~)}{ and }{\b tearDown(\~)}{ methods), test objects will be built using ordinary Python construction. You define the test objects by creating them as ordinary class members of the
 test class, and a new test class object will be created for each test method (thus preventing any problems that might occur from side effects between tests). Occasionally, the creation of a test object will allocate non-memory resources, in which case yo
u must override }{\b cleanup(\~)}{ to release those resources. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_97" \\o "A_97" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00390037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420075}
Writing tests{\*\bkmkend _Toc534420075}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_53]#}{Writing tests becomes very simple. Here\rquote 
s an example that creates the necessary }{\b static}{ inner class and performs trivial tests: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_98" \\o "A_98" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00390038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#  c02:TestDemo.py
\par # Creating a test
\par 
\par class TestDemo:
\par   private static int objCounter = 0
\par   private int id = ++objCounter
\par   public TestDemo(String s):
\par     print (s + ": count = " + id)
\par 
\par   def close(self):
\par     print ("Cleaning up: " + id)
\par 
\par   def someCondition(self): return 1 
\par   public static class Test(UnitTest):
\par     TestDemo test1 = TestDemo("test1")
\par     TestDemo test2 = TestDemo("test2")
\par     def cleanup(self): 
\par       test2.close()
\par       test1.close()
\par 
\par     def testA(self): 
\par       print \'93TestDemo.testA\'93 
\par       affirm(test1.someCondition())
\par 
\par     def testB(self): 
\par       print \'93TestDemo.testB\'93
\par       affirm(test2.someCondition())
\par       affirm(TestDemo.objCounter != 0)
\par 
\par     # Causes the build to halt:
\par     #! public void test3(): affirm(0) 
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_54]#
\par #[BT_55]#}{The }{\b test3(\~)}{  method is commented out because, as you\rquote ll see, it causes the automatic build of this book\rquote s source-code tree to stop. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_99" \\o "A_99" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7c00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f00390039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_56]#}{You can name your inner class anything you\rquote d like; the only important factor is that it }{\b extends UnitTest}{. You can also include any necessary support code in other methods. Only }{\b public }{
methods that take no arguments and return }{\b void}{ will be treated as tests (the names of these methods are also not constrained). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_100" \\o "A_100" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100300030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_57]#}{The above test class creates two instances of }{\b TestDemo}{. The }{\b TestDemo }{constructor prints something, so that we can see it being called. You could also define a default constructor (the only kind that is used 
by the test framework), although none is necessary here. The }{\b TestDemo}{ class has a }{\b close(\~)}{ method which suggests it is used as part of object cleanup, so this is called in the overridden }{\b cleanup(\~)}{ method in }{\b Test}{. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_101" \\o "A_101" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100300031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_58]#}{The testing methods use the }{\b affirm(\~)}{ method to validate expressions, and if there is a failure the information is stored and printed after all the tests are run.  Of course, the }{\b affirm(\~)}{
 arguments are usually more complicated than this; you\rquote ll see more examples throughout the rest of this book. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_102" \\o "A_102" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100300032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_59]#}{Notice that in }{\b testB(\~)}{, the }{\b private}{ field }{\b objCounter}{ is accessible to the testing code\emdash this is because }{\b Test}{ has the permissions of an inner class. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_103" \\o "A_103" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100300033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_60]#}{You can see that writing test code requires very little extra effort, and no knowledge other than that used for writing ordinary classes. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_104" \\o "A_104" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100300034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_61]#}{To run the tests, you use }{\b RunUnitTests.py}{ (which will be introduced shortly). The command for the above code looks like this: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_105" 
\\o "A_105" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100300035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\b\v #[BT_62]#}{\b java com.bruceeckel.test.RunUnitTests TestDemo}{
\par }{\v #[BT_63]#}{It produces the following output:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {test1: count = 1
\par test2: count = 2
\par TestDemo.testA
\par Cleaning up: 2
\par Cleaning up: 1
\par test1: count = 3
\par test2: count = 4
\par TestDemo.testB
\par Cleaning up: 4
\par Cleaning up: 3
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_64]#
\par #[BT_65]#}{All the output is noise as far as the success or failure of the unit testing is concerned. Only if one or more of the unit tests fail does the program returns a non-zero value to terminate the }{\b make}{
 process after the error messages are produced. Thus, you can choose to produce output or not, as it suits your needs, and the test class becomes a good place to put any printing code you might need\emdash 
if you do this, you tend to keep such code around rather than putting it in and stripping it out as is typically done with tracing code. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_106" \\o "A_106" }
{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100300036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_66]#}{If you need to add a test to a class derived from one that already has a test class, it\rquote s no problem, as you can see here:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#  c02:TestDemo2.py
\par # Inheriting from a class that 
\par # already has a test is no problem.
\par 
\par class TestDemo2(TestDemo):
\par   public TestDemo2(String s): .__init__(s) 
\par   # You can even use the same name 
\par   # as the test class in the base class:
\par   public static class Test(UnitTest):
\par     def testA(self):
\par       print \'93TestDemo2.testA\'93
\par       affirm(1 + 1 == 2)
\par 
\par     def testB(self):
\par       print \'93TestDemo2.testB\'93 
\par       affirm(2 * 2 == 4)
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_67]#
\par #[BT_68]#}{Even the name of the inner class can be the same. In the above code, all the assertions are always true so the tests will never fail. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_107" \\
o "A_107" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100300037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420076}
White-box & black-box tests{\*\bkmkend _Toc534420076}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_69]#}{
The unit test examples so far are what are traditionally called }{\i white-box}{ }{\i tests}{. This means that the test code has complete access to the internals of the class that\rquote s being tested (so it might be more appropriately called \'93
transparent box\'94 testing). White-box testing happens automatically when you make the unit test class as an inner class of the class being tested, since inner classes automatically have access to all their outer class elements, even those that are }{\b 
private}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_108" \\o "A_108" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100300038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_70]#}{A possibly more common form of testing is }{\i black-box testing}{, which refers to treating the class under test as an impenetrable box. You can\rquote t see the internals; you can only access the }{\b public}{
 portions of the class. Thus, black-box testing corresponds more closely to functional testing, to verify the methods that the client programmer is going to use. In addition, black-box testing provides a minimal instruction sheet to the client programmer 
\endash  in the absence of all other documentation, the black-box tests at least demonstrate how to make basic calls to the }{\b public}{ class methods. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_109" \\o "A_109" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100300039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_71]#}{To perform black-box tests using the unit-testing framework presented in 
this book, all you need to do is create your test class as a global class instead of an inner class. All the other rules are the same (for example, the unit test class must be }{\b public}{, and derived from }{\b UnitTest}{). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_110" \\o "A_110" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100310030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_72]#}{There\rquote s one other caveat, which will also provide a little review of Java packages. If you want to be completely rigorous, you must put your black-box test class in a separate directory th
an the class it tests, otherwise it will have package access to the elements of the class being tested. That is, you\rquote ll be able to access }{\b protected}{ and }{\b friendly}{ elements of the class being tested. Here\rquote s an example: }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_111" \\o "A_111" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100310031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#  c02:Testable.py
\par 
\par class Testable:
\par   private void f1():
\par   def f2(self): # "Friendly": package access
\par   def f3(self): # Also package access
\par   def f4(self):
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_73]#
\par #[BT_74]#}{Normally, the only method that should be directly accessible to the client programmer is }{\b f4(\~)}{
. However, if you put your black-box test in the same directory, it automatically becomes part of the same package (in this case, the default package since none is specified) and then has inappropriate access: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_112" \\o "A_112" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100310032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#  c02:TooMuchAccess.py
\par 
\par class TooMuchAccess(UnitTest):
\par   Testable tst = Testable()
\par   def test1(self):
\par     tst.f2() # Oops!
\par     tst.f3() # Oops!
\par     tst.f4() # OK
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_75]#
\par #[BT_76]#}{You can solve the problem by moving }{\b TooMuchAccess.py}{ into its own subdirectory, thereby putting it in its own default package (thus a different package from }{\b Testable.py}{). Of course, when you do this, then }{\b Testable}{
 must be in its own package, so that it can be imported (note that it is also possible to import a \'93package-less\'94 class by giving the class name in the }{\b import}{ statement and ensuring that the class is in your CLASSPATH): }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_113" \\o "A_113" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100310033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#  c02:testable:Testable.py
\par package c02.testable
\par 
\par class Testable:
\par   private void f1():
\par   def f2(self): # "Friendly": package access
\par   def f3(self): # Also package access
\par   def f4(self):
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_77]#
\par #[BT_78]#}{Here\rquote s the black-box test in its own package, showing how only public methods may be called: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_114" \\o "A_114" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100310034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#  c02:test:BlackBoxTest.py
\par 
\par class BlackBoxTest(UnitTest):
\par   Testable tst = Testable()
\par   def test1(self):
\par     #! tst.f2() # Nope!
\par     #! tst.f3() # Nope!
\par     tst.f4() # Only public methods available
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_79]#
\par #[BT_80]#}{Note that the above program is indeed very similar to the one that the client programmer would write to use your class, including the imports and available methods. So it does make a good programming example. Of course, it\rquote 
s easier from a coding standpoint to just make an inner class, and unless you\rquote 
re ardent about the need for specific black-box testing you may just want to go ahead and use the inner classes (with the knowledge that if you need to you can later extract the inner classes into separate black-box test classes, without too much effort).
 }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_115" \\o "A_115" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100310035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420077}
Running tests{\*\bkmkend _Toc534420077}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_81]#}{
The program that runs the tests makes significant use of reflection so that writing the tests can be simple for the client programmer. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_116" \\o "A_116" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100310036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# test:RunUnitTests.py
\par # Discovering the unit test
\par # class and running each test.
\par 
\par class RunUnitTests:
\par   public static void 
\par   require(boolean requirement, String errmsg):
\par     if(!requirement):
\par       System.err.println(errmsg)
\par       System.exit(1)
\par 
\par   def main(self, String[] args):
\par     require(args.length == 1,
\par       "Usage: RunUnitTests qualified-class")
\par     try:
\par       Class c = Class.forName(args[0])
\par       # Only finds the inner classes 
\par       # declared in the current class:
\par       Class[] classes = c.getDeclaredClasses()
\par       Class ut = null
\par       for(int j = 0 j < classes.length j++):
\par         # Skip inner classes that are 
\par         # not derived from UnitTest:
\par         if(!UnitTest.class.
\par             isAssignableFrom(classes[j]))
\par               continue
\par         ut = classes[j]
\par         break # Finds the first test class only
\par       
\par       # If it found an inner class, 
\par       # that class must be static:
\par       if(ut != null)
\par         require(
\par           Modifier.isStatic(ut.getModifiers()),
\par           "inner UnitTest class must be static")
\par       # If it couldn't find the inner class, 
\par       # maybe it's a regular class (for black-
\par       # box testing:
\par       if(ut == null)
\par         if(UnitTest.class.isAssignableFrom(c))
\par           ut = c
\par       require(ut != null, 
\par         "No UnitTest class found")
\par       require(
\par         Modifier.isPublic(ut.getModifiers()),
\par         "UnitTest class must be public")
\par       Method[] methods = ut.getDeclaredMethods()
\par       for(int k = 0 k < methods.length k++):
\par         Method m = methods[k]
\par         # Ignore overridden UnitTest methods:
\par         if(m.getName().equals("cleanup")) 
\par           continue
\par         # Only public methods with no 
\par         # arguments and void return 
\par         # types will be used as test code:
\par         if(m.getParameterTypes().length == 0 &&
\par            m.getReturnType() == void.class &&
\par            Modifier.isPublic(m.getModifiers())):
\par              # The name of the test is 
\par              # used in error messages:
\par              UnitTest.testID = m.getName()
\par              # A instance of the 
\par              # test object is created and 
\par              # cleaned up for each test:
\par              Object test = ut.newInstance()
\par              m.invoke(test, Object[0])
\par              ((UnitTest)test).cleanup()
\par         
\par       
\par      catch(Exception e):
\par       e.printStackTrace(System.err)
\par       # Any exception will return a nonzero 
\par       # value to the console, so that 
\par       # 'make' will abort:
\par       System.err.println("Aborting make")
\par       System.exit(1)
\par 
\par     # After all tests in this class are run,
\par     # display any results. If there were errors,
\par     # abort 'make' by returning a nonzero value.
\par     if(UnitTest.errors.size() != 0):
\par       Iterator it = UnitTest.errors.iterator()
\par       while(it.hasNext())
\par         System.err.println(it.next())
\par       System.exit(1)
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_82]#
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420078}
Automatically executing tests{\*\bkmkend _Toc534420078}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_83]#
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420079}
Exercises{\*\bkmkend _Toc534420079}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls3\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {Install this book\rquote s source code tree and ensure that you have a }{\b make}{ utility installed on your system (Gnu }{\b make}{
 is freely available on the internet at various locations). In }{\b TestDemo.py}{, un-comment }{\b test3(\~)}{, then type }{\b make}{ and observe the results. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_117" \\o "A_117" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100310037000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 2. \tab}Modify TestDemo.java by adding a new test that throws an exception. Type }{\b make}{ and observe the results. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_118" \\o "A_118" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100310038000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 3. \tab}}\pard \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin1080\itap0 {Modify your solut
ions to the exercises in Chapter 1 by adding unit tests. Write makefiles that incorporate the unit tests. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_119" \\o "A_119" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100310039000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_84]#
\par {\*\bkmkstart _Toc375545413}{\*\bkmkstart _Toc455024531}{\*\bkmkstart _Toc476705896}#[BT_85]#\sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain 
\s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420080}3: Build
ing application frameworks{\*\bkmkend _Toc476705896}{\*\bkmkend _Toc534420080}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_86]#}{
An application framework allows you to inherit from a class or set of classes and create a new application, reusing most of the code in the existing classes and overriding one or more methods in order to customize the application to your n
eeds. A fundamental concept in the application framework is the }{\i Template Method}{
 which is typically hidden beneath the covers and drives the application by calling the various methods in the base class (some of which you have overridden in order to create the application). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_120" \\o "A_120" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100320030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_87]#}{For example, whenever you create an applet you\rquote re using an application framework: you inherit from }{\b JApplet}{ and then override }{\b init(\~)}{. The applet mechanism (which is a }{\i Template Method}{)}{\i  }{
does the rest by drawing the screen, handling the event loop, resizing, etc. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_121" \\o "A_121" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100320031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705897}
{\*\bkmkstart _Toc534420081}Template method{\*\bkmkend _Toc476705897}{\*\bkmkend _Toc534420081}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_88]#}{An important characteristic of the }{\i Template Method}{
 is that it is defined in the base class and cannot be changed. It\rquote s sometimes a }{\b private}{ method but it\rquote s virtually always }{\b final}{. It calls other base-class methods (the ones you override) in order to d
o its job, but it is usually called only as part of an initialization process (and thus the client programmer isn\rquote t necessarily able to call it directly). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_122" \\o "A_122" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100320032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c03:TemplateMethod.py
\par # Simple demonstration of Template Method.
\par 
\par class ApplicationFramework:
\par   def __init__(self):
\par     self.__templateMethod()
\par   def __templateMethod(self):
\par     for i in range(5):
\par       self.customize1()
\par       self.customize2()
\par 
\par # Create a "application":
\par class MyApp(ApplicationFramework):
\par   def customize1(self):
\par     print "Nudge, nudge, wink, wink! ",
\par   def customize2(self): 
\par     print "Say no more, Say no more!"
\par 
\par MyApp()
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_89]#
\par #[BT_90]#}{The base-class constructor is responsible for performing the necessary initialization and then starting the \'93engine\'94 (the template method) that runs the application (in a GUI application, this \'93engine\'94
 would be the main event loop). The client programmer simply provides definitions for }{\b customize1(\~)}{ and }{\b customize2(\~)}{ and the \'93application\'94 is ready to run. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_123" \\o "A_123" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100320033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par We\rquote ll see }{\i Template Method}{ numerous other times throughout the book. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_124" \\o "A_124" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100320034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420082}
Exercises{\*\bkmkend _Toc534420082}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls21\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {Create a framework that takes a list of file names on the command line. It opens each file except the last for reading, and the last for writing. The framework will pr
ocess each input file using an undetermined policy and write the output to the last file. Inherit to customize this framework to create two separate applications:\line 1) Converts all the letters in each file to uppercase.\line 
2) Searches the files for words given in the first file. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_125" \\o "A_125" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100320035000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_91]#\sect }\sectd 
\binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 
\cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705898}{\*\bkmkstart _Toc534420083}4:Fronting for an implementation{\*\bkmkend _Toc476705898}{\*\bkmkend _Toc534420083}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_92]#}{Both }{\i Proxy}{ and }{\i State}{
 provide a surrogate class that you use in your code; the real
 class that does the work is hidden behind this surrogate class. When you call a method in the surrogate, it simply turns around and calls the method in the implementing class. These two patterns are so similar that the }{\i Proxy}{
 is simply a special case of }{\i State}{. One is tempted to just lump the two together into a pattern called }{\i Surrogate}{, but the term \'93proxy\'94
 has a long-standing and specialized meaning, which probably explains the reason for the two different patterns. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_126" \\o "A_126" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100320036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_93]#}{The basic idea is simple: from a base class, the surrogate is derived along with the class or classes that provide the actual implementation: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books
/TIPython/BackTalk/FindPage/A_127" \\o "A_127" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100320037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard \qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_94]#}{{\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}
{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pibName}{\sv Surrogate}}{\sp{\sn pibFlags}{\sv 2}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw11850\pich4870\picwgoal6718\pichgoal2761\wmetafile8\bliptag-1364540361\blipupi259{\*\blipuid aeaac437e45a5ff4397ee60f6aba560e}
0100090000035d0c000005006608000000006608000026060f00c210574d4643010000000000010097e20000000001000000a010000000000000a01000000100
0000780000002400000024000000982b0000741200000000000000000000492e00000513000020454d4600000100a0100000ab000000030000000f0000005800
000000000000b04f000020670000d80000001701000056004900530049004f000000440072006100770069006e00670000000000004b0a000000100000000000
0000000000000900000010000000bc2b0000f91100000d000000100000000000000000000000190000000c00000004ae2201260000001c000000010000000000
0000180000000000000000000000250000000c00000001000000250000000c000000000000805600000030000000d6130000240000008c1b0000c00300000500
0000e213b403801bb403801b3000e2133000e213b403250000000c00000008000080280000000c00000001000000120000000c00000001000000160000000c00
000018000000250000000c00000005000080520000004c01000001000000b3feffffa90000000000000000000000900100000000000000000022560065007200
640061006e0061000000006d00720077007c00810086008b00900095009a009f00a400a900ae00b200b700bc00c100c600cb00d000d500db0000000000eb00f0
00f600fb01010107010d01130119011f0125012b01320138013e0145014c0152015901600167016e0175017c0183018b0192019a01a101a901b101b901c101c9
01d101d901e101e901f201fa0203020c0214021d0226022f02380241024b0254025d02670271027a0284028e029802a202ac02b602c102cb02d5000002eb02f5
0300030b03160321032d03380343034f035a03660372037e038a039603a203ae03ba03c703d303e003ec03f9040604130420042d043b04480455000000000000
000000000000000000000000000000000000010101010101010101010558250000000c000000010000005400000084000000be14000056020000a31a0000ea03
0000010000008887873f8887873fbe14000056020000090000004c00000000000000000000000000000000000000000000006000000049006e00740065007200
660061006300650009258c000000d300000083000000c60000008e00000075000000c8000000ad000000c6000000120000000c000000020000000d0000001000
00000000000000000000120000000c00000001000000260000001c0000000200000000000000180000000000000000000000250000000c000000020000002500
00000c00000005000080570000002c0000003b110000ec040000bd1700005f09000004000000b117f804b1173e0747113e0747115309250000000c0000000800
0080280000000c00000002000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c0000000200
000000000000180000000000000000000000250000000c00000002000000250000000c00000005000080570000002c00000039170000a8030000291800000405
0000040000001d18f804b117b4034517f8041d18f804250000000c00000008000080280000000c00000002000000120000000c000000020000000d0000001000
00000000000000000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c000000000000805600
00003000000058080000230f0000d0110000d5110000050000006408c911c411c911c4112f0f64082f0f6408c911250000000c00000008000080280000000c00
000002000000120000000c00000001000000250000000c00000005000080250000000c000000010000005400000084000000d5090000e0100000511000007412
0000010000008887873f8887873fd5090000e0100000090000004c00000000000000000000000000000000000000000000006000000053007500720072006f00
67006100740065003be8e4000000d30000008e0000008e000000ca000000cf000000c800000083000000c6000000120000000c000000020000000d0000001000
00000000000000000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c000000000000805600
00003000000056190000230f0000bc250000d5110000050000006219c911b025c911b0252f0f62192f0f6219c911250000000c00000008000080280000000c00
000002000000120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000a0000000571a0000e0100000b92400007412
0000010000008887873f8887873f571a0000e01000000e0000004c00000000000000000000000000000000000000000000006800000049006d0070006c006500
6d0065006e0074006100740069006f006e008c00000044010000cf0000005b000000c600000044010000c6000000d300000083000000c8000000830000005b00
0000ca000000d3000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c000000020000000000
0000180000000000000000000000250000000c00000002000000250000000c000000050000805700000024000000b8110000701000006e190000881000000200
0000c4117c1062197c10250000000c00000008000080280000000c00000002000000120000000c000000020000000d0000001000000000000000000000002600
00001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c000000000000805600000030000000240000004709
00009c090000f90b0000050000003000ed0b9009ed0b90095309300053093000ed0b250000000c00000008000080280000000c00000002000000120000000c00
000001000000250000000c00000005000080250000000c000000010000005400000084000000a1010000040b00001d080000980c0000010000008887873f8887
873fa1010000040b0000090000004c00000000000000000000000000000000000000000000006000000053007500720072006f006700610074006500d4cbe400
0000d30000008e0000008e000000ca000000cf000000c800000083000000c6000000120000000c000000020000000d0000001000000000000000000000002600
00001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c000000000000805600000030000000140b00004709
00007a170000f90b000005000000200bed0b6e17ed0b6e175309200b5309200bed0b250000000c00000008000080280000000c00000002000000120000000c00
000001000000250000000c00000005000080250000000c0000000100000054000000a8000000ab0b0000040b0000e1160000980c0000010000008887873f8887
873fab0b0000040b00000f0000004c00000000000000000000000000000000000000000000006c00000049006d0070006c0065006d0065006e00740061007400
69006f006e00310016178c00000044010000cf0000005b000000c600000044010000c6000000d300000083000000c8000000830000005b000000ca000000d300
0000d4000000120000000c000000020000000d000000100000000000000000000000260000001c00000002000000000000001800000000000000000000002500
00000c00000002000000250000000c000000000000805600000030000000f21800004709000058250000f90b000005000000fe18ed0b4c25ed0b4c255309fe18
5309fe18ed0b250000000c00000008000080280000000c00000002000000120000000c00000001000000250000000c00000005000080250000000c0000000100
000054000000a800000089190000040b0000bf240000980c0000010000008887873f8887873f89190000040b00000f0000004c00000000000000000000000000
000000000000000000006c00000049006d0070006c0065006d0065006e0074006100740069006f006e0032007a7b8c00000044010000cf0000005b000000c600
000044010000c6000000d300000083000000c8000000830000005b000000ca000000d3000000d4000000120000000c000000020000000d000000100000000000
000000000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c00000000000080560000003000
0000d026000047090000982b0000f90b000005000000dc26ed0b8c2bed0b8c2b5309dc265309dc26ed0b250000000c00000008000080280000000c0000000200
0000120000000c00000001000000250000000c00000005000080250000000c000000010000005400000064000000f6270000040b0000712a0000980c00000100
00008887873f8887873ff6270000040b0000040000004c0000000000000000000000000000000000000000000000540000004500740063002e00d30000008300
0000ad00000079000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c000000020000000000
0000180000000000000000000000250000000c00000002000000250000000c00000005000080570000002c000000a5170000ec040000311f00005f0900000400
0000b117f804b1173e07251f3e07251f5309250000000c00000008000080280000000c00000002000000120000000c000000020000000d000000100000000000
000000000000120000000c00000001000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c00
000005000080570000002c00000039170000a80300002918000004050000040000001d18f804b117b4034517f8041d18f804250000000c000000080000802800
00000c00000002000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c000000020000000000
0000180000000000000000000000250000000c00000002000000250000000c00000005000080570000002c000000a5170000ec040000402900005f0900000400
0000b117f804b1173e0734293e0734295309250000000c00000008000080280000000c00000002000000120000000c000000020000000d000000100000000000
000000000000120000000c00000001000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c00
000005000080570000002c00000039170000a80300002918000004050000040000001d18f804b117b4034517f8041d18f804250000000c000000080000802800
00000c00000002000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c000000020000000000
0000180000000000000000000000250000000c00000002000000250000000c00000005000080570000002c000000d4040000ec040000bd1700005f0900000400
0000b117f804b1173e07e0043e07e0045309250000000c00000008000080280000000c00000002000000120000000c000000020000000d000000100000000000
000000000000120000000c00000001000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c00
000005000080570000002c00000039170000a80300002918000004050000040000001d18f804b117b4034517f8041d18f804250000000c000000080000802800
00000c000000020000000e000000140000000000000010000000140000000400000003010800050000000b0200000000050000000c02ff11b72b050000000102
04ae220108000000fa0200001800000000000000040000002d01000007000000fc020000ffffff000000040000002d0101000e00000024030500e213b403801b
b403801b3000e2133000e213b40308000000fa02050000000000ffffff00040000002d01020004000000f00100000400000002010100040000002e0118000700
0000fc020100000000000000040000002d0100001c000000fb024d01a900000000009001000000000000002256657264616e61003f3f3f3f3f3f3f3f3f3f3f3f
3f3f3f3f3f3f3f3f3f3f3f00040000002d01030015000000320a5602be1409000000496e746572666163656e8c00d3008300c6008e007500c800ad00c6000400
000002010200040000000201010008000000fa0200001800000000000000040000002d010400040000002d0100000c00000025030400b117f804b1173e074711
3e0747115309040000002d01020004000000f00104000400000002010200040000000201010008000000fa0200001800000000000000040000002d0104000400
00002d0100000c000000250304001d18f804b117b4034517f8041d18f804040000002d01020004000000f0010400040000000201020008000000fa0200001800
000000000000040000002d010400040000002d0101000e000000240305006408c911c411c911c4112f0f64082f0f6408c911040000002d01020004000000f001
04000400000002010100040000002d010000040000002d01030015000000320ae010d50909000000537572726f676174656ee400d3008e008e00ca00cf00c800
8300c600040000000201020008000000fa0200001800000000000000040000002d010400040000002d0101000e000000240305006219c911b025c911b0252f0f
62192f0f6219c911040000002d01020004000000f00104000400000002010100040000002d010000040000002d0103001c000000320ae010571a0e000000496d
706c656d656e746174696f6e8c004401cf005b00c6004401c600d3008300c80083005b00ca00d3000400000002010200040000000201010008000000fa020000
1800000000000000040000002d010400040000002d0100000800000025030200c4117c1062197c10040000002d01020004000000f00104000400000002010200
08000000fa0200001800000000000000040000002d010400040000002d0101000e000000240305003000ed0b9009ed0b90095309300053093000ed0b04000000
2d01020004000000f00104000400000002010100040000002d010000040000002d01030015000000320a040ba10109000000537572726f676174656ee400d300
8e008e00ca00cf00c8008300c600040000000201020008000000fa0200001800000000000000040000002d010400040000002d0101000e00000024030500200b
ed0b6e17ed0b6e175309200b5309200bed0b040000002d01020004000000f00104000400000002010100040000002d010000040000002d0103001e000000320a
040bab0b0f000000496d706c656d656e746174696f6e31008c004401cf005b00c6004401c600d3008300c80083005b00ca00d300d40004000000020102000800
0000fa0200001800000000000000040000002d010400040000002d0101000e00000024030500fe18ed0b4c25ed0b4c255309fe185309fe18ed0b040000002d01
020004000000f00104000400000002010100040000002d010000040000002d0103001e000000320a040b89190f000000496d706c656d656e746174696f6e3200
8c004401cf005b00c6004401c600d3008300c80083005b00ca00d300d400040000000201020008000000fa0200001800000000000000040000002d0104000400
00002d0101000e00000024030500dc26ed0b8c2bed0b8c2b5309dc265309dc26ed0b040000002d01020004000000f00104000400000002010100040000002d01
0000040000002d0103000d000000320a040bf627040000004574632ed3008300ad0079000400000002010200040000000201010008000000fa02000018000000
00000000040000002d010400040000002d0100000c00000025030400b117f804b1173e07251f3e07251f5309040000002d01020004000000f001040004000000
02010200040000000201010008000000fa0200001800000000000000040000002d010400040000002d0100000c000000250304001d18f804b117b4034517f804
1d18f804040000002d01020004000000f00104000400000002010200040000000201010008000000fa0200001800000000000000040000002d01040004000000
2d0100000c00000025030400b117f804b1173e0734293e0734295309040000002d01020004000000f00104000400000002010200040000000201010008000000
fa0200001800000000000000040000002d010400040000002d0100000c000000250304001d18f804b117b4034517f8041d18f804040000002d01020004000000
f00104000400000002010200040000000201010008000000fa0200001800000000000000040000002d010400040000002d0100000c00000025030400b117f804
b1173e07e0043e07e0045309040000002d01020004000000f00104000400000002010200040000000201010008000000fa0200001800000000000000040000002d010400040000002d0100000c000000250304001d18f804b117b4034517f8041d18f804040000002d01020004000000f0010400030000000000}}{
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_95]#}{When a surrogate object is created, it is given an implementation to which to send all of the method calls. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_128" \\o "A_128" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100320038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_96]#}{Structurally, the difference between }{\i Proxy}{ and }{\i State}{ is simple: a }{\i Proxy}{ has only one implementation, while }{\i State}{ has more than one. The application of the patterns is considered (in }{\i Design Patterns}{
) to be distinct: }{\i Proxy}{ is used to control access to its implementation, while }{\i State}{ allows you to change the implementation dynamically. However, if you expand your notion of \'93controlling access to implementation\'94
 then the two fit neatly together. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_129" \\o "A_129" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100320039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705899}
{\*\bkmkstart _Toc534420084}Proxy{\*\bkmkend _Toc476705899}{\*\bkmkend _Toc534420084}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_97]#}{If we implement }{\i Proxy}{
 by following the above diagram, it looks like this: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_130" \\o "A_130" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100330030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c04:ProxyDemo.py
\par # Simple demonstration of the Proxy pattern.
\par 
\par class Implementation:
\par   def f(self): 
\par     print "Implementation.f()"
\par   def g(self): 
\par     print "Implementation.g()" 
\par   def h(self): 
\par     print "Implementation.h()" 
\par 
\par class Proxy:
\par   def __init__(self): 
\par     self.__implementation = Implementation() 
\par   # Pass method calls to the implementation:
\par   def f(self): self.__implementation.f() 
\par   def g(self): self.__implementation.g() 
\par   def h(self): self.__implementation.h() 
\par 
\par p = Proxy()
\par p.f(); p.g(); p.h()
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_98]#
\par #[BT_99]#}{It isn\rquote t necessary that }{\b Implementation}{ have the same interface as }{\b Proxy}{; as long as }{\b Proxy}{ is somehow \'93speaking for\'94 the class that it is referring method calls to then the basic idea is satisfied (note that th
is statement is at odds with the definition for Proxy in GoF). However, it is convenient to have a common interface so that }{\b Implementation}{ is forced to fulfill all the methods that }{\b Proxy}{ needs to call. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_131" \\o "A_131" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100330031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Of course, in Python we have a delegation mechanism built in, so it makes the }{\b Proxy}{ even simpler to implement: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_132" \\o "A_132" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100330032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c04:ProxyDemo2.py
\par # Simple demonstration of the Proxy pattern.
\par 
\par class Implementation2:
\par   def f(self): 
\par     print "Implementation.f()"
\par   def g(self): 
\par     print "Implementation.g()" 
\par   def h(self): 
\par     print "Implementation.h()" 
\par 
\par class Proxy2:
\par   def __init__(self): 
\par     self.__implementation = Implementation2() 
\par   def __getattr__(self, name):
\par     return getattr(self.__implementation, name)
\par 
\par p = Proxy2()
\par p.f(); p.g(); p.h();
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {The beauty of using }{\b __getattr__(\~)}{ is that }{\b Proxy2}{
 is completely generic, and not tied to any particular implementation (in Java, a rather complicated \'93dynamic proxy\'94 has been invented to accomplish this same thing). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_133" \\o "A_133" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100330033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705900}
{\*\bkmkstart _Toc534420085}State{\*\bkmkend _Toc476705900}{\*\bkmkend _Toc534420085}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_100]#}{The }{\i State}{ pattern adds more implementations to }{
\i Proxy}{, along with a way to switch from one implementation to another during the lifetime of the surrogate: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_134" \\o "A_134" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100330034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c04:StateDemo.py
\par # Simple demonstration of the State pattern.
\par 
\par class State_d:
\par   def __init__(self, imp): 
\par     self.__implementation = imp 
\par   def changeImp(self, newImp):
\par     self.__implementation = newImp
\par   # Delegate calls to the implementation:
\par   def __getattr__(self, name):
\par     return getattr(self.__implementation, name)
\par 
\par class Implementation1:
\par   def f(self): 
\par     print "Fiddle de dum, Fiddle de dee," 
\par   def g(self): 
\par     print "Eric the half a bee." 
\par   def h(self): 
\par     print "Ho ho ho, tee hee hee," 
\par 
\par class Implementation2:
\par   def f(self): 
\par     print "We're Knights of the Round Table." 
\par   def g(self): 
\par     print "We dance whene'er we're able." 
\par   def h(self): 
\par     print "We do routines and chorus scenes" 
\par 
\par def run(b):
\par   b.f()
\par   b.g()
\par   b.h()
\par   b.g()
\par 
\par b = State_d(Implementation1())
\par run(b)
\par b.changeImp(Implementation2())
\par run(b)
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_101]#
\par #[BT_102]#}{You can see that the first implementation is used for a bit, then the second implementation is swapped in and that is used. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_135" \\o "A_135" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100330035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_103]#}{The difference between }{\i Proxy}{ and }{\i State}{ is in the problems that are solved. The common uses for }{\i Proxy}{ as described in }{\i Design Patterns}{ are: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.m
indview.net/Books/TIPython/BackTalk/FindPage/A_136" \\o "A_136" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100330036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\s46 \b\f29\fs22\kerning18 \hich\af29\dbch\af0\loch\f29 1.\tab}}\pard\plain \s46\ql \fi-648\li1008\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1008\aspalpha\aspnum\faauto\ls18\adjustright\rin0\lin1008\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\b Remote proxy}{. This proxies for an object in a different address space. A remote proxy is created for you automatically by the RMI compiler }{\b rmic}{
 as it creates stubs and skeletons. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_137" \\o "A_137" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100330037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\s46 \b\f29\fs22\kerning18 \hich\af29\dbch\af0\loch\f29 2.\tab}}{\b Virtual proxy}{. This provides \'93lazy initialization\'94 to create expensive objects on demand. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_138" \\o "A_138" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100330038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\s46 \b\f29\fs22\kerning18 \hich\af29\dbch\af0\loch\f29 3.\tab}}{\b Protection proxy}{. Used when you don\rquote t want the client programmer to have full access to the proxied object. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_139" \\o "A_139" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100330039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\s46 \b\f29\fs22\kerning18 \hich\af29\dbch\af0\loch\f29 4.\tab}}{\b Smart reference}{
. To add additional actions when the proxied object is accessed. For example, or to keep track of the number of references that are held for a particular object, in order to implement the }{\i copy-on-write}{ idiom and prevent object aliasing. A simple
r example is keeping track of the number of calls to a particular method. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_140" \\o "A_140" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100340030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_104]#}{
You could look at a Python reference as a kind of protection proxy, since it controls access to the actual object on the heap (and ensures, for example, that you don\rquote t use a }{\b null }{reference). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_141" \\o "A_141" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100340031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_105]#}{[[ Rewrite this: In }{\i Design Patterns}{, }{\i Proxy}{ and }{\i State}{ are not seen as related to each other because the two are given (what I consider arbitrarily) different structures. }{\i State}{
, in particular, uses a separate implementation hierarchy but this seems to me to be unnecessary unless
 you have decided that the implementation is not under your control (certainly a possibility, but if you own all the code there seems to be no reason not to benefit from the elegance and helpfulness of the single base class). In addition, }{\i Proxy}{
 need not use the same base class for its implementation, as long as the proxy object is controlling access to the object it \'93fronting\'94 for. Regardless of the specifics, in both }{\i Proxy }{and }{\i State}{
 a surrogate is passing method calls through to an implementation object.]]] }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_142" \\o "A_142" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100340032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705901}
{\*\bkmkstart _Toc534420086}StateMachine{\*\bkmkend _Toc476705901}{\*\bkmkend _Toc534420086}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_106]#}{While }{\i State}{
 has a way to allow the client programmer to change the implementation, }{\i StateMachine}{ imposes a structure to automatic
ally change the implementation from one object to the next. The current implementation represents the state that a system is in, and the system behaves differently from one state to the next (because it uses }{\i State}{). Basically, this is a \'93
state machine\'94 using objects. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_143" \\o "A_143" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100340033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_107]#}{The code that moves the system from one state to the next is often a }{\i Template Method}{, as seen in the following framework for a basic state machine. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_144" \\o "A_144" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100340034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Each state can be }{\b run(\~)}{ to perform its behavior, and (in this design) you can also pass it an \'93input\'94 object so it can tell you what new state to move to based on that \'93input\'94
. The key distinction between this design and the next is that here, each }{\b State}{ object decides what other states it can move to, based on the \'93input\'94, whereas in the subsequent design all of the state transitions are
 held in a single table. Another way to put it is that here, each }{\b State}{ object has its own little }{\b State}{ table, and in the subsequent design there is a single master state transition table for the whole system. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_145" \\o "A_145" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100340035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c04:statemachine:State.py
\par # A State has an operation, and can be moved
\par # into the next State given an Input:
\par 
\par class State:
\par   def run(self): 
\par     assert 1, "run not implemented"
\par   def next(self, input):
\par     assert 1, "next not implemented"
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {
This class is clearly unnecessary, but it allows us to say that something is a }{\b State}{ object in code, and provide a slightly different error message when all the methods are not implemented. We could have gotten basically the same effect by saying: 
}{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_146" \\o "A_146" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100340036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {class State: pass
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {because we would still get exceptions if }{\b run(\~)}{ or }{\b next(\~)}
{ were called for a derived type, and they hadn\rquote t been implemented. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_147" \\o "A_147" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100340037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par The }{\b StateMachine}{ keeps track of the current state, which is initialized by the constructor. The }{\b runAll(\~)}{ method takes a list of }{\b Input}{ objects. This method not only moves to the next state, but it also calls }{\b run(\~)}{
 for each state object \endash  thus you can see it\rquote s an expansion of the idea of the }{\b State}{ pattern, since }{\b run(\~)}{ does something different depending on the state that the system is in. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_148" \\o "A_148" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100340038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c04:statemachine:StateMachine.py

\par # Takes a list of Inputs to move from State to 
\par # State using a template method.
\par 
\par class StateMachine:
\par   def __init__(self, initialState):
\par     self.currentState = initialState
\par     self.currentState.run()
\par   # Template method:
\par   def runAll(self, inputs):
\par     for i in inputs:
\par       print i
\par       self.currentState = self.currentState.next(i)
\par       self.currentState.run()
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {I\rquote ve also treated }{\b runAll(\~)}{
 as a template method. This is typical, but certainly not required \endash  you could concievably want to override it, but typically the behavior change will occur in }{\b State}{\rquote s }{\b run(\~)}{ instead. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_149" \\o "A_149" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100340039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par At this point the basic framework for this style of }{\i StateMachine}{ (where each state decides the next states) is complete. As an example, I\rquote ll use a fancy mousetrap that can move through several states in the process of trapping a mouse}{
\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{
 No mice were harmed in the creation of this example.}}}{. The mouse classes and information are stored in the }{\b mouse}{
 package, including a class representing all the possible moves that a mouse can make, which will be the inputs to the state machine: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_150" \\o "A_150" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100350030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c04:mouse:MouseAction.py
\par 
\par class MouseAction:
\par   def __init__(self, action): 
\par     self.action = action
\par   def __str__(self): return self.action 
\par   def __cmp__(self, other):
\par     return cmp(self.action, other.action)
\par   # Necessary when __cmp__ or __eq__ is defined
\par   # in order to make this class usable as a
\par   # dictionary key:
\par   def __hash__(self): 
\par     return hash(self.action)
\par 
\par # Static fields; an enumeration of instances:
\par MouseAction.appears = MouseAction("mouse appears")
\par MouseAction.runsAway = MouseAction("mouse runs away")
\par MouseAction.enters = MouseAction("mouse enters trap")
\par MouseAction.escapes = MouseAction("mouse escapes")
\par MouseAction.trapped = MouseAction("mouse trapped")
\par MouseAction.removed = MouseAction("mouse removed")
\par #:~
\par 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {You\rquote ll note that }{\b __cmp__(\~)}{
 has been overidden to implement a comparison between }{\b action}{ values. Also, each possible move by a mouse is enumerated as a }{\b MouseAction}{ object, all of which are static fields in }{\b MouseAction}{. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_151" \\o "A_151" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100350031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par For creating test code, a sequence of mouse inputs is provided from a text file: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_152" \\o "A_152" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100350032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#:! c04:mouse:MouseMoves.txt
\par mouse appears
\par mouse runs away
\par mouse appears
\par mouse enters trap
\par mouse escapes
\par mouse appears
\par mouse enters trap
\par mouse trapped
\par mouse removed
\par mouse appears
\par mouse runs away
\par mouse appears
\par mouse enters trap
\par mouse trapped
\par mouse removed
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {With these tools in place, it\rquote 
s now possible to create the first version of the mousetrap program. Each }{\b State}{ subclass defines its }{\b run(\~)}{ behavior, and also establishes its next state with an }{\b if-else}{ clause: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_153" \\o "A_153" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100350033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c04:mousetrap1:MouseTrapTest.py

\par # State Machine pattern using 'if' statements
\par # to determine the next state.
\par import string, sys
\par sys.path += ['../statemachine', '../mouse']
\par from State import State
\par from StateMachine import StateMachine
\par from MouseAction import MouseAction
\par # A different subclass for each state:
\par 
\par class Waiting(State):
\par   def run(self): 
\par     print "Waiting: Broadcasting cheese smell"
\par 
\par   def next(self, input):
\par     if input == MouseAction.appears:
\par       return MouseTrap.luring
\par     return MouseTrap.waiting
\par 
\par class Luring(State):
\par   def run(self):
\par     print "Luring: Presenting Cheese, door open"
\par 
\par   def next(self, input):
\par     if input == MouseAction.runsAway:
\par       return MouseTrap.waiting
\par     if input == MouseAction.enters:
\par       return MouseTrap.trapping
\par     return MouseTrap.luring
\par 
\par class Trapping(State):
\par   def run(self):
\par     print "Trapping: Closing door"
\par 
\par   def next(self, input):
\par     if input == MouseAction.escapes:
\par       return MouseTrap.waiting
\par     if input == MouseAction.trapped:
\par       return MouseTrap.holding
\par     return MouseTrap.trapping
\par 
\par class Holding(State):
\par   def run(self):
\par     print "Holding: Mouse caught"
\par 
\par   def next(self, input):
\par     if input == MouseAction.removed:
\par       return MouseTrap.waiting
\par     return MouseTrap.holding
\par 
\par class MouseTrap(StateMachine):
\par   def __init__(self): 
\par     # Initial state
\par     StateMachine.__init__(self, MouseTrap.waiting)
\par 
\par # Static variable initialization:
\par MouseTrap.waiting = Waiting()
\par MouseTrap.luring = Luring()
\par MouseTrap.trapping = Trapping()
\par MouseTrap.holding = Holding()
\par 
\par moves = map(string.strip, 
\par   open("../mouse/MouseMoves.txt").readlines())
\par MouseTrap().runAll(map(MouseAction, moves))
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {The }{\b StateMachine}{
 class simply defines all the possible states as static objects, and also sets up the initial state. The }{\b UnitTest}{ creates a }{\b MouseTrap}{ and then tests it with all the inputs from a }{\b MouseMoveList}{. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_154" \\o "A_154" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100350034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par While the}{\v WhiW}{ use of }{\b if}{ statements inside the }{\b next(\~)}{ methods is perfectly reasonable, managing a large number of these could become difficult. Another approach is to create tables inside each }{\b State}{ object 
defining the various next states based on the input. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_155" \\o "A_155" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100350035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Initially, this seems like it ought to be quite simple. You should be able to define a static table in each }{\b State}{ subclass that defines the transitions in terms of the other }{\b State}{
 objects. However, it turns out that this approach generates cyclic initialization dependencies. To solve the problem, I\rquote ve had to delay the initialization of the tables until the first time that the }{\b next(\~)}{
 method is called for a particular }{\b State}{ object. Initially, the }{\b next(\~)}{ methods can appear a little strange because of this. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_156" \\
o "A_156" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100350036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par The }{\b StateT}{ class is an implementation of }{\b State}{ (so that the same }{\b StateMachine}{ class can be used from the previous example) that adds a }{\b Map}{ and a method to initialize the map from a two-dimensional array. The }{\b next(\~)}{
 method has a base-class implementation which must be called from the overridden derived class }{\b next(\~)}{ methods after they test for a }{\b null Map}{ (and initialize it if it\rquote s }{\b null}{): }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_157" \\o "A_157" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100350037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c04:mousetrap2:MouseTrap2Test.py

\par # A better mousetrap using tables
\par import string, sys
\par sys.path += ['../statemachine', '../mouse']
\par from State import State
\par from StateMachine import StateMachine
\par from MouseAction import MouseAction
\par 
\par class StateT(State):
\par   def __init__(self):
\par     self.transitions = None
\par   def next(self, input):
\par     if self.transitions.has_key(input):
\par       return self.transitions[input]
\par     else:
\par       raise "Input not supported for current state"
\par 
\par class Waiting(StateT):
\par   def run(self): 
\par     print "Waiting: Broadcasting cheese smell"
\par   def next(self, input):
\par     # Lazy initialization:
\par     if not self.transitions:
\par       self.transitions = \{ 
\par         MouseAction.appears : MouseTrap.luring 
\par       \}
\par     return StateT.next(self, input)
\par 
\par class Luring(StateT):
\par   def run(self):
\par     print "Luring: Presenting Cheese, door open"
\par   def next(self, input):
\par     # Lazy initialization:
\par     if not self.transitions:
\par       self.transitions = \{
\par         MouseAction.enters : MouseTrap.trapping,
\par         MouseAction.runsAway : MouseTrap.waiting
\par       \}
\par     return StateT.next(self, input)
\par 
\par class Trapping(StateT):
\par   def run(self):
\par     print "Trapping: Closing door"
\par   def next(self, input):
\par     # Lazy initialization:
\par     if not self.transitions:
\par       self.transitions = \{
\par         MouseAction.escapes : MouseTrap.waiting,
\par         MouseAction.trapped : MouseTrap.holding
\par       \}
\par     return StateT.next(self, input)
\par 
\par class Holding(StateT):
\par   def run(self):
\par     print "Holding: Mouse caught"
\par   def next(self, input):
\par     # Lazy initialization:
\par     if not self.transitions:
\par       self.transitions = \{
\par         MouseAction.removed : MouseTrap.waiting
\par       \}
\par     return StateT.next(self, input)
\par 
\par class MouseTrap(StateMachine):
\par   def __init__(self): 
\par     # Initial state
\par     StateMachine.__init__(self, MouseTrap.waiting)
\par 
\par # Static variable initialization:
\par MouseTrap.waiting = Waiting()
\par MouseTrap.luring = Luring()
\par MouseTrap.trapping = Trapping()
\par MouseTrap.holding = Holding()
\par 
\par moves = map(string.strip, 
\par   open("../mouse/MouseMoves.txt").readlines())
\par mouseMoves = map(MouseAction, moves)
\par MouseTrap().runAll(mouseMoves)
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {The rest of the code is identical \endash  the difference is in the }{\b 
next(\~)}{ methods and the }{\b StateT}{ class. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_158" \\o "A_158" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100350038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par If you have to create and maintain a lot of }{\b State}{ classes, this approach is an improvement, since it\rquote s easier to quickly read and understand the state transitions from looking at the table. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_159" \\o "A_159" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100350039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_110]#
\par #[BT_112]#
\par #[BT_116]#
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420087}
Table-Driven State Machine{\*\bkmkend _Toc534420087}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_114]#}{
The advantage of the previous design is that all the information about a state, including the state transition information, is located within the state class itself. This is generally a good design principle. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_160" \\o "A_160" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100360030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_115]#}{However, in a pure state machine, the machine can be completely represented 
by a single state-transition table. This has the advantage of locating all the information about the state machine in a single place, which means that you can more easily create and maintain the table based on a classic state-transition diagram. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_161" \\o "A_161" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100360031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par The classic state-transition diagram uses a circle to represent each state, and lines from the state pointing to all states that state can transition into. Each tr
ansition line is annotated with conditions for transition and an action during transition. Here\rquote s what it looks like: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_162" \\o "A_162" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100360032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_122]#}{(Simple State Machine Diagram) }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_163" \\o "A_163" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100360033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_123]#}{Goals:
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\sa180\sl240\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\ilvl1\adjustright\rin0\lin1080\itap0 {\v #[BT_124]#}{
Direct translation of state diagram }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_164" \\o "A_164" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100360034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Vector of change: the state diagram representation }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_165" \\o "A_165" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100360035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_125]#}{Reasonable implementation }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_166" \\o "A_166" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100360036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_126]#}{No excess of states (you could represent every single change with a new state) }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_167" \\o "A_167" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100360037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_127]#}{Simplicity and flexibility }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_168" \\o "A_168" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100360038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_128]#}{Observations:
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\sa180\sl240\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\ilvl1\adjustright\rin0\lin1080\itap0 {States are trivial \endash 
 no information or functions/data, just an identity }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_169" \\o "A_169" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100360039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\sa180\sl240\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls16\adjustright\rin0\lin1080\itap0 {\v #[BT_129]#}{
Not like the State pattern! }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_170" \\o "A_170" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100370030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_130]#}{The machine governs the move from state to state }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_171" \\
o "A_171" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100370031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_131]#}{Similar to flyweight }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_172" \\o "A_172" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100370032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_132]#}{Each state may move to many others }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_173" \\o "A_173" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100370033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_133]#}{Condition & action functions must also be external to states }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/
Books/TIPython/BackTalk/FindPage/A_174" \\o "A_174" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100370034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_134]#}{Centralize description in a single table containing all variations, for ease of configuration }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_175" \\o "A_175" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100370035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_135]#}{Example: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_176" \\o "A_176" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100370036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\sa180\sl240\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls17\adjustright\rin0\lin1080\itap0 {\v #[BT_136]#}{
State Machine & Table-Driven Code }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_177" \\o "A_177" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100370037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_137]#}{Implements a vending machine }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_178" \\o "A_178" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100370038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_138]#}{Uses several other patterns }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_179" \\o "A_179" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100370039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_139]#}{Separates common state-machine code from specific application (like template method) }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_180" \\o "A_180" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100380030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_140]#}{Each input causes a seek for appropriate solution (like chain of responsibility) }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_181" \\o "A_181" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100380031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\v\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{\v #[BT_141]#}{Tests and transitions are encapsulated in function objects (objects that hold functions) }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_182" \\o "A_182" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100380032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\listtext\pard\plain\f3\fs22\kerning18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Java constraint: methods are not first-class objects }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_183" \\o "A_183" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100380033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_142]#}{{\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}
{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLockAspectRatio}{\sv 1}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn pibName}{\sv VendingMachine}}{\sp{\sn pibFlags}{\sv 1}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fAllowOverlap}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}
\picscalex88\picscaley88\piccropl0\piccropr0\piccropt0\piccropb0\picw16447\pich12026\picwgoal9324\pichgoal6818\wmetafile8\bliptag-1312489658\blipupi200{\*\blipuid b1c4ff464946bafc5da2ff995e5b5aae}
0100090000030125000007001610000000001610000026060f002220574d4643010000000000010081f800000000020000000020000004110000043100000100
00007800000044000000020000000e0500008503000000000000000000003e400000fe2e000020454d4600000100043100005c010000040000000f0000005800
0000000000003f06000097080000cb0000001701000056004900530049004f000000440072006100770069006e0067000000000000000a000000100000000000
00000000000009000000100000000f050000b30300000d000000100000000000000000000000190000000c00000004206e01260000001c000000010000000000
0000010000000000000000000000250000000c00000001000000250000000c000000000000805600000068000000b501000002000000f40100003f0000001300
0000b5012100b7011600bd010c00c5010600cf010200da010200e4010600ed010c00f2011600f4012100f2012b00ed013500e4013c00da013f00cf013f00c501
3c00bd013500b7012b00b5012100120000000c00000001000000250000000c00000001000000250000000c000000050000805700000050000000c70100001300
0000e30100002e0000000d000000c7012100c9011a00ce011500d5011300dc011500e1011a00e3012100e1012800dc012d00d5012e00ce012d00c9012800c701
2100250000000c00000008000080280000000c00000001000000120000000c000000020000000d000000100000000000000000000000260000001c0000000100
000000000000010000000000000000000000250000000c00000001000000250000000c0000000000008056000000900000008a01000097000000200200002d01
00001d0000008a01e2008c01d2009101c2009a01b400a601a800b4019f00c4019900d5019700e5019900f5019f000302a8000f02b4001802c2001e02d2002002
e2001e02f300180203010f02110103021d01f5012601e5012b01d5012d01c4012b01b4012601a6011d019a011101910103018c01f3008a01e200250000000c00
000008000080280000000c00000001000000120000000c00000001000000160000000c00000018000000250000000c00000005000080520000004c0100000100
0000eaffffff0a000000000000000000000090010000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101
0000250000000c000000010000005400000088000000a6010000e900000003020000010100000100000080204b4180204b41a6010000e90000000a0000004c00
000000000000000000000000000000000000000000006000000043006f006c006c0065006300740069006e006700100000000d00000004000000040000000c00
00000b00000006000000050000000b0000000c000000120000000c000000020000000d000000100000000000000000000000260000001c000000020000000000
0000010000000000000000000000250000000c00000002000000250000000c000000000000805600000090000000b0030000dc01000046040000720200001d00
0000b0032702b2031702b7030702c003f901cc03ed01da03e401ea03de01fb03dc010b04de011b04e4012904ed013504f9013e04070244041702460427024404
38023e04480235045602290462021b046b020b047002fb037202ea037002da036b02cc036202c0035602b7034802b2033802b0032702250000000c0000000800
0080280000000c00000002000000120000000c00000001000000250000000c00000005000080250000000c000000010000005400000090000000c30300002e02
000031040000460200000100000080204b4180204b41c30300002e0200000b0000004c0000000000000000000000000000000000000000000000640000005500
6e0061007600610069006c00610062006c0065000000100000000b0000000c0000000b0000000c00000005000000040000000c0000000c000000040000000c00
0000120000000c000000020000000d000000100000000000000000000000260000001c0000000200000000000000010000000000000000000000250000000c00
000002000000250000000c0000000000008056000000900000008a010000dc01000020020000720200001d0000008a0127028c011702910107029a01f901a601
ed01b401e401c401de01d501dc01e501de01f501e4010302ed010f02f901180207021e021702200227021e023802180248020f02560203026202f5016b02e501
7002d5017202c4017002b4016b02a60162029a015602910148028c0138028a012702250000000c00000008000080280000000c00000002000000120000000c00
000001000000250000000c00000005000080250000000c000000010000005400000084000000a90100002e02000000020000460200000100000080204b418020
4b41a90100002e020000090000004c000000000000000000000000000000000000000000000060000000530065006c0065006300740069006e00670000000f00
00000c000000040000000c0000000b00000006000000050000000b0000000c000000120000000c000000020000000d0000001000000000000000000000002600
00001c0000000200000000000000010000000000000000000000250000000c00000002000000250000000c0000000000008056000000900000008a010000ef02
000020020000850300001d0000008a013a038c012a0391011a039a010c03a6010003b401f702c401f102d501ef02e501f102f501f702030200030f020c031802
1a031e022a0320023a031e024b0318025b030f02690303027503f5017e03e5018303d5018503c4018303b4017e03a60175039a01690391015b038c014b038a01
3a03250000000c00000008000080280000000c00000002000000120000000c00000001000000250000000c00000005000080250000000c000000010000005400
00006c000000b501000041030000f3010000590300000100000080204b4180204b41b501000041030000050000004c0000000000000000000000000000000000
000000000000580000004d006f00720065003f000000130000000d000000070000000c0000000c000000260000001c0000000200000000000000010000000000
000000000000250000000c00000002000000250000000c00000005000080570000005400000016020000f00000005f020000e90100000e0000001e02f0003002
ff0040020f014c022201560237015c024d015f0264015e027b015a0291015202a6014702ba013902cc012802dc011602e901250000000c000000080000802800
00000c00000002000000120000000c000000020000000d000000100000000000000000000000250000000c00000008000080250000000c000000040000805600
00002c00000006020000df0100001c020000f1010000040000001c02f1010602f1011302df011c02f101120000000c00000001000000250000000c0000000500
0080250000000c0000000100000054000000dc000000dc01000065010000aa0200007d0100000100000080204b4180204b41dc01000065010000180000004c00
000000000000000000000000000000000000000000007c0000002a0031007300740020006400690067006900740020006f0066002000730065006c0065006300
740069006f006e002f00090000000c0000000b00000006000000060000000c000000050000000c0000000500000006000000060000000d000000070000000600
00000b0000000c000000040000000c0000000b00000006000000050000000d0000000b0000000600000054000000880000004702000080010000aa0200009801
00000100000080204b4180204b4147020000800100000a0000004c000000000000000000000000000000000000000000000060000000530068006f0077002000
640069006700690074000f0000000b0000000d0000000f000000060000000c000000050000000c0000000500000006000000260000001c000000020000000000
0000010000000000000000000000250000000c00000002000000250000000c000000050000805700000024000000d501000040000000d5010000860000000200
0000d5014000d5018600250000000c00000008000080280000000c00000002000000120000000c000000020000000d0000001000000000000000000000002500
00000c00000008000080250000000c00000004000080560000002c000000cb01000084000000de0100009700000004000000de018400d5019700cb018400de01
8400120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000940000008e0100007b0000001a020000930000000100
000080204b4180204b418e0100007b0000000c0000004c0000000000000000000000000000000000000000000000640000004d006f006e006500790020004100
64006400650064002f00130000000d0000000b0000000c0000000b000000060000000f0000000c0000000c0000000c0000000c00000006000000540000008800
00009e010000950000000a020000ad0000000100000080204b4180204b419e010000950000000a0000004c000000000000000000000000000000000000000000
000060000000530068006f007700200054006f00740061006c000f0000000b0000000d0000000f000000060000000e0000000d000000060000000c0000000400
0000260000001c0000000200000000000000010000000000000000000000250000000c00000002000000250000000c0000000500008057000000440000002802
000049020000b8030000720200000a000000b80349028d0359026103650234036d0207037102d9027202ac026f027f02680253025d0228024f02250000000c00
000008000080280000000c00000002000000120000000c000000020000000d000000100000000000000000000000250000000c00000008000080250000000c00
000004000080560000002c00000018020000470200002d020000590200000400000026025902180249022d02470226025902120000000c000000010000002500
00000c00000005000080250000000c000000010000005400000054000000e302000054020000eb0200006c0200000100000080204b4180204b41e30200005402
0000010000004c0000000000000000000000000000000000000000000000500000002a00000009000000260000001c0000000200000000000000010000000000
000000000000250000000c00000002000000250000000c00000005000080570000007c000000150200006a000000a1020000f6000000180000001502b4001602
a4001b029400230286002f027a003d0271004c026b005d026a006d026c007d0272008a027c00950288009d029700a102a700a102b8009d02c8009502d7008b02
e3007d02ed006e02f4005e02f6004d02f5003d02f0002f02e700250000000c00000008000080280000000c00000002000000120000000c000000020000000d00
0000100000000000000000000000250000000c00000008000080250000000c00000004000080560000002c00000023020000db00000038020000ef0000000400
00002a02ef002302db003802e2002a02ef00120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000940000003302
0000ad000000bf020000c50000000100000080204b4180204b4133020000ad0000000c0000004c00000000000000000000000000000000000000000000006400
00004d006f006e00650079002000410064006400650064002f00130000000d0000000b0000000c0000000b000000060000000f0000000c0000000c0000000c00
00000c00000006000000540000008800000053020000c7000000bf020000df0000000100000080204b4180204b4153020000c70000000a0000004c0000000000
00000000000000000000000000000000000060000000530068006f007700200054006f00740061006c000f0000000b0000000d0000000f000000060000000e00
00000d000000060000000c00000004000000260000001c0000000200000000000000010000000000000000000000250000000c00000002000000250000000c00
000005000080570000004400000018020000dd010000a8030000060200000a000000180206024302f6016e02ea019b02e201c802dd01f602dd012303e0015003
e7017d03f101a8030002250000000c00000008000080280000000c00000002000000120000000c000000020000000d0000001000000000000000000000002500
00000c00000008000080250000000c00000004000080560000002c000000a2030000f6010000b80300000802000004000000a903f601b8030602a2030802a903
f601120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000e800000070020000fb0100005e030000130200000100
000080204b4180204b4170020000fb0100001a0000004c00000000000000000000000000000000000000000000008000000032006e0064002000640069006700
690074002000260020004e006f007400200061007600610069006c00610062006c0065002f000c0000000b0000000c000000060000000c000000050000000c00
00000500000006000000060000000f00000006000000100000000d00000006000000060000000c0000000b0000000c00000005000000040000000c0000000c00
0000040000000c0000000600000054000000dc00000071020000160200005e0300002e0200000100000080204b4180204b417102000016020000180000004c00
000000000000000000000000000000000000000000007c0000004d006500730073006100670065002c00200063006c006500610072002000730065006c006500
6300740069006f006e00130000000c0000000b0000000b0000000c0000000c0000000c00000006000000060000000b000000040000000c0000000c0000000700
0000060000000b0000000c000000040000000c0000000b00000006000000050000000d0000000b000000120000000c000000020000000d000000100000000000
000000000000260000001c0000000200000000000000020000000000000000000000250000000c00000002000000250000000c00000004000080560000006000
0000440000000d0200007800000041020000110000004500270247001e024c001602540010025e000e02670010026f00160275001e0277002702750031026f00
390267003e025e00400254003e024c0039024700310245002702250000000c00000008000080280000000c00000002000000250000000c000000050000800d00
0000100000000000000000000000260000001c0000000200000000000000020000000000000000000000250000000c00000002000000250000000c0000000000
008056000000580000004b00000015020000710000003a0200000f0000004c0027024e002002530019025a00160262001602690019026e002002700027026e00
2f0269003502620039025a003902530035024e002f024c002702250000000c00000008000080280000000c00000002000000120000000c000000010000002600
00001c0000000200000000000000010000000000000000000000250000000c00000002000000250000000c000000050000805700000024000000880000002702
00008a01000027020000020000008a01270288002702250000000c00000008000080280000000c00000002000000120000000c000000020000000d0000001000
00000000000000000000250000000c00000008000080250000000c00000004000080560000002c000000770000001e0200008a00000031020000040000008a00
1e02770027028a0031028a001e02120000000c00000001000000250000000c00000005000080250000000c00000001000000540000006c000000030100002102
00002f010000390200000100000080204b4180204b410301000021020000050000004c0000000000000000000000000000000000000000000000580000005100
7500690074002f000000110000000b000000050000000600000006000000540000009c000000d20000003b02000060010000530200000100000080204b418020
4b41d20000003b0200000d0000004c000000000000000000000000000000000000000000000068000000520065007400750072006e0020004300680061006e00
670065000000100000000c000000060000000b000000070000000b00000006000000100000000b0000000c0000000b0000000c0000000c000000260000001c00
00000200000000000000010000000000000000000000250000000c00000002000000250000000c0000000500008057000000580000005b000000510200008f01
0000550300000f0000008f0155036f0155034f01520330014c0312014203f5003403da002403c1001103a900fb029500e3028300c9027400ac0268008f026000
70025b005102250000000c00000008000080280000000c00000002000000120000000c000000020000000d000000100000000000000000000000250000000c00
000008000080250000000c00000004000080560000002c0000005200000040020000650000005402000004000000520054025a00400265005302520054021200
00000c00000001000000250000000c00000005000080250000000c00000001000000540000006c000000d6000000e702000002010000ff020000010000008020
4b4180204b41d6000000e7020000050000004c00000000000000000000000000000000000000000000005800000051007500690074002f000000110000000b00
0000050000000600000006000000540000009c000000a50000000103000033010000190300000100000080204b4180204b41a5000000010300000d0000004c00
0000000000000000000000000000000000000000000068000000520065007400750072006e0020004300680061006e00670065000000100000000c0000000600
00000b000000070000000b00000006000000100000000b0000000c0000000b0000000c0000000c000000260000001c0000000200000000000000010000000000
000000000000250000000c00000002000000250000000c0000000500008057000000580000005e000000cc0000008d010000fd0100000f0000008d01cc006c01
d0004b01d7002b01e2000c01ef00ef000001d4001401bb002b01a500440191005f0180007c0173009b016900bb016200dc015e00fd01250000000c0000000800
0080280000000c00000002000000120000000c000000020000000d000000100000000000000000000000250000000c00000008000080250000000c0000000400
0080560000002c00000055000000fb010000680000000e020000040000005500fb015e000e026800fb015500fb01120000000c00000001000000250000000c00
000005000080520000004c01000002000000eaffffff00000000f5f4fffff5f4ffff90010000000000000000002041007200690061006c000000709501008082
4800ccfaaa4553b9f7bf0000420068b9f7bfac6d738124004d5f84824800709501004c00420000004200240000000000480098faaa454c00420038feaa4514fe
fbbf581ef37f0500000000000000181ef37fce1cf37f0000f37f030000000000000001000000030000003cc77581ac02415f84824800fdff405f120000000000
00000000000008004d5f24004d5fb6b9f7bfe041728108004d5f8eff405f24004d5f0300000000000000d581405f0000000000000000e213f7bf70fbaa452cf1
708190f6f98180a15fc170fbaa45fea0f7bf17b3f7bf0040f98100000000b719ca8b670100000040f88188f6f981000000000000000000000000000000000000
00000000000001010101010101010101e800250000000c00000002000000540000006c000000df000000520100000b0100006a0100000100000080204b418020
4b41df00000052010000050000004c00000000000000000000000000000000000000000000005800000051007500690074002f00e23a110000000b0000000500
00000600000006000000540000009c000000ee000000880100007c010000a00100000100000080204b4180204b41ee000000880100000d0000004c0000000000
00000000000000000000000000000000000068000000520065007400750072006e0020004300680061006e00670065007281100000000c000000060000000b00
0000070000000b00000006000000100000000b0000000c0000000b0000000c0000000c000000120000000c000000020000000d00000010000000000000000000
0000260000001c0000000300000000000000020000000000000000000000250000000c00000003000000250000000c000000040000805600000060000000ed03
000007030000210400003b03000011000000ee032103f0031803f6031003fe030a030704080311040a03190410031e041803200421031e042b03190433031104
380307043a03fe033803f6033303f0032b03ee032103250000000c00000008000080280000000c00000003000000250000000c000000050000800d0000001000
00000000000000000000260000001c0000000300000000000000020000000000000000000000250000000c00000003000000250000000c000000000000805600
000058000000f40300000f0300001a040000340300000f000000f5032103f7031a03fc031303030410030b0410031204130317041a0319042103170429031204
2f030b04330303043303fc032f03f7032903f5032103250000000c00000008000080280000000c00000003000000120000000c00000001000000260000001c00
00000300000000000000010000000000000000000000250000000c00000003000000250000000c00000005000080570000002800000006040000710200009808
000026060f002611574d46430100000000000100000000000000020000000411000000000000043100000a040000f802000003000000060471020904b4020a04
f802250000000c00000008000080280000000c00000003000000120000000c000000020000000d000000100000000000000000000000250000000c0000000800
0080250000000c00000004000080560000002c00000000040000f50200001304000008030000040000001304f502090408030004f5021304f502120000000c00
000001000000250000000c00000005000080250000000c00000001000000540000006c000000ef0300009d0200001b040000b50200000100000080204b418020
4b41ef0300009d020000050000004c00000000000000000000000000000000000000000000005800000051007500690074002f000000110000000b0000000500
00000600000006000000540000009c000000be030000b80200004c040000d00200000100000080204b4180204b41be030000b80200000d0000004c0000000000
00000000000000000000000000000000000068000000520065007400750072006e0020004300680061006e00670065000000100000000c000000060000000b00
0000070000000b00000006000000100000000b0000000c0000000b0000000c0000000c000000260000001c000000030000000000000001000000000000000000
0000250000000c00000003000000250000000c00000005000080570000004c0000001b0200004202000052020000140300000c0000001b0242022b0251023902
6202440274024c02880250029e025202b3025002c9024a02de024202f2023602040327021403250000000c00000008000080280000000c000000030000001200
00000c000000020000000d000000100000000000000000000000250000000c00000008000080250000000c00000004000080560000002c0000001b0200000b03
0000300200001f0300000400000030021a031b021f0323020b0330021a03120000000c00000001000000250000000c00000005000080250000000c0000000100
000054000000d0000000d5010000aa0200009d020000c20200000100000080204b4180204b41d5010000aa020000160000004c00000000000000000000000000
000000000000000000007800000032006e00640020006400690067006900740020002600200041007600610069006c00610062006c0065002f000c0000000b00
00000c000000060000000c000000050000000c0000000500000006000000060000000f000000060000000f0000000b0000000c00000005000000040000000c00
00000c000000040000000c00000006000000540000007c00000044020000c50200009d020000dd0200000100000080204b4180204b4144020000c50200000800
00004c00000000000000000000000000000000000000000000005c000000440069007300700065006e007300650010000000050000000b0000000c0000000c00
00000b0000000b0000000c000000260000001c0000000300000000000000010000000000000000000000250000000c00000003000000250000000c0000000500
0080570000004c000000580100004d0200008f0100001f0300000c0000008f011f037f011103710100036601ed025e01d9025901c4025801ae025a0199025f01
84026801700274015e0282014d02250000000c00000008000080280000000c00000003000000120000000c000000020000000d00000010000000000000000000
0000250000000c00000008000080250000000c00000004000080560000002c0000007a010000420200008f01000056020000040000007a0148028f0142028601
56027a014802120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000880000000b010000b802000049010000d002
00000100000080204b4180204b410b010000b80200000a0000004c00000000000000000000000000000000000000000000006000000020002000200020002000
20002000200020002a0006000000060000000600000006000000060000000600000006000000060000000600000009000000260000001c000000030000000000
0000010000000000000000000000250000000c00000003000000250000000c0000000500008057000000540000003f010000030100008d010000100200000e00
00008d011002790102026801f1015901de014d01c8014501b101400199013f018101410169014701510151013b015d0126016d0113017f010301250000000c00
000008000080280000000c00000003000000120000000c000000020000000d000000100000000000000000000000250000000c00000008000080250000000c00
000004000080560000002c00000078010000f90000008d0100000c010000040000007801fc008d01f90083010c017801fc00120000000c000000010000002500
00000c00000005000080250000000c0000000100000054000000d8000000ff0000007e010000da010000960100000100000080204b4180204b41ff0000007e01
0000170000004c00000000000000000000000000000000000000000000007c00000032006e0064002000640069006700690074002000260020006e006f007400
200065006e006f007500670068002f0000000c0000000b0000000c000000060000000c000000050000000c0000000500000006000000060000000f0000000600
00000b0000000d00000006000000060000000c0000000b0000000d0000000b0000000c0000000b0000000600000054000000dc000000ff00000099010000eb01
0000b10100000100000080204b4180204b41ff00000099010000180000004c00000000000000000000000000000000000000000000007c0000006d0065007300
73006100670065002c00200063006c006500610072002000730065006c0065006300740069006f006e00120000000c0000000b0000000b0000000c0000000c00
00000c00000006000000060000000b000000040000000c0000000c00000007000000060000000b0000000c000000040000000c0000000b000000060000000500
00000d0000000b000000120000000c000000020000000d000000100000000000000000000000260000001c000000030000000000000001000000000000000000
0000250000000c00000003000000250000000c0000000000008056000000900000001a03000097000000b00300002d0100001d0000001a03e2001c03d2002103
c2002a03b4003603a80044039f0054039900650397007503990085039f009303a8009f03b400a803c200ae03d200b003e200ae03f300a80303019f0311019303
1d018503260175032b0165032d0154032b014403260136031d012a031101210303011c03f3001a03e200250000000c00000008000080280000000c0000000300
0000120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000840000002e030000e90000009a030000010100000100
000080204b4180204b412e030000e9000000090000004c0000000000000000000000000000000000000000000000600000004e006f0020004300680061006e00
670065000000100000000d00000006000000100000000b0000000c0000000b0000000c0000000c000000120000000c000000020000000d000000100000000000
000000000000260000001c0000000300000000000000010000000000000000000000250000000c00000003000000250000000c00000000000080560000009000
000078040000970000000e0500002d0100001d0000007804e2007a04d2007f04c2008804b4009404a800a2049f00b2049900c3049700d3049900e3049f00f104
a800fd04b4000605c2000c05d2000e05e2000c05f30006050301fd041101f1041d01e3042601d3042b01c3042d01b2042b01a204260194041d01880411017f04
03017a04f3007804e200250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c00000005000080250000000c00
000001000000540000006c000000a3040000dc000000e2040000f40000000100000080204b4180204b41a3040000dc000000050000004c000000000000000000
0000000000000000000000000000580000004d0061006b00650073000000130000000c0000000a0000000c0000000b00000054000000700000009e040000f600
0000e70400000e0100000100000080204b4180204b419e040000f6000000060000004c0000000000000000000000000000000000000000000000580000004300
680061006e0067006500100000000b0000000c0000000b0000000c0000000c000000260000001c00000003000000000000000100000000000000000000002500
00000c00000003000000250000000c000000050000805700000054000000800300004c0000009e0400009c0000000e00000080039c008f038800a2037600b603
6700cd035b00e5035300fe034e0018044c0032044f004b04550062045f0078046c008c047c009e048f00250000000c00000008000080280000000c0000000300
0000120000000c000000020000000d000000100000000000000000000000250000000c00000008000080250000000c00000004000080560000002c0000009504
000087000000a80400009c00000004000000a4048700a8049c0095049200a4048700120000000c00000001000000250000000c00000005000080250000000c00
00000100000054000000a0000000c40300009100000062040000a90000000100000080204b4180204b41c4030000910000000e0000004c000000000000000000
00000000000000000000000000006800000045006e006f0075006700680020004300680061006e00670065002f000f0000000b0000000d0000000b0000000c00
00000b00000006000000100000000b0000000c0000000b0000000c0000000c000000060000005400000090000000d5030000ab00000052040000c30000000100
000080204b4180204b41d5030000ab0000000b0000004c0000000000000000000000000000000000000000000000640000004d00650073007300610067006500
20004f00660066000000130000000c0000000b0000000b0000000c0000000c0000000c00000006000000110000000700000007000000260000001c0000000300
000000000000010000000000000000000000250000000c00000003000000250000000c0000000500008057000000540000008a03000028010000a80400007801
00000e000000a804280198043d0186044f0171045e015a046a0142047201290477010f047801f6037601dd037001c5036601af0359019b0349018a0336012500
00000c00000008000080280000000c00000003000000120000000c000000020000000d000000100000000000000000000000250000000c000000080000802500
00000c00000004000080560000002c0000008003000028010000930300003e0100000400000083033e01800328019303320183033e01120000000c0000000100
0000250000000c00000005000080250000000c0000000100000054000000b8000000b003000027010000770400003f0100000100000080204b4180204b41b003
000027010000120000004c0000000000000000000000000000000000000000000000700000004e006f007400200045006e006f00750067006800200043006800
61006e00670065002f00100000000d00000006000000060000000f0000000b0000000d0000000b0000000c0000000b00000006000000100000000b0000000c00
00000b0000000c0000000c000000060000005400000088000000d60300004101000050040000590100000100000080204b4180204b41d6030000410100000a00
00004c0000000000000000000000000000000000000000000000600000004d0065007300730061006700650020004f006e00130000000c0000000b0000000b00
00000c0000000c0000000c00000006000000110000000b0000000e000000140000000000000010000000140000000400000003010800050000000b0200000000
050000000c02b4030f0505000000010204206e0108000000fa0200000100000000000000040000002d01000007000000fc020000ffffff000000040000002d01
01002a00000024031300b5012100b7011600bd010c00c5010600cf010200da010200e4010600ed010c00f2011600f4012100f2012b00ed013500e4013c00da01
3f00cf013f00c5013c00bd013500b7012b00b50121000400000002010100040000002d01000007000000fc020100000000000000040000002d0102001e000000
25030d00c7012100c9011a00ce011500d5011300dc011500e1011a00e3012100e1012800dc012d00d5012e00ce012d00c9012800c701210008000000fa020500
00000000ffffff00040000002d01030004000000f0010000040000000201020008000000fa0200000100000000000000040000002d010000040000002d010100
3e00000024031d008a01e2008c01d2009101c2009a01b400a601a800b4019f00c4019900d5019700e5019900f5019f000302a8000f02b4001802c2001e02d200
2002e2001e02f300180203010f02110103021d01f5012601e5012b01d5012d01c4012b01b4012601a6011d019a011101910103018c01f3008a01e20004000000
2d01030004000000f00100000400000002010100040000002e011800040000002d0102001c000000fb0216000a00000000009001000000000000002041726961
6c000000000000000000000000000000000000000000000000000000040000002d01000016000000320ae900a6010a000000436f6c6c656374696e6710000d00
040004000c000b00060005000b000c00040000000201020008000000fa0200000100000000000000040000002d010400040000002d0101003e00000024031d00
b0032702b2031702b7030702c003f901cc03ed01da03e401ea03de01fb03dc010b04de011b04e4012904ed013504f9013e040702440417024604270244043802
3e04480235045602290462021b046b020b047002fb037202ea037002da036b02cc036202c0035602b7034802b2033802b0032702040000002d01030004000000
f00104000400000002010100040000002d010200040000002d01000018000000320a2e02c3030b000000556e617661696c61626c650010000b000c000b000c00
050004000c000c0004000c00040000000201020008000000fa0200000100000000000000040000002d010400040000002d0101003e00000024031d008a012702
8c011702910107029a01f901a601ed01b401e401c401de01d501dc01e501de01f501e4010302ed010f02f901180207021e021702200227021e02380218024802
0f02560203026202f5016b02e5017002d5017202c4017002b4016b02a60162029a015602910148028c0138028a012702040000002d01030004000000f0010400
0400000002010100040000002d010200040000002d01000015000000320a2e02a9010900000053656c656374696e67810f000c0004000c000b00060005000b00
0c00040000000201020008000000fa0200000100000000000000040000002d010400040000002d0101003e00000024031d008a013a038c012a0391011a039a01
0c03a6010003b401f702c401f102d501ef02e501f102f501f702030200030f020c0318021a031e022a0320023a031e024b0318025b030f02690303027503f501
7e03e5018303d5018503c4018303b4017e03a60175039a01690391015b038c014b038a013a03040000002d01030004000000f001040004000000020101000400
00002d010200040000002d0100000f000000320a4103b501050000004d6f72653f0013000d0007000c000c0008000000fa020000010000000000000004000000
2d010400040000002d0102002000000025030e001e02f0003002ff0040020f014c022201560237015c024d015f0264015e027b015a0291015202a6014702ba01
3902cc012802dc011602e901040000002d01030004000000f00104000400000002010200040000002d01030007000000fc020000000000000000040000002d01
04000c000000240304001c02f1010602f1011302df011c02f1010400000002010100040000002d010200040000002d0100002b000000320a6501dc0118000000
2a317374206469676974206f662073656c656374696f6e2f09000c000b00060006000c0005000c000500060006000d00070006000b000c0004000c000b000600
05000d000b00060016000000320a800147020a00000053686f772064696769740f000b000d000f0006000c0005000c000500060008000000fa02000001000000
00000000040000002d010500040000002d0102000800000025030200d5014000d5018600040000002d01030004000000f0010500040000000201020004000000
2d010300040000002d0104000c00000024030400de018400d5019700cb018400de0184000400000002010100040000002d010200040000002d01000019000000
320a7b008e010c0000004d6f6e65792041646465642f13000d000b000c000b0006000f000c000c000c000c00060016000000320a95009e010a00000053686f77
20546f74616c0f000b000d000f0006000e000d0006000c00040008000000fa0200000100000000000000040000002d010500040000002d010200180000002503
0a00b80349028d0359026103650234036d0207037102d9027202ac026f027f02680253025d0228024f02040000002d01030004000000f0010500040000000201
0200040000002d010300040000002d0104000c0000002403040026025902180249022d024702260259020400000002010100040000002d010200040000002d01
000009000000320a5402e302010000002a76090008000000fa0200000100000000000000040000002d010500040000002d01020034000000250318001502b400
1602a4001b029400230286002f027a003d0271004c026b005d026a006d026c007d0272008a027c00950288009d029700a102a700a102b8009d02c8009502d700
8b02e3007d02ed006e02f4005e02f6004d02f5003d02f0002f02e700040000002d01030004000000f00105000400000002010200040000002d01030004000000
2d0104000c000000240304002a02ef002302db003802e2002a02ef000400000002010100040000002d010200040000002d01000019000000320aad0033020c00
00004d6f6e65792041646465642f13000d000b000c000b0006000f000c000c000c000c00060016000000320ac70053020a00000053686f7720546f74616c0f00
0b000d000f0006000e000d0006000c00040008000000fa0200000100000000000000040000002d010500040000002d0102001800000025030a00180206024302
f6016e02ea019b02e201c802dd01f602dd012303e0015003e7017d03f101a8030002040000002d01030004000000f00105000400000002010200040000002d01
0300040000002d0104000c00000024030400a903f601b8030602a2030802a903f6010400000002010100040000002d010200040000002d0100002e000000320a
fb0170021a000000326e642064696769742026204e6f7420617661696c61626c652f0c000b000c0006000c0005000c000500060006000f00060010000d000600
06000c000b000c00050004000c000c0004000c0006002b000000320a16027102180000004d6573736167652c20636c6561722073656c656374696f6e13000c00
0b000b000c000c000c00060006000b0004000c000c00070006000b000c0004000c000b00060005000d000b00040000000201020008000000fa02000002000000
00000000040000002d010500040000002d01040026000000240311004500270247001e024c001602540010025e000e02670010026f00160275001e0277002702
750031026f00390267003e025e00400254003e024c0039024700310245002702040000002d01030004000000f0010500040000002d01020008000000fa020000
0200000000000000040000002d010500040000002d0101002200000024030f004c0027024e002002530019025a00160262001602690019026e00200270002702
6e002f0269003502620039025a003902530035024e002f024c002702040000002d01030004000000f0010500040000000201010008000000fa02000001000000
00000000040000002d010500040000002d01020008000000250302008a01270288002702040000002d01030004000000f0010500040000000201020004000000
2d010300040000002d0104000c000000240304008a001e02770027028a0031028a001e020400000002010100040000002d010200040000002d0100000f000000
320a2102030105000000517569742f0011000b000500060006001b000000320a3b02d2000d00000052657475726e204368616e67657e10000c0006000b000700
0b00060010000b000c000b000c000c0008000000fa0200000100000000000000040000002d010500040000002d0102002200000025030f008f0155036f015503
4f01520330014c0312014203f5003403da002403c1001103a900fb029500e3028300c9027400ac0268008f02600070025b005102040000002d01030004000000
f00105000400000002010200040000002d010300040000002d0104000c00000024030400520054025a0040026500530252005402040000000201010004000000
2d010200040000002d0100000f000000320ae702d60005000000517569742f0011000b000500060006001b000000320a0103a5000d00000052657475726e2043
68616e67657e10000c0006000b0007000b00060010000b000c000b000c000c0008000000fa0200000100000000000000040000002d010500040000002d010200
2200000025030f008d01cc006c01d0004b01d7002b01e2000c01ef00ef000001d4001401bb002b01a500440191005f0180007c0173009b016900bb016200dc01
5e00fd01040000002d01030004000000f00105000400000002010200040000002d010300040000002d0104000c000000240304005500fb015e000e026800fb01
5500fb010400000002010100040000002d0102001c000000fb0216000000f5f4f5f490010000000000000020417269616c003f013f483f3f3f3f00423f3f3f3f
243f3f483f014c4200422400040000002d0105000f000000320a5201df0005000000517569742f0011000b000500060006001b000000320a8801ee000d000000
52657475726e204368616e67657e10000c0006000b0007000b00060010000b000c000b000c000c00040000000201020008000000fa0200000200000000000000
040000002d010600040000002d0104002600000024031100ee032103f0031803f6031003fe030a030704080311040a03190410031e041803200421031e042b03
190433031104380307043a03fe033803f6033303f0032b03ee032103040000002d01030004000000f0010600040000002d01020008000000fa02000002000000
00000000040000002d010600040000002d0101002200000024030f00f5032103f7031a03fc031303030410030b0410031204130317041a031904210317042903
12042f030b04330303043303fc032f03f7032903f5032103040000002d01030004000000f0010600040000000201010008000000fa0200000100000000000000
040000002d010600040000002d0102000a00000025030300060471020904b4020a04f802040000002d01030004000000f0010600040000000201020004000000
2d010300040000002d0104000c000000240304001304f502090408030004f5021304f5020400000002010100040000002d010200040000002d0100000f000000
320a9d02ef0305000000517569742f0011000b000500060006001b000000320ab802be030d00000052657475726e204368616e67657e10000c0006000b000700
0b00060010000b000c000b000c000c0008000000fa0200000100000000000000040000002d010600040000002d0102001c00000025030c001b0242022b025102
39026202440274024c02880250029e025202b3025002c9024a02de024202f2023602040327021403040000002d01030004000000f00106000400000002010200
040000002d010300040000002d0104000c0000002403040030021a031b021f0323020b0330021a030400000002010100040000002d010200040000002d010000
28000000320aaa02d50116000000326e64206469676974202620417661696c61626c652f0c000b000c0006000c0005000c000500060006000f0006000f000b00
0c00050004000c000c0004000c00060013000000320ac50244020800000044697370656e7365100005000b000c000c000b000b000c0008000000fa0200000100
000000000000040000002d010600040000002d0102001c00000025030c008f011f037f011103710100036601ed025e01d9025901c4025801ae025a0199025f01
84026801700274015e0282014d02040000002d01030004000000f00106000400000002010200040000002d010300040000002d0104000c000000240304007a01
48028f014202860156027a0148020400000002010100040000002d010200040000002d01000016000000320ab8020b010a0000002020202020202020202a0600
06000600060006000600060006000600090008000000fa0200000100000000000000040000002d010600040000002d0102002000000025030e008d0110027901
02026801f1015901de014d01c8014501b101400199013f018101410169014701510151013b015d0126016d0113017f010301040000002d01030004000000f001
06000400000002010200040000002d010300040000002d0104000c000000240304007801fc008d01f90083010c017801fc000400000002010100040000002d01
0200040000002d0100002a000000320a7e01ff0017000000326e642064696769742026206e6f7420656e6f7567682f000c000b000c0006000c0005000c000500
060006000f0006000b000d00060006000c000b000d000b000c000b0006002b000000320a9901ff00180000006d6573736167652c20636c6561722073656c6563
74696f6e12000c000b000b000c000c000c00060006000b0004000c000c00070006000b000c0004000c000b00060005000d000b00040000000201020008000000
fa0200000100000000000000040000002d010600040000002d0101003e00000024031d001a03e2001c03d2002103c2002a03b4003603a80044039f0054039900
650397007503990085039f009303a8009f03b400a803c200ae03d200b003e200ae03f300a80303019f03110193031d018503260175032b0165032d0154032b01
4403260136031d012a031101210303011c03f3001a03e200040000002d01030004000000f00106000400000002010100040000002d010200040000002d010000
15000000320ae9002e03090000004e6f204368616e67658110000d00060010000b000c000b000c000c00040000000201020008000000fa020000010000000000
0000040000002d010600040000002d0101003e00000024031d007804e2007a04d2007f04c2008804b4009404a800a2049f00b2049900c3049700d3049900e304
9f00f104a800fd04b4000605c2000c05d2000e05e2000c05f30006050301fd041101f1041d01e3042601d3042b01c3042d01b2042b01a204260194041d018804
11017f0403017a04f3007804e200040000002d01030004000000f00106000400000002010100040000002d010200040000002d0100000f000000320adc00a304
050000004d616b65730013000c000a000c000b0010000000320af6009e04060000004368616e676510000b000c000b000c000c0008000000fa02000001000000
00000000040000002d010600040000002d0102002000000025030e0080039c008f038800a2037600b6036700cd035b00e5035300fe034e0018044c0032044f00
4b04550062045f0078046c008c047c009e048f00040000002d01030004000000f00106000400000002010200040000002d010300040000002d0104000c000000
24030400a4048700a8049c0095049200a40487000400000002010100040000002d010200040000002d0100001c000000320a9100c4030e000000456e6f756768
204368616e67652f0f000b000d000b000c000b00060010000b000c000b000c000c00060018000000320aab00d5030b0000004d657373616765204f6666001300
0c000b000b000c000c000c00060011000700070008000000fa0200000100000000000000040000002d010600040000002d0102002000000025030e00a8042801
98043d0186044f0171045e015a046a0142047201290477010f047801f6037601dd037001c5036601af0359019b0349018a033601040000002d01030004000000
f00106000400000002010200040000002d010300040000002d0104000c0000002403040083033e01800328019303320183033e01040000000201010004000000
2d010200040000002d01000022000000320a2701b003120000004e6f7420456e6f756768204368616e67652f10000d00060006000f000b000d000b000c000b00
060010000b000c000b000c000c00060016000000320a4101d6030a0000004d657373616765204f6e13000c000b000b000c000c000c00060011000b00030000000000}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420088}
The State class{\*\bkmkend _Toc534420088}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {The }{\b State}{
 class is distinctly different from before, since it is really just a placeholder with a name. Thus it is not inherited from previous }{\b State}{ classes: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindvie
w.net/Books/TIPython/BackTalk/FindPage/A_184" \\o "A_184" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100380034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c04:statemachine2:State.py
\par 
\par class State:
\par   def __init__(self, name): self.name = name
\par   def __str__(self): return self.name 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_145]#
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420089}
Conditions for transition{\*\bkmkend _Toc534420089}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {In the state tr
ansition diagram, an input is tested to see if it meets the condition necessary to transfer to the state under question. As before, the }{\b Input}{ is just a tagging interface: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_185" \\o "A_185" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100380035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c04:statemachine2:Input.py
\par # Inputs to a state machine
\par 
\par class Input: pass
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {The }{\b Condition}{ evaluates the }{\b Input}{
 to decide whether this row in the table is the correct transition: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_186" \\o "A_186" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100380036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c04:statemachine2:Condition.py
\par # Condition function object for state machine
\par 
\par class Condition:
\par   boolean condition(input) : 
\par     assert 1, "condition() not implemented"
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_146]#
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420090}
Transition actions{\*\bkmkend _Toc534420090}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {If the }{\b Condition}{ returns }{\b true}{
, then the transition to a new state is made, and as that transition is made some kind of action occurs (in the previous state machine design, this was the }{\b run(\~)}{ method): }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_187" \\o "A_187" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100380037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c04:statemachine2:Transition.py

\par # Transition function object for state machine
\par 
\par class Transition:
\par   def transition(self, input):
\par     assert 1, "transition() not implemented"
\par # :~
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420091}The table
{\*\bkmkend _Toc534420091}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {With these classes in place, we can set up a 3-dimensional table where }{
\v #[BT_143]#}{each row completely describes a state. The first element in the row is the current state, and the rest of the elements are each a row indicating what the }{\i type }{of the input can be, the condition t
hat must be satisfied in order for this state change to be the correct one, the action that happens during transition, and the new state to move into. Note that the }{\b Input}{ object is not just used for its type, it is also a }{\i Messenger}{
 object that carries information to the }{\b Condition}{ and }{\b Transition}{ objects: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_188" \\o "A_188" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100380038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {\fs20 \{
(CurrentState, InputA) : (ConditionA, TransitionA, NextA),
\par  (CurrentState, InputB) : (ConditionB, TransitionB, NextB),
\par  (CurrentState, InputC) : (ConditionC, TransitionC, NextC),
\par  ...
\par \}
\par }\pard \s16\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v\f28\noproof0 #[BT_144]#
\par }\pard \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_147]#
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420092}
The basic machine{\*\bkmkend _Toc534420092}
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c04:statemachine2:StateMachine.py

\par # A table-driven state machine
\par 
\par class StateMachine:
\par   def __init__(self, initialState, tranTable):
\par     self.state = initialState
\par     self.transitionTable = tranTable
\par 
\par   def nextState(self, input):
\par     
\par     Iterator it=((List)map.get(state)).iterator()
\par     while(it.hasNext()):
\par       Object[] tran = (Object[])it.next()
\par       if(input == tran[0] || 
\par          input.getClass() == tran[0]):
\par         if(tran[1] != null):
\par           Condition c = (Condition)tran[1]
\par           if(!c.condition(input))
\par             continue # Failed test
\par         
\par         if(tran[2] != null)
\par           ((Transition)tran[2]).transition(input)
\par         state = (State)tran[3]
\par         return
\par       
\par 
\par     throw RuntimeException(
\par       "Input not supported for current state")
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_148]#
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420093}
Simple vending machine{\*\bkmkend _Toc534420093}
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c04:vendingmachine:VendingMachine.py

\par # Demonstrates use of StateMachine.py
\par import sys
\par sys.path += ['../statemachine2']
\par import StateMachine
\par 
\par class State:
\par   def __init__(self, name): self.name = name
\par   def __str__(self): return self.name 
\par 
\par State.quiescent = State("Quiesecent")
\par State.collecting = State("Collecting")
\par State.selecting = State("Selecting")
\par State.unavailable = State("Unavailable")
\par State.wantMore = State("Want More?")
\par State.noChange = State("Use Exact Change Only")
\par State.makesChange = State("Machine makes change")
\par 
\par class HasChange:
\par   def __init__(self, name): self.name = name
\par   def __str__(self): return self.name 
\par 
\par HasChange.yes = HasChange("Has change")
\par HasChange.no = HasChange("Cannot make change")
\par 
\par class ChangeAvailable(StateMachine):
\par   def __init__(self):
\par     StateMachine.__init__(State.makesChange, \{
\par       # Current state, input
\par       (State.makesChange, HasChange.no) :
\par         # test, transition, next state:
\par         (null, null, State.noChange),
\par       (State.noChange, HasChange.yes) :
\par         (null, null, State.noChange)
\par     \})
\par 
\par class Money:
\par   def __init__(self, name, value):
\par     self.name = name
\par     self.value = value
\par   def __str__(self): return self.name 
\par   def getValue(self): return self.value 
\par 
\par Money.quarter = Money("Quarter", 25)
\par Money.dollar = Money("Dollar", 100)
\par 
\par class Quit:
\par   def __str__(self): return "Quit" 
\par 
\par Quit.quit = Quit()
\par 
\par class Digit:
\par   def __init__(self, name, value):
\par     self.name = name
\par     self.value = value
\par   def __str__(self): return self.name 
\par   def getValue(self): return self.value 
\par   
\par class FirstDigit(Digit): pass
\par FirstDigit.A = FirstDigit("A", 0)
\par FirstDigit.B = FirstDigit("B", 1)
\par FirstDigit.C = FirstDigit("C", 2)
\par FirstDigit.D = FirstDigit("D", 3)
\par 
\par class SecondDigit(Digit): pass
\par SecondDigit.one = SecondDigit("one", 0)
\par SecondDigit.two = SecondDigit("two", 1)
\par SecondDigit.three = SecondDigit("three", 2)
\par SecondDigit.four = SecondDigit("four", 3)
\par 
\par class ItemSlot:
\par   id = 0
\par   def __init__(self, price, quantity):
\par     self.price = price
\par     self.quantity = quantity
\par   def __str__(self): return `ItemSlot.id`
\par   def getPrice(self): return self.price 
\par   def getQuantity(self): return self.quantity 
\par   def decrQuantity(self): self.quantity -= 1
\par 
\par class VendingMachine(StateMachine):
\par   changeAvailable = ChangeAvailable()
\par   amount = 0
\par   FirstDigit first = null
\par   ItemSlot[][] items = ItemSlot[4][4]
\par 
\par   # Conditions:
\par   def notEnough(self, input):
\par     i1 = first.getValue()
\par     i2 = input.getValue()
\par     return items[i1][i2].getPrice() > amount
\par 
\par   def itemAvailable(self, input):
\par     i1 = first.getValue()
\par     i2 = input.getValue()
\par     return items[i1][i2].getQuantity() > 0
\par 
\par   def itemNotAvailable(self, input):
\par     return !itemAvailable.condition(input)
\par     #i1 = first.getValue()
\par     #i2 = input.getValue()
\par     #return items[i1][i2].getQuantity() == 0
\par 
\par   # Transitions:
\par   def clearSelection(self, input):
\par     i1 = first.getValue()
\par     i2 = input.getValue()
\par     ItemSlot is = items[i1][i2]
\par     print (
\par       "Clearing selection: item " + is +
\par       " costs " + is.getPrice() +
\par       " and has quantity " + is.getQuantity())
\par     first = null
\par 
\par   def dispense(self, input):
\par     i1 = first.getValue()
\par     i2 = input.getValue()
\par     ItemSlot is = items[i1][i2]
\par     print ("Dispensing item " + 
\par       is + " costs " + is.getPrice() +
\par       " and has quantity " + is.getQuantity())
\par     items[i1][i2].decrQuantity()
\par     print ("Quantity " + 
\par       is.getQuantity())
\par     amount -= is.getPrice()
\par     print("Amount remaining " + 
\par       amount)
\par 
\par   def showTotal(self, input):
\par     amount += ((Money)input).getValue()
\par     print "Total amount = " + amount
\par 
\par   def returnChange(self, input):
\par     print "Returning " + amount
\par     amount = 0
\par 
\par   def showDigit(self, input):
\par     first = (FirstDigit)input
\par     print "First Digit= "+ first
\par 
\par   def __init__(self):
\par     StateMachine.__init__(self, State.quiescent)
\par     for(int i = 0 i < items.length i++)
\par       for(int j = 0 j < items[i].length j++)
\par         items[i][j] = ItemSlot((j+1)*25, 5)
\par     items[3][0] = ItemSlot(25, 0)
\par     buildTable(Object[][][]\{
\par      ::State.quiescent, # Current state
\par         # Input, test, transition, next state:
\par        :Money.class, null, 
\par          showTotal, State.collecting,
\par      ::State.collecting, # Current state
\par         # Input, test, transition, next state:
\par        :Quit.quit, null, 
\par          returnChange, State.quiescent,
\par        :Money.class, null, 
\par          showTotal, State.collecting,
\par        :FirstDigit.class, null, 
\par          showDigit, State.selecting,
\par      ::State.selecting, # Current state
\par         # Input, test, transition, next state:
\par        :Quit.quit, null, 
\par          returnChange, State.quiescent,
\par        :SecondDigit.class, notEnough, 
\par          clearSelection, State.collecting,
\par        :SecondDigit.class, itemNotAvailable, 
\par          clearSelection, State.unavailable,
\par        :SecondDigit.class, itemAvailable, 
\par          dispense, State.wantMore,
\par      ::State.unavailable, # Current state
\par         # Input, test, transition, next state:
\par        :Quit.quit, null, 
\par          returnChange, State.quiescent,
\par        :FirstDigit.class, null, 
\par          showDigit, State.selecting,
\par      ::State.wantMore, # Current state
\par         # Input, test, transition, next state:
\par        :Quit.quit, null, 
\par          returnChange, State.quiescent,
\par        :FirstDigit.class, null, 
\par          showDigit, State.selecting,
\par     )
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_149]#
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420094}
Testing the machine{\*\bkmkend _Toc534420094}
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {
# c04:vendingmachine:VendingMachineTest.py
\par # Demonstrates use of StateMachine.py
\par 
\par vm = VendingMachine()
\par for input in [  
\par     Money.quarter,
\par     Money.quarter,
\par     Money.dollar,
\par     FirstDigit.A,
\par     SecondDigit.two,
\par     FirstDigit.A,
\par     SecondDigit.two,
\par     FirstDigit.C,
\par     SecondDigit.three,
\par     FirstDigit.D,
\par     SecondDigit.one,
\par     Quit.quit]:
\par   vm.nextState(input)
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_150]#
\par #[BT_151]#
\par #[BT_152]#
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420095}Tools
{\*\bkmkend _Toc534420095}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_153]#}{
Another approach, as your state machine gets bigger, is to use an automation tool whereby you configure a table and let the tool generate the state machine code fo
r you. This can be created yourself using a language like Python, but there are also free, open-source tools such as }{\i Libero}{, at }{\field{\*\fldinst { HYPERLINK "http://www.imatix.com" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000001600000068007400740070003a002f002f007700770077002e0069006d0061007400690078002e0063006f006d000000e0c9ea79f9bace118c8200aa004ba90b2e00000068007400740070003a002f002f007700770077002e0069006d006100740069007800
2e0063006f006d002f000000}}}{\fldrslt {\cs42\ul\cf2 http://www.imatix.com}}}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_189" \\o "A_189" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100380039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420096}
Exercises{\*\bkmkend _Toc534420096}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls5\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {Create an example of the \'93virtual proxy.\'94 }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_190" \\o "A_190" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100390030000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 2. \tab}Create an example of the \'93Smart reference\'94 proxy where you keep count of the number of method calls to a particular object. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_191" \\o "A_191" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100390031000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 3. \tab}Create a program similar to certain DBMS systems that only allow a certain number of connecti
ons at any time. To implement this, use a singleton-like system that controls the number of \'93connection\'94
 objects that it creates. When a user is finished with a connection, the system must be informed so that it can check that connection back in to be reus
ed. To guarantee this, provide a proxy object instead of a reference to the actual connection, and design the proxy so that it will cause the connection to be released back to the system. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_192" \\o "A_192" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100390032000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 4. \tab}Using the }{\i State}{,}{\i  }{make a class called }{\b UnpredictablePerson}{ which changes the kind of response to its }{\b hello(\~)}{ method depending on what kind of }{\b 
Mood}{ it\rquote s in. Add an additional kind of }{\b Mood}{ called }{\b Prozac}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_193" \\o "A_193" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100390033000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 5. \tab}Create a simple copy-on write implementation. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_194" \\o "A_194" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100390034000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 6. \tab}}\pard \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin1080\itap0 {Apply }{\b TransitionTable.py}{
 to the \'93Washer\'94 problem. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_195" \\o "A_195" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100390035000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 7. \tab}Create a }{\i StateMachine}{ system whereby the current state along with input information determines the next state that the system w
ill be in. To do this, each state must store a reference back to the proxy object (the state controller) so that it can request the state change. Use a }{\b HashMap}{ to create a table of states, where the key is a }{\b String}{
 naming the new state and the value is the new state object. Inside each state subclass override a method }{\b nextState(\~)}{ that has its own state-transition table. The input to }{\b nextState(\~)}{
 should be a single word that comes from a text file containing one word per line.}{\b  }{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_196" \\o "A_196" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100390036000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{\b 
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 8. \tab}}{Modify the previous exercise so that the state machine can be configured by creating/modifying a single multi-dimensional array.}{\b  }{\field\fldedit{\*\fldinst {\b 
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_197" \\o "A_197" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100390037000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{\b 
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 9. \tab}}{Modify the \'93mood\'94 exercise from the previous session so that it becomes a state machine using StateMachine.java }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_198" \\o "A_198" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100390038000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 10. \tab}Create an elevator state machine system using StateMachine.java }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_199" \\
o "A_199" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003100390039000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 11. \tab}Create a heating/air-conditioning system using StateMachine.java}{\b  }{\field\fldedit{\*\fldinst {\b  HYPERLINK "htt
p://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_200" \\o "A_200" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200300030000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{\b 
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 12. \tab}}{A }{\i generator}{ is an object that produces other objects, just like a factory, except that the generator function doesn\rquote t require any arguments. Create a }{\b 
MouseMoveGenerator}{ which produces correct }{\b MouseMove}{ actions as outputs each time the generator function is called (that is, the mouse must move in the proper sequence, thus the possible moves are based on the previous move \endash  it\rquote 
s another state machine). Add a method }{\b iterator(\~) }{to produce an iterator, but this method should take an }{\b int}{ argument that specifies the number of moves to produce before }{\b hasNext(\~)}{ returns }{\b false}{.}{\b  }
{\field\fldedit{\*\fldinst {\b  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_201" \\o "A_201" }{\b {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200300031000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{\b 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_154]#\sect }\sectd 
\binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 
\cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705902}{\*\bkmkstart _Toc534420097}X: Decorators: dynamic type selection{\*\bkmkend _Toc534420097}
\par }\pard\plain \s15\ql \li360\ri0\sa180\sl270\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
The use of layered objects to dynamically and transparently add responsibilities to individual objects is referred to as the }{\i decorator}{ pattern. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/Find
Page/A_202" \\o "A_202" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200300032000000}}}{\fldrslt {\cs42\fs22\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_155]#}{
Used when subclassing creates too many (& inflexible) classes }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_203" \\o "A_203" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200300033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_156]#}{All decorators that wrap around the original object must have the same basic interface }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_204" \\o "A_204" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200300034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_157]#}{Dynamic proxy/surrogate? }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_205" \\o "A_205" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200300035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_158]#}{This accounts for the odd inheritance structure }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_206" \\o "A_206" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200300036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_159]#}{Tradeoff: coding is more complicated when using decorators }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_207" \\o "A_207" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200300037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420098}
Basic decorator structure{\*\bkmkend _Toc534420098}
\par }\pard\plain \qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_160]#}{
{\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLockAspectRatio}{\sv 1}}{\sp{\sn fLockText}{\sv 0}}{\sp{\sn pibName}{\sv Decorator}}{\sp{\sn pibFlags}{\sv 1}}{\sp{\sn fLine}{\sv 0}}
{\sp{\sn fAllowOverlap}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}\picscalex123\picscaley123\piccropl0\piccropr0\piccropt0\piccropb0
\picw10423\pich5419\picwgoal5909\pichgoal3072\wmetafile8\bliptag1232336592\blipupi-153{\*\blipuid 4973f6d0b67acfa14bc7ffbd4b60c6d8}
010009000003fe0c000006001209000000001209000026060f001a12574d4643010000000000010054810000000001000000f811000000000000f81100000100
0000780000002a000000210000006d090000130500000000000000000000b42800002b15000020454d4600000100f811000098000000040000000f0000005800
000000000000c0120000d8180000cb0000000d01000056004900530049004f000000440072006100770069006e0067000000000008460a000000100000000000
00000000000009000000100000009e090000000500000d000000100000000000000000000000190000000c0000009c447901260000001c000000010000000000
0000020000000000000000000000250000000c00000001000000250000000c0000000000008056000000300000000203000021000000f9050000ca0000000500
00000303c900f805c900f8052200030322000303c900250000000c00000008000080280000000c00000001000000120000000c00000001000000160000000c00
000018000000250000000c00000005000080520000004c01000001000000adffffff2f0000000000000000000000bc0200000000000000000022560065007200
640061006e00610000005452494255544553a5010d464154414c45584954484f4f4b3e011147455446494c4541545452494255544553a4010000000045434452
8200044b323134d6000c454e41424c454b45524e454c7c000b4c4f43414c554e4c4f434b09001147455450524f434144445245535333325703020c5245474445
4c4554454b4559db00044b323135d7000e474c4f42414c444f53414c4c4f43b80008435657425245414bcd000d44495341424c454b45524e454c0000084c5354
524350594e6101075f5f3030303048b700075f5f4430303048b3000c47455445585057494e564552a70009474c4f42414c464958c5000d4c494d000000000000
000000000000000000000000000000000000010101010101010101013f01250000000c000000010000005400000084000000740300008e00000086050000f100
0000010000005555874055558740740300008e000000090000004c00000000000000000000000000000000000000000000006000000043006f006d0070006f00
6e0065006e0074004f443c00000039000000580000003a000000390000003b000000370000003b00000026000000120000000c000000020000000d0000001000
00000000000000000000260000001c0000000200000000000000020000000000000000000000250000000c00000002000000250000000c000000000000805600
00003000000002030000c8000000f9050000710100000500000003037001f8057001f805c9000303c90003037001250000000c00000008000080280000000c00
000002000000120000000c00000001000000250000000c00000005000080520000004c01000002000000adffffff2a0000000000000000000000900100000000
000000000022560065007200640061006e0061000000590e001652454749535445525345525649434550524f43455353eb010f524547515545525956414c5545
4558e10000000000454c49425241525960001347455457494e444f57534449524543544f525986000d535741505245434f5244494e47cc001047455456444d50
4f494e544552333257040215474c4f42414c534d41525450414745554e4c4f434be7000e53455448414e444c45434f554e54c7001746494c4554494d45544f4c
4f43414c4649000054494d45b001114f55545055544445425547535452494e4773000a474c4f42414c574952456f001049534241444855474552454144505452
5a011456414c0000000000000000000000000000000000000000000000000101010101010101010154a4250000000c0000000200000054000000900000009103
000035010000680500009801000001000000555587405555874091030000350100000b0000004c00000000000000000000000000000000000000000000006400
00006f007000650072006100740069006f006e00280029000a443200000034000000310000002300000032000000210000001800000032000000350000002600
000026000000120000000c000000020000000d000000100000000000000000000000260000001c00000003000000000000000200000000000000000000002500
00000c00000003000000250000000c0000000000008056000000300000002a000000fc020000cf020000a5030000050000002b00a403ce02a403ce02fd022b00
fd022b00a403250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c00000005000080250000000c0000000100
00005400000090000000650000006903000094020000cc03000001000000555587405555874065000000690300000b0000004c00000000000000000000000000
00000000000000000000640000004400650063006f00720061007400610062006c00650052434500000037000000310000003900000029000000370000002600
0000370000003a0000001c00000037000000120000000c000000020000000d000000100000000000000000000000260000001c00000003000000000000000200
00000000000000000000250000000c00000003000000250000000c0000000000008056000000300000002a000000a3030000cf0200004d040000050000002b00
4c04ce024c04ce02a4032b00a4032b004c04250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c0000000500
0080250000000c0000000200000054000000900000009100000010040000680200007304000001000000555587405555874091000000100400000b0000004c00
00000000000000000000000000000000000000000000640000006f007000650072006100740069006f006e0028002900474d3200000034000000310000002300
000032000000210000001800000032000000350000002600000026000000120000000c000000020000000d000000100000000000000000000000260000001c00
00000300000000000000020000000000000000000000250000000c00000003000000250000000c00000000000080560000003000000064060000fc0200006d09
0000a00300000500000065069f036c099f036c09fd026506fd0265069f03250000000c00000008000080280000000c00000003000000120000000c0000000100
0000250000000c00000005000080250000000c000000010000005400000088000000e406000067030000ec080000ca030000010000005555874055558740e406
0000670300000a0000004c0000000000000000000000000000000000000000000000600000004400650063006f007200610074006f0072003200450000003700
0000310000003900000029000000370000002600000039000000290000003b000000120000000c000000020000000d0000001000000000000000000000002600
00001c0000000300000000000000020000000000000000000000250000000c00000003000000250000000c000000000000805600000030000000640600009e03
00006d090000aa040000050000006506a9046c09a9046c099f0365069f036506a904250000000c00000008000080280000000c00000003000000120000000c00
000001000000250000000c00000005000080250000000c000000020000005400000090000000fc0600000b040000d30800006e04000001000000555587405555
8740fc0600000b0400000b0000004c0000000000000000000000000000000000000000000000640000006f007000650072006100740069006f006e0028002900
4f52320000003400000031000000230000003200000021000000180000003200000035000000260000002600000054000000a80000008b0600006f0400004409
0000d20400000100000055558740555587408b0600006f0400000f0000004c00000000000000000000000000000000000000000000006c000000610064006400
650064004200650068006100760069006f00720028002900544f3200000034000000340000003100000034000000390000003100000035000000320000003100
00001800000032000000230000002600000026000000120000000c000000020000000d000000100000000000000000000000120000000c000000010000002600
00001c00000003000000000000000a0000000000000000000000250000000c00000003000000250000000c00000005000080570000002400000079040000c801
00008304000002030000020000007e04fd027e04cd01250000000c00000008000080280000000c00000003000000120000000c000000020000000d0000001000
00000000000000000000120000000c00000001000000260000001c00000003000000000000000a0000000000000000000000250000000c000000030000002500
00000c00000005000080570000002c0000005a0400006b010000a2040000d2010000040000009d04cd017e0470015f04cd019d04cd01250000000c0000000800
0080280000000c00000003000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c0000000300
0000000000000a0000000000000000000000250000000c00000003000000250000000c00000005000080570000002c0000007904000032020000ee0700000203
000004000000e907fd02e907e902e90737027e043702250000000c00000008000080280000000c00000003000000120000000c000000020000000d0000001000
00000000000000000000120000000c00000001000000260000001c00000003000000000000000a0000000000000000000000250000000c000000030000002500
00000c00000005000080570000002c00000078010000320200008304000002030000040000007e043702310437027d0137027d01fd02250000000c0000000800
0080280000000c00000003000000120000000c000000020000000d000000100000000000000000000000260000001c0000000300000000000000020000000000
000000000000250000000c00000003000000250000000c00000000000080560000003000000049030000f9020000e4050000a2030000050000004a03a103e305
a103e305fa024a03fa024a03a103250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c000000050000802500
00000c00000001000000540000008800000092030000660300009a050000c903000001000000555587405555874092030000660300000a0000004c0000000000
000000000000000000000000000000000000600000004400650063006f007200610074006f007200310045000000370000003100000039000000290000003700
00002600000039000000290000003b000000120000000c000000020000000d000000100000000000000000000000260000001c00000003000000000000000200
00000000000000000000250000000c00000003000000250000000c000000000000805600000030000000490300009e030000e405000047040000050000004a03
4604e3054604e3059f034a039f034a034604250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c0000000500
0080250000000c0000000100000054000000880000008e0300000b0400009e0500006e0400000100000055558740555587408e0300000b0400000a0000004c00
00000000000000000000000000000000000000000000600000006100640064006500640053007400610074006500370000003a0000003a000000370000003a00
00003b00000026000000370000002600000037000000120000000c000000020000000d000000100000000000000000000000260000001c000000030000000000
0000020000000000000000000000250000000c00000003000000250000000c0000000000008056000000300000004903000042040000e4050000eb0400000500
00004a03ea04e305ea04e30543044a0343044a03ea04250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c00
000005000080250000000c000000020000005400000090000000aa030000b00400008105000013050000010000005555874055558740aa030000b00400000b00
00004c0000000000000000000000000000000000000000000000640000006f007000650072006100740069006f006e0028002900000032000000340000003100
000023000000320000002100000018000000320000003500000026000000260000000e0000001400000000000000100000001400000004000000030108000500
00000b0200000000050000000c020105a0090500000001029c44790108000000fa0200000200000000000000040000002d01000007000000fc020000ffffff00
0000040000002d0101000e000000240305000303c900f805c900f8052200030322000303c90008000000fa02050000000000ffffff00040000002d0102000400
0000f00100000400000002010100040000002e01180007000000fc020100000000000000040000002d0100001c000000fb0253002f0000000000bc0200000000
0000002256657264616e61003f3f3f3f3f3f3f3f3f3f3f3f6c3f3f3f3f3f3f3f3f3f3f00040000002d01030015000000320a8e00740309000000436f6d706f6e
656e74433c00390058003a0039003b0037003b002600040000000201020008000000fa0200000200000000000000040000002d010400040000002d0101000e00
00002403050003037001f8057001f805c9000303c90003037001040000002d01020004000000f00104000400000002010100040000002d0100001c000000fb02
53002a00000000009001000000000000002256657264616e61003f3f3f3f3f3f3f3f3f3f3f3f3f6f3f3f3f3f3f3f3f3fe100040000002d01040018000000320a
350191030b0000006f7065726174696f6e28290032003400310023003200210018003200350026002600040000000201020008000000fa020000020000000000
0000040000002d010500040000002d0101000e000000240305002b00a403ce02a403ce02fd022b00fd022b00a403040000002d01020004000000f00105000400
000002010100040000002d010000040000002d01030018000000320a690365000b0000004465636f72617461626c650045003700310039002900370026003700
3a001c003700040000000201020008000000fa0200000200000000000000040000002d010500040000002d0101000e000000240305002b004c04ce024c04ce02
a4032b00a4032b004c04040000002d01020004000000f00105000400000002010100040000002d010000040000002d01040018000000320a100491000b000000
6f7065726174696f6e28290032003400310023003200210018003200350026002600040000000201020008000000fa0200000200000000000000040000002d01
0500040000002d0101000e0000002403050065069f036c099f036c09fd026506fd0265069f03040000002d01020004000000f001050004000000020101000400
00002d010000040000002d01030016000000320a6703e4060a0000004465636f7261746f72324500370031003900290037002600390029003b00040000000201
020008000000fa0200000200000000000000040000002d010500040000002d0101000e000000240305006506a9046c09a9046c099f0365069f036506a9040400
00002d01020004000000f00105000400000002010100040000002d010000040000002d01040018000000320a0b04fc060b0000006f7065726174696f6e282900
320034003100230032002100180032003500260026001e000000320a6f048b060f00000061646465644265686176696f72282900320034003400310034003900
3100350032003100180032002300260026000400000002010200040000000201010008000000fa0200000a00000000000000040000002d010500040000002d01
000008000000250302007e04fd027e04cd01040000002d01020004000000f00105000400000002010200040000000201010008000000fa0200000a0000000000
0000040000002d010500040000002d0100000c000000250304009d04cd017e0470015f04cd019d04cd01040000002d01020004000000f0010500040000000201
0200040000000201010008000000fa0200000a00000000000000040000002d010500040000002d0100000c00000025030400e907fd02e907e902e90737027e04
3702040000002d01020004000000f00105000400000002010200040000000201010008000000fa0200000a00000000000000040000002d010500040000002d01
00000c000000250304007e043702310437027d0137027d01fd02040000002d01020004000000f0010500040000000201020008000000fa020000020000000000
0000040000002d010500040000002d0101000e000000240305004a03a103e305a103e305fa024a03fa024a03a103040000002d01020004000000f00105000400
000002010100040000002d010000040000002d01030016000000320a660392030a0000004465636f7261746f7231450037003100390029003700260039002900
3b00040000000201020008000000fa0200000200000000000000040000002d010500040000002d0101000e000000240305004a034604e3054604e3059f034a03
9f034a034604040000002d01020004000000f00105000400000002010100040000002d010000040000002d01030016000000320a0b048e030a00000061646465
64537461746537003a003a0037003a003b002600370026003700040000000201020008000000fa0200000200000000000000040000002d010500040000002d01
01000e000000240305004a03ea04e305ea04e30543044a0343044a03ea04040000002d01020004000000f00105000400000002010100040000002d010000040000002d01040018000000320ab004aa030b0000006f7065726174696f6e28290032003400310023003200210018003200350026002600030000000000}}{

\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420099}
A coffee example{\*\bkmkend _Toc534420099}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_161]#}{Consider going down to the local coffee shop, }{\i 
BeanMeUp}{, for a coffee.  Ther
e are typically many different drinks on offer -- espressos, lattes, teas, iced coffees, hot chocolate to name a few, as well as a number of extras (which cost extra too) such as whipped cream or an extra shot of espresso. You can also make certain change
s to your drink at no extra cost, such as asking for decaf coffee instead of regular coffee. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_208" \\o "A_208" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200300038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_162]#}{Quite clearly if we are going to model all these drinks and combinations, there will be sizeable class diagrams. So for clarity we will only consider a subset of the coffees: Espresso, Espresso Con Panna, Caf\'e9 Late, Cappuccino and Caf
\'e9 Mocha. We'll include 2 extras - whipped cream ("whipped") and an extra shot of espresso; and three changes - decaf, steamed milk ("wet") and foamed milk ("dry"). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_209" \\o "A_209" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200300039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420100}
Class for each combination{\*\bkmkend _Toc534420100} 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_163]#}{One solution is to creat
e an individual class for every combination. Each class describes the drink and is responsible for the cost etc. The resulting menu is huge, and a part of the class diagram would look something like this: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_210" \\o "A_210" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200310030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard \qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_164]#}{ }{\pard\plain \qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\object\objemb\objw9039\objh4619\objscalex83\objscaley83{\*\objclass Visio.Drawing.6}{\*\objdata 010500000200000010000000566973696f2e44726177696e672e36000000000000000000004a0100
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000020000000100000000000000001000000200000001000000feffffff00000000000000007e000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff04000000feffffffa3000000feffffff060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f000000100000001100000012000000130000001400000015000000160000001700000018000000190000001a0000001b0000001c0000001d0000001e00
00001f000000200000002100000022000000230000002400000025000000260000002700000028000000290000002a0000002b0000002c0000002d0000002e0000002f000000300000003100000032000000330000003400000035000000360000003700000038000000390000003a0000003b0000003c0000003d000000
3e0000003f000000400000004100000042000000430000004400000045000000460000004700000048000000490000004a0000004b0000004c0000004d0000004e0000004f000000500000005100000052000000530000005400000055000000560000005700000058000000590000005a0000005b0000005c0000005d00
00005e0000005f000000600000006100000062000000630000006400000065000000660000006700000068000000690000006a0000006b0000006c0000006d0000006e0000006f000000700000007100000072000000730000007400000075000000760000007700000078000000790000007a0000007b0000007c000000
7d000000fefffffffdffffff8000000052006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffff02000000131a020000000000c00000000000004600000000000000000000000040fb
6f921792c10103000000400300000000000001004f006c00650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000201ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
0000000000000000000000001400000000000000010043006f006d0070004f0062006a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120002010100000004000000ffffffff0000000000000000000000000000000000000000000000000000
0000000000000000000001000000710000000000000003004f0062006a0049006e0066006f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000201ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
000000000000000000000000030000000400000000000000feffffff02000000fefffffffefffffffeffffff060000000700000008000000090000000a0000000b0000000c000000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff010000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100feff030a0000ffffffff131a020000000000c0000000000000461800
00004d6963726f736f667420566973696f2044726177696e670011000000564953494f20362e30205368617065730010000000566973696f2e44726177696e672e3600f439b27100000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000feff0000040002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000feff000004000200000000000000000000000000000000000200
000002d5cdd59c2e1b10939708002b2cf9ae4400000005d5cdd59c2e1b10939708002b2cf9ae0e010000ca00000007000000010000004000000000000080480000000e000000500000000f0000005c00000002000000680000000c000000740000000d000000ac00000002000000e404000013000000091c00001e000000
01000000000000001e00000001000000000000001e00000001000000000000000c1000000400000056006900730069006f0044006f00630075006d0065006e00740000000000000000000000000000000000000000000000000000000000000000000000000000001c0002000300000006000000ffffffff000000000000
0000000000000000000000000000000000000000000000000000000000000500000091f000000000000056006900730069006f0049006e0066006f0072006d006100740069006f006e00000000000000000000000000000000000000000000000000000000000000000022000200ffffffffffffffffffffffff00000000
0000000000000000000000000000000000000000000000000000000000000000040000001c000000000000000500530075006d006d0061007200790049006e0066006f0072006d006100740069006f006e000000000000000000000000000000000000000000000000000000280002010500000007000000ffffffff0000
000000000000000000000000000000000000000000000000000000000000000000007f0000001046000000000000050044006f00630075006d0065006e007400530075006d006d0061007200790049006e0066006f0072006d006100740069006f006e000000000000000000000038000200ffffffffffffffffffffffff
00000000000000000000000000000000000000000000000000000000000000000000000005000000ca01000000000000566973696f2028544d292044726177696e670d0a000000000000060091f00000008401001400000004dcbc291aef000077010000520000000000ed64eaf10318e9f2ffffff8300fff6f2fff3fbf0
0701f8f1008980eaf116048016002000190080ff00c0c0c000e6e6e6ff00cdcdcd00b3b3b3ef009a9a9a2100800066ff6666004d4d4d00337f3333001a1a1a000524ebf018dcff040a0524ebf018dcff040a5518ebf0fff2f0c2ebf038e8f340faf4070f190fe1faf6f1eaf119e3f8fd0cebf0010054640000ff20000041
7269616cea40021ce7f4154e03600002ff0200004d6f6e6f74ff79706520536f72749573400222e7f4104e057501574f696e6764a200860323e7f4f50d4e0300740253796d62076f6c003554ebf03fe8f3d03ff2ff0406daeaf120e8f359401a06000019012d00310f0000551aebf0fff2f026ebf01ce8f3a0faf4070feb
f0f6f1eaf14ae7f4043aebf044ebf00100543101e8f380f2f1450f570ff2f1e0fb2d01eaf168eae7f40eebf050ebf00200548518ebf038dffc8c018c01e6f501ae91020000032a0405ebf006aaebf007ebf008ebf009ebf00aaaebf00bebf00cebf00debf0937ae3f825c00255010101ba017edf010200620100fe091295
010f16020f1185b804eaf189fefc03307b14ae47e17a4b843fb60340e6f5bf01022a13911091023a161215001b195d12035c4916121304620211140573165506731607731608971186bc0402eaf155fc04b20ade18091e741a091225037316040f16a01287c004eaf101d9fc034213ebf03e2f50262b13502467e03f206d
20f2f0ef41da18a85d1350268013018b2c028b2c03488b27172f7f14066826801307712654b81574150973160a7311a0790801e0fc030b0fb90309147415721974158012297415a01fb21b003f123209120baa73160c73160d73160e73160faa731610731611731612731613527311a4c804eaf1cf243ffd6b027c2b12db
0102006100fe344255013a45023a45033a45043a4515053a45063a45073a40923fa43e53106074103442113a45123a4555133a45143a45153a45163a4595173a45183a4084cc04eaf11124174f2b12a3d004eaf146fc032941402359323b0913a041131347560247568503a041a7d404591520543f59bdf4d804eaf1b1f9
49f03f88134388132c3f015c0917952321e02ba502dc5c03dc54922504fc5c054afc5c06fc5c07fc577c47bedc040aeaf151fc0402f045bd5f0c1b981022464d015745a0646641bfe004eaf101d2f94fd26f2a15344f464f584f6a4f407c4fa43fb63fc83fda3fec37c0e404c2eaf1dcbb00c465bb014914c03fcab57dd0
c67ed8d87ebc78735502fe71e5fc76d46f1e8fe26ff46f067f00187f2a7f3c7f4e7f607110156c7f7e74525d1210eb76801311da8c12c7764a801313fa8c14d9768013151a9c3516da8c17da8c1820fd758013a9195a9709121a73161b7311b734e804eaf1f7fc03202049169d9f4649160808af9fcc9fec1720111640f1
90a5238717811d066304ac05871c07066208863645a05d12c2978013550904ac0a04ac0b871769b804c0bb01faf194047c05b309d6170000e594e3f8bcc16f5b1027003006fe7255c54212c759493f5b3f6d3482166af06b148332e923eda6448308aa42850942850a42850b42850c144280d4833088166abc049aafacaf
8ae3f895e3f8c8d6a7502fefb6214d3302c2f3bf8eb68eb6012844887e2f902fa22ffef841fa5002c43f011305648eb716638eb77e341015b41842a0416bc004a0bfb2bfe3f888e3f800f8493f5573112501bb05310f22df28d240c30136dde0fbc71584052d01289107005d11700dc1c9bb09ef0f011f131f251b412d34
1fd299521813b7c31923d01d08da1c13b72b299b382f6befe2f9682f007a2f32cf44cfb02f673f793298b196af08c0cfc0bfe5f653dcbf50ff00cf12c70074101fc97e3725019cb511dfbdff35df1047df28188405c3012491079d75e5c500c301e5f9bb05a7dfb9dfcbdfdddfefdf0001ef13ef25ef37efaa0905d1aec5
acff00091f0f1205152119cb0f60d9a1019be00073d56d55990b2c0b3e0f500f620f29237cf7f52b2355321cc771d21003ac3fd11fe316622f9eef71d2e31614bee41e2c021e2c031e2705d16cd1000ddf73d00f1fcfffe1ff58df050f170fa0290f831f951fa71f710e4783044fbf1be8b4814e6bfb130140de99fb00aa
e8413626b5173508ba1524ba05ca1b8ce215a23f8cf41f062f02182a8c262cef353d25ef354d25ef301092af15ff27ffc8aa33d6afe8a2e314b1bcf5a736637d46fec9eac00542e6c45ff903145126458fd23cc04492f0423dcd44145236da446d52d180e7449052c061c0615462b861b8610f00e9c105d16561602f722f
842f962fa82f00ba2fcc2fde2ff02f023f143f263fce43003e3f980f94f9643d88395c64e31f536f2101ba02c53f2f88f9e40290af324f00444f564f684f7a4f8c4f04d2b245f80c01012d5f3f5f515f3e1f501f621f741f02af5f559e61c65706b7da57b304f7f500c204cf0fe39b02d48e71195f061f447f00567f615f
e8c215518eb174d477d1dea9401551cb4294df6bd2a341b2792ebc5fc8ce5fe0547fb2037cb02e3f5532c283d9004995106a1824e6eb01628504db5617b40fc60fd80f53eb7140446f56635aff6993746fa4ed0272cc150382cc049761a48cd88371da80f0a27989f3f7f27fb2016101fe01bfa048d631da80d84269af67
7c7fb211004fa049a67fb2024fa09b6fad6f40bf6fd16af3542198f0638eb4c0fe670051974bb402b504d27fb1207f327f4c8f005e8f687f7a7f8c7f9e7fb07f7594e18f0101d27650e276094364fa5f533f653f00eeb9793c05d17e3135bf47bf59bf6bbf007dbf8fbfa1bfb3bfc5bfc27fec8fe67f12d8820e7f9f108a
0e9ef30c516bcf007dcf8fcfa1cfb3cfc5cfd7cfe9cffbcf00d7bfe9bffbbd820df7f2086f10b7eb80ffcc02000043616e6fff6e204c42502d3820fb4949dcff010400059cff00300243ef800501fb0009e9f2640001000f6f002c010127002c01eff07f004c6574746572000f204f0f0e025f0834016601ff7a00defd5f
44494e5522ebf030eff09f801ab89112540fe5f60602e3f803a80fd80fea0ffc0f0e1f201f00321f441f561f681f7a1f8c1f9e1fb01f00c21fd41fe61ff81f0a2f1c2f2e2f402f00522f642f762f882f9a2fac2efd36ebf0080011002000ff010077696e73706fff6f6c0043616e6f6eff204c42502d3820497f49004c50
54313adcfe553ae9f204ebf005ebf006ebf0550debf00eebf013ebf015ebf05516ebf01bebf01cebf01debf0152eebf02febf030dcf0000000000000556cebf034ebf02ce7f40eebf0fd01fff10c39e04408fbff1840ec34b1c4a3684b0940e3f8021f04eaf10bebf0ff1442d2292f090000f531ebf0432d020c40d22915
60370006ebf041e9f202015f9a01000014ebf07aeff002e2f915dcff180f2a0f3c0f4e0f600f00720f840f960fa80fba0fcc0fde0ff00f80021f141f261f381f4a1f5c1fe7f440feebf03c31d2296609001b004debf05200010000000d0000000d00000014000000000548ebf03cdcff040f160f280a5f9a01000014ebf0
7aeff002e2f915dcff180f2a0f3c0f4e0f600f00720f840f960fa80fba0fcc0fde0ff00f80021f141f261f381f4a1f5c1fe7f445feebf08431d229110a001b000debf052005546ebf0fff2f003ebf044e8f366faf40002f1f20e0fffffeaf1d01f0de0fbf6f1eaf16802060000bd20ebf001005418ebf00850dffc550155
01e6f501ebf092e3f86de006025540e8f3f03f9b04d7e83f3fe8f3c0ac06bf46ff0a8542a15028a43fc2bf0604330fe30ff50fdffc013052e9f21006029b06fe1e1201a406d22d1302ad062d1303b606fe0ade0601066204005d130762ef0000fe0906011a610013fec08104eaf19095037f069b0429c0a3059e16d0a81e
d8ba1e9e180b7355e011e5de16051f002f80033f3aff0f00006581048401211c5a07d10d2225e6f583e3f85e1257005505ebf047e9f2c9750849865a0384010d8624682111052f00a72fb92fcb2fdd2fef2f013675eee9f220f3f00000e0e9f2ff9dff8200453ffe00e100050f170f290f37077fffffff91ff898886ff01
fcaf88cc01c85002ff5609023ffcff860002ff570f510fe0630f750f870a9c0f8402cff3fffd61ebf0526570726573ff656e747320612064ff657363726970746ff7722066070061207365ff74206f66206f626afb6563faf07769746820ff73696d696c617220ff7374727563747572ff652c206265686176fd690b016e
642072656cff6174696f6e7368690f70732e0000bd62e3f8d8bf9a99fdf1d1f53ff4f43ffcf4bfa4703d5f0ad7a3d8bfe8f3d60304f7ec3f3e1700703dd2bfff9fcfe7f3f97cf0bfff6e1df5e0d651ebbffdc036013e9fbf488a2b1f7ca4b8c23f5547ebf0fff2f009ebf044e8f302faf400f6f1f0f3110d0b052309e0fb
ae0903000068e7f406ebf0301eebf001005418ebf06001e2f9a855015501e6f501ebf002ebf003aaebf004ebf005ebf09be3f810fe9000020055403e9fcfffe7f3f9e03f40dc3a7feac1ada3d63f41e8f35fe83f419a99c801e1bc05ddd8c505d13f5079090300f59c850102bd06744c0000eb600cebf08184012d0000fb
40729401f200c06204b70080200e10a226ebf0a07d0debf0620000a319ebf05593ff020b0519901116081b1fca2d190a3a1a819001f6f040806ebd0040fe71850103748c00140312111e1d591910301293113911c39003471eac1f92126f1190035a8613168501047588006053106eeaf1e03f05fc1305759311ca0828f6
89010294018401010400940105032f254123880141238c01412302eaf10742266923880169238c0169234090016923940169235501692307662681086626f6f169236f11692339110788c8223322d827023911dd23ed2602480411dd230136025d11dd23c4890115032f26053926014326383251220038325b2238326522
38365f3379224c36005f338d22383297223832a1223832ab22003832b5223832bf223832c9223832d32219011536ce370356890138272e2690f13351222e225b2202550190010100aa221543b5211543f6f11543e3322e37a024364743512224325b2203114601aa1b46012546012f4601b911027506e106fef6f1020761
9d44d908a5406f1102092b10fe84808104eaf1bd01a800e2f9bf42590102ff026015554d4c2042ff61636b67726f756eff64204164642d6f6eff0060092f434d443d7f31303031008079881129a08504eaf15ac84301bf44bf42ac2358b911030b04110f5a010baeb142006201af44015056085250560bb741b1420d5051
a4890492eaf121c8490903fc3007725409a700fea38d04eaf17cc843fdc4f2f0c351fec854ce4bda110200ff60135669735f4431ff31322e63686d2123db3230f85000fec7420160ff37436f7079726967ff6874203139393920fee950696f20436f7270ff6f726174696f6e2ebf2020416c6c200a6273ff207265736572
76651f642e00febe9104eaf12f11b21f5102b521e0fb0138ebf065008104b52167615d040824e5f6b521546948840fa923550183e3f84a535555010148e9f2be61bf45ca64ab21d567135500ca64b521d5678055ca64f6f1d567b45500ca646f11d5673925ca643911d567780580ca645d11d567ab21c6680411d563c9c0
105877649001fd11fd116f11001b0cc7743911001cd4740411e052da11065d1100678904391160015d04078f20d074a374e6f50a50870054f6f1932542bf420e45841352740580522e5f8482b4522f6c843922590159017802137086848d7290017e14000015a0848ac572b4bc486b318382669b5101210000108b002f26
2e2703d926eb8214a252ec27031c850a1432fa838f42028167feb08113556f81c08f1e9d3a52d0eb73fb82b08180551e3b9af03f40cc8344514e528613b081b4551f3b9a833440cb514e9cbb90b081436b5421e8c3519a42cd824a53602b947805c1573b9cbd936761d6839001f0050004118801093335a2ce3235a345a6
8e4324239c8d75437d9fcf80248902391160445744535d11445359aaf03f2d921c4505ad998019c4bc9fd7a2b08142f685750cafcf80e3326026093822a047223822512238225b22047076024c8d7653660a0245051c9f709104829001285a07b911e2f996859a6f00ab00aae3f8f4c84341c351ff9fffd73f4198da04cf
0f05905c00c351a260fd120003239b51ff0bffdf1025011923d0b310c131a26b027590006029c3037594003b60fe6281020472a3811611e4999053121759196f11936205fb0090fc1308600c45787b7465f34172726f775e95642f461d92038447eb820205b7412e9f42066101b04307b741bcb100bf45c8b5cb51d4b2d9
05e1bff3bf042200d7c310cd09272acf3ccf4ecf60cf72cf005e95114695c41146a5cfb7cd1355cfcf00e1cff3cf05df17df29df3bdf4ddf5fdf0071df7ccd1b4695c41b46acdfb7cd805500d6dfe8dffadf0cef1eef30ef42ef54ef0066ef78ef7ccd254695c42546b3efb7c9816e5204736f856fa5bf8b0aa123000b00
a99908b6bd5bc351effda381fee5500b446961677261af6d732e2e3c6037ff532dff4c69737420746865fb20646304206173736fff6369617465642077f76974687b0069732043916c89003c60b14202fb91df420324e54ff74d340854b142046e56c0f2a42b01bf45bd380feffd12e253088f566965776903fe55770f63
ff6f6e7461696e696eff67207368617065201d762c11206f66980faa0fbc0f02fd4735d90feb0a1355370f490ed771fee5501253686f772052fb656c216273686970734e7e14016026fb127c017201290f20666f72681f7a1f8c1ffd471136a91fbb1a805559d11feffd627186e550015f5255fb913f27a65203086e567e
2fb356b9bd5771a1a82bbf43fe88536017446973706cff61792053656d616e5f746963204580c0720c20f51415c2722ba200c06001472e00083e2f502ff84c320854a649320572df4162f080ad9040045f9427a601e5272b01e935992fab2f00bd2fcf2fe12fbe1770750538dc3f6fa3cd22e25318535b1230354f705404
226a022dff53232b11202f20af6564697459146431346f1077443d2f6d3ff74d38722fbb1a8d75e1a83e4feffd8cb1e5500e2550ff726f7065727469654a69032636131c8a4ac14170365748ad4fbf4fc80d31e24fbb16712404009c7589b40f2110899c71df72080f1a0e500b7137814571627199118886c9b4be6fa398
bc4167663961da82f5e5f0f5e5c885ed53feb96fa3a09dbc27ff0000e811c0e1a2020440668963034966a3581b61df65276e4200f3c13f6f516f636f2afed0876fc8996fab6aaa7587c9b4d1b2ffe7453f376ebfe26ff46c6173ef26ff0a836411247b13327fab6a7495597e00d16d7a7f8c7f9e7f1779bc7fce7fad6808
fd255975e5ece1e1670c861e8f19ff022bfdf053856c8563862875a76ec935102765e5e6a78cad873fb88fca8f2bfd001d00009e678abca0aa6b35455975d0b321c79c8fae8ff36d0ac3cf719fe98f00fb8f0d9f0155597bd790d19fe39f288f0065710baf1daf2fafa76e55b5c06fefeb00e06ff26f047f32fa237f698f
ae679cc10056af01860bb7148f8daf388f33f9568f0068bfad681361f0a9c896389f4a9ff59f0007af809f929fa49ff233f0a962a638cf404acfc2bfa1af80cf92cfa4cd2cddf400ef514931e8f0493162ddf8058241f7f56519f05254303f42322e009548ebf0fff2f002ebf4ebf0443aebf004ebf0030005eff4110d11
03eff42309e4f701ebf0f6f13d056968e7f40501283e025418ebf04110dffc05010501390d23019be3f8bd3a4100020055411103d7ef3f419a99b201d13f414ee8f3a03c40e6f5b90490c107ff50182d4454fb2109f4c2014100174202750a0000f760750cf40003e46202770006feec0201750bf401950df9072d420102
f702f20204e2fd01070e1209122a13038011df000040fe164201047576f6f06020e8f3e03f05461353057523005119224201063018e62018801243116801030206563e0401049512039b16056801db0203c206fe0942010761f2c31408cb10f30000020962e2c210853e04c705a400307b14bfae47e17a843fe9f2024ac2
0602670002e413d71202fe00f2d61305dd11d712066210004bfe9d420810a104e8f3d8af085dfea90d0100154202740500b5600b0180b90040fe6e220171740b00782864010202700b01ae41010900c09228039e270142a9242406029b16cd279a1706c822089a17d72fe925019b161537e12daa17a41f3fe920a08d04ea
f136ee130170e515e3174002d712006201d514150189360b89316c3e042301c821070100556401f800e1fa23013309ea410589e3f835ee13050100b852119c246e21f200c0893080ce521040801f4311c51200615501c41301cb108ae2183aee13d0b904431039074712004d1900002d0594120201bb178b4208344b1cc0
084d4f0000f05a10654d9548ebf0fff2f002ebf4ebf0443aebf004ebf0030005eff4110d1103eff42309e4f701ebf0f6f13d056968e7f40501283e025418ebf04110dffc05010501390d23019be3f8bd3a4100020055411103d7ef3f419a99b201d13f414ee8f3a03c40e6f5b90490c107ff50182d4454fb2109f4c20141
00174202750a0000f760750cf40003e46202770006feec0201750bf401950df9072d420102f702f20204e2fd01070e1209122a13038011df000040fe164201047576f6f06020e8f3e03f05461353057523005119224201063018e62018801243116801030207563e0401049512039b16056801db0203c206fe0942010761
f2c31408cb10f30000020962e2c210853e04c705a400307b14bfae47e17a843fe9f2024ac20602670002e413d71202fe00f2d61305dd11d712066210004bfe9d420810a104e8f3d8af085dfea90d0100154202740500b5600b0180b90040fe6e220171740b00782864010202700b01aef6f10900c09228039e270142a924
2406029b16cd279a1706c822089a17d72fe925019b161537e12daa17a41f3fe920a08d04eaf136ee130170e515e3174002d712006201d514150189360b89316c3e042301c821070100556401f800e1fa23013309ea410589e3f835ee13050100b852119c246e21f200c0893080ce521040801f4311c51200615501c41301
cb108ae2183aee13d0b904431039074712004d1900002d0594120201bb178b4208344b1cc0084d4f0000f05a10654d9548ebf0fff2f002ebf4ebf0443aebf004ebf0030005eff4110d1103eff42309e4f701ebf0f6f13d056968e7f40501283e025418ebf04110dffc05010501390d23019be3f8bd3a4100020055411103
d7ef3f419a99b201d13f414ee8f3a03c40e6f5b90490c107ff50182d4454fb2109f4c2014100174202750a0000f760750cf40003e46202770006feec0201750bf401950df9072d420102f702f20204e2fd01070e1209122a13038011df000040fe164201047576f6f06020e8f3e03f054613530575230051192242010630
18e62018801243116801030208563e0401049512039b16056801db0203c206fe0942010761f2c31408cb10f30000020962e2c210853e04c705a400307b14bfae47e17a843fe9f2024ac20602670002e413d71202fe00f2d61305dd11d712066210004bfe9d420810a104e8f3d8af085dfea90d0100154202740500b5600b
0180b90040fe6e220171740b00782864010202700b01ae23010900c09228039e270142a9242406029b16cd279a1706c822089a17d72fe925019b161537e12daa17a41f3fe920a08d04eaf136ee130170e515e3174002d712006201d514150189360b89316c3e042301c821070100556401f800e1fa23013309ea410589e3
f835ee13050100b852119c246e21f200c0893080ce521040801f4311c51200615501c41301cb108ae2183aee13d0b904431039074712004d1900002d0594120201bb178b4208344b1cc0084d4f0000f05a10654d9548ebf0fff2f002ebf4ebf0443aebf004ebf0030005eff4110d1103eff42309e4f701ebf0f6f13d0569
68e7f40501283e025418ebf04110dffc05010501390d23019be3f87d3a410002005541fe1102efd73f4199b102d13f41fff35961442bd8ac3ce940e6f5b9049cc107503394bfc29ec06d04c03e0317fe4202750a000060750cfef40003e462020006feaeec0201750bf4010df9072d52420102f702f20204fd01070e12fc
09122a13038011000040dbfe1642010475f6f060206ee8f3e03f05461305752300ca511922420106301820188012dc431168010302093e0401046a9512039b160568010203c2065dfe9b11020761c31408cb105ef30000020962c210853e04fcc702420255307b14ae47afe17a843fe9f202c2060292670002e413d71202
fe00d61305fcdd11d71206621000fe9df2420810a104e8f3d83f419aeab205fda90598b204010015aa4202740500600b0180ed10408dfe6e2201740b0078286401027302700b01eaf10900c0922815039e2701a9242406029b16cd27429a1706c8229a17d72fe925019b16201537e12daa171f3fe920a08d04eaf18536ee
1301e515e3174002d71200ab6201d5140189360b89316c383e042301c8210100556401f80050e1fa23013309410589e3f835ee13c705010052119c246e21f20075c0893080521040801f4311aec512006101c41301cb108a82e2183aee134824431039074712006e4d1900000594120201bb17e18b42083445ba0e4d4f00
00f0005a10654d9548ebf0fff2f005ebf4ebf0441aebf004ebf00700f6f1f2f1110d1103eff42309e4f701ebf0f6f13d05d568e7f406ebf0303e02541840ebf06401e2f959015901390902ebf0a823010501f6f19be3f887410002f7005541e8f3d83f416656b902b63faf04e8b705c6c005aab60850360b1f8902748c00
607af6f120e8f3e03f0580d300b740fe1b890101752300604a031d15890102fa060d13538901f30370f6f1f6f1f200c06277080080031040a233ebf0fba00debf0620000a326eeebf093754cfc00620a0053802e0f10ca06818c01090f1035900d131689010475fb0103175a951305191cfe388d0103f6f1ae410101030a
c91501d21605550bd3160cd316108d0102d216ad04fa110206e506fe8b1000970207611824082020d211024d096710fe873e04eaf1918902df55321cc7714a208c3fb0492f5b26e8f36c24e03f0310e0a2f2f0efd3043a220a22005b26fe2a0a2201962c02962c0396272c22a5043221858904eaf14d43247bbf14ae47e1
7a846c23016540e0fb0140019023740efc004cf0119f24740f1835d027848d04b2eaf12b4323350d001a8d01014cc816ff1703a00204eaf149432351013a25382740021389010b4912b8a33152102b230062012a24018abc360f3221a44208c2114a3cfcd0f2f0e7f42730af1072eaf10a0255c019230020250320206c3e
04e2590755640f760f880f0000896ae3f845e1340102120202491f9300400d13fa1711e1120d4b01ca20208a3728604323d304000016d54601009612009c194300951348181afb41fa1200d211f6f10a8f221903db121f52018bdb28fc21ac0708c800df4f1b17f0a915045e3551330500415ecb055a5f6c5fbb5735517c
35415b40dc40a55ff14fc95f3551450532cf4f4c3b05fe3200724101d210fefe3249015b63bd3069574441011c5e07387c3539098c37000094e3f85e11944a3c8e20279525bc6c228b270786ce66fe6a8d047b6f8d6fe3f895e0e3f843124b336c243c7f0000210d335a72f3bf5d01e9f26276172008f4343a222c220632
2117307b361a21006100dcf69548ebf0fff2f005ebf4ebf0441aebf004ebf00700f6f1f2f1110d1103eff42309e4f701ebf0f6f13d05d568e7f406ebf0303e02541840ebf06401e2f959015901390902ebf0a823010501f6f19be3f87c410002f7005541e8f3d83f41ccf6b902d03faf04e83f4166e2cb02c6c005b600cb
03b63f50aa360b1a8902748c0060f6f120bee8f3e03f05fe1f890101ad742300600aebf075151162df0200060380af0040fea515890102fa06271353890103f970f6f1f6f1f200c06204bb0080031040a233ebf0a07d0debf0620000a326ebf0f793754c1f110a00802e542910ca06818c010929109027138d1689010475
fb010318951205381d1203187810000303f6f14101d701030bc81501d116050caad216108d0102d11604ef1102f506e506fe8a1000020761b20d24081520191102096610fee9873e04eaf191890255321c1bc7713f208c3f3e2f5026e8f3566124e03f0310e0f2f0efaf04542f22ff12005026feff12018b2ca5028b2c03
8b27212204272185f48904eaf14d38247b14ae47b7e17a8461230140e0fb018c40018523740efc00e511942474490f0d35c527848d04eaf12b3823cc350df3020301c716f41703a0140204eaf1493823012f252d274002851389010b481298315110202300ab62011f2401b1360f2721a40a4208383c3ffcf2f0e7f41c30
ae105d72eaf10a02c00e23001525250315206c3e04590755640f760f8e880f000089e3f8f1213f310143001b2e12481f2a10ef1711e0122a024b0115208a2c28603823af045b0000c54601009512009b19444300941301b119eb41ef1200d111caf6f10a842203da120f52018b20d0286b44c107cf4f9d17f0a815f44e00
25513305315ecb054a5f5c5fab572551007135315bcc40955fe14fb95f255145053132bf4f3b05f33200724101191025fef332014b63b230694c444101e11c5e0771353909813700009450e3f85d113f3c8320278a25bc61221a802707be66fe6a8d046b6f7d6f82e3f895e3f84212403361242c7f00370021334a72f3bf
5d01e9f22052760c20e9342f2221220627210c300070360f216100dcf69548ebf0fff2f004ebf4ebf04444ebf0f6f1050800f0f3110d03eff4a42309e4f7010204eaf102ebf0686ae7f406ebf0303e025418ebf0006401e2f95901590139094d0123010503d700009be3f8a8410002007b5541e8f3d83f41ccb902fbdc3f
af04e83f419a99e2cc01c9c005b600cb03b93f50aa360b1a4a02744d00600b0120bee8f3e03f05fe294a01014d742300600bebf014120a8d01fd7515116202000603802eaf0040fe154a0102fa063113b5554a0103ca06754c29110a5700802e3310814d01093310fb700de7f40a02c0a21dfaebf0a07211620000a310ee
ebf09341339112c33f901a3014164a010475fb010318a112290527120318248d01030b0141015701030cd41501dd16058b116b0302dd16048b110206e506bdfe6d10000207610f24082c1720221102098710fef112e6121623010a01f401030e08dd11f6f1a70a00873e04eaf1b24a02556f321cc7716b208c3f6a2fa47c
265b233f04150310e0f2f0efc8af045b220122007c262c2202014ab72c03b7273b3812711a237f119113ebf07c268a1332cc02e20090123113844a04eaf12b6423350df302330301d316f61703858d04eaf1fdc164247b14ae47e17aad8494230140e0fb01400136324a02700b015d01f200f2296e3339a405356e3590fe
2a0f12963a5d177f160200a322119387100390fe3d2323223e021911fa33403352f6360100460f43042921a04208c5466423015b25360c01220b74b942fc0422230062012124010a6f460f2921a49504eaf10e122d3b51fcf2f0e7f411220017250317200969d415ebf01c5e07450539094249a594e3f833944faf2027b6
25bcb49422ac27071e56fe6c4a04088aebf0343e02556401cf41e2f907104554800f6553940589e3f837122d30ab010111220117250217208ab25828606423af040000ca56014500a11200a7190700a01301bd1924f051f11200dd1159010ab0223123061462018b1d387c31ac07c800d45f42a917f0b415f95e2a613305
91376d08cb054f6f616357c73372190101f8223e2713010005a3318c112716abe474410060721175f06104f3e4031412de3406e40490002c2411072a614505366bd1509a6fe65f906b6b63612a618b4532c45f3b050f524a027241012210fe9b7201a173907040b7516751eaf17c8a6f40755240913372199421d163fb01
db622ce16260fd72eb62c051f462c0510474f6f024f362fd60905d7f62620e5b38112100610043469548ebf0fff2f005ebf4ebf0441aebf004ebf00900f6f1f2f1110d1103eff42309e4f701ebf0f6f13d056968e7f4f6f12c3e025418ebf02114dffcf6f145053d0502ebf02301ea05019be3f87441000200557d41e8f3
e83f419a99b601abe13fab04f0b305c1bc05e0aeb305b13f50360b1a8902746a8c0060f6f120be0505fef0026301742300fa0d5d010202bd06eb754c12108141012d0000ab40818c01093e1080ab0040aa091303101dd007101589010434cf064a1316890105751111ff04dde0071403030d3e0401055d0c8d040a011089
0106e106bdfe461000020761bd14089ac5100a89010962bc10af11034101a51795120e08a51105010aef023b0304f11f0a00853e04eaf1fd8d890255327b14ae476fe17a843fe9f20240e6f5aa8c0102222336890270f6f130beebf0f200c0a223ebf0a0b913ebf03224a43fa3af11934e322690fe2a0b125b2a1769215e
9b11620200a3d11193d7103590d01302a720fe848904eaf1e83d10a701350d00a51102028032341040da149b1602a48d04eaf191262c23ff04e9f2fcf2f0e7f40ffa801272eaf10a02c0fea0100204eaf13a21a80001232521274002866d21020b5b226d216420d01300ab6201cf14017c316c3e04060e5d240100556401
6401e2f99231909231800f0303f6f189e3f82b2404570100428d01029b1111a01c140b2b9f1203a5110bfa22fb17bf122500c51501c5105522025b22f6f1de642062100080ff0040a1691bebf05b220e6123801f3e102d922301fe8a2028602c23ab04db0000884601007f12007514f7011236057e13018519ae41db1299
009b11f6f10a00ef27d24201018bc0284121a807c400924f8717061100b24fae41e8413305f44ec7050d5f1f5f000017e8413c35f44b8f40585fa44f7c5fc4e841450532824f3b0529320072944101d110fe2932010e637d306984890441011c5e073c3539094c3700eb0094e3f833cc2f000010bf2700321cc7718260bc
683a222322af12078166fe6a8d04282e6f406fe3f895e3f8536a673a236cee6febf021330d72f3bf602140e9f21576bc101f342322d11206d711a16b0204ab6fbd6fe3f888e3f807006a6a5f5001000048ebf0fcebf0df27002d0002e9f29bc797711529ebf0ff0c00e2f901fefdf4000029000df03f577c4f04e2f90ee7
f446ebf0ff9ce3bc296b0a0000dd0beff0d60023ebf0a4487fcd29760b00004f3f02564b0000044700c55d006c6106ed6c4700310c1a010000447b002b67010bbd29328100f54d3f0247ebf08416bd29cd7f81005c095001f2f164c97fcd29db1500001dfef0daac03ecb300f817b80944d6afcd29151ab8099cd70032f9
1c2400bb062ce4cd295bef1e0000f9bb0694eccd7f29542100000503aa05ffacedcd2959240000fd7d15160cefcd29d6270700001715125fc201000028ebf08eeff0a8f9ffe4f7f7f115e7f43febf034ff40d229b30900004deeebf05200c9ebf074e3bcbf29000a000011ebf0402b0044ebf06427001e3d002e0300570f
690f7b0f8d0f9f0fb10fc30fd50f00e70ff90f0b1f1d1f2f1f411f531f651ffa771f1eebf004e0bc29edef2a0000e8ebf05300140078100520ebf014dcff0406f515ebf0fff2f002010000e150e8f3faf4f1f2dcff0000f041bf0f0f340fe4f7f6f1eaf146e7f47503ebf044ebf00100546501004d02f1f2790f0b038a0d
e0fb6101eaf1dd686d060000207102541842ebf008420dbd04e6f5520192e3f8fd835e0255460c39e044ff08fb184046ec34b1ffc4a3680940468fc7bfe3f1783cbe3f1815bfff460a8542a15028a4813f2a165204421f541f661fe607ff3f03000400009bec04eaf16591001340e6f59c1df03fae1d38a3180105eb02cf
03105e01e3026e52010104164e010475c0001960c401e9f205fee112b002eb124d05f11205756100fb1965ec04151bebf084c5076cdffc35213521b0e709c001610186100005ebf006aaebf007cc0409ebf00aebf00baaebf00cebf00debf00eebf00f54ebf0e11111ebf012ebf013ebf04914ebf4f11117ebf0cb0119eb
f0411afc04e6f588210310520147fa06003c15d8248821e327e305d824ac21e32744b005d8241ce02a7021d42825e02a447421d4282ee02a7821d42837e02a407c21d428c011e327cf05d82449e02a448421d42852e02a8821d4285be02a448c21d42864e02a9021d4286de02a449421d42876e02a9821d4287fe02a049c
21d42888e02ae111d4289511e32744a421d4289ae02aa821d428a3e02a44ac21d428ace02ab021d428b5e02a44eef1d428bee02af111d428c7e02a44bc21d428d0e02acb01d428d9e02a44c421d428e2e02ac821d428ebe02675c9e0088af7f00200503521189421942152011133ebf0ff518821631134ebf00c61ac2111
38ebf08c196136311139ebf02661533111313aebf033617031113bebf04061c68d31113eebf04d61c011113f88ebf05a61c73111c011c011e431113141ebf0746101411142ebf08161461e411143ebf08e613b411165018c650158411145ebf0a8617541118859015901924111e321e3219511111148ebf0cf61cc4111c7
31c731e94163114aebf0e9610651114bebf08cf6612351114cebf00371405111314debf010715d51114eebf01d71467a51114febf02a71975111faf10cfaf1b4511151ebf04471d151bd4500577fe0fbe32152018421650c2c43520100b021f2f174217c0f8807e4f7d535b80502702128c507a045e6f570214435602df0
8911e6f5a8619911ac703d0affd7a3d83f401016f79f3cb5c6e43f7461ebf0e8af3f419a994a81c93e85d8164785b93fd21a0338223c15a421080310761aeaf1a0e008cb01dc2152041c5202aa860800a4ad08bc2182860ad533fe9b0201c3012d25cf01196100c804fc16e7f4cf01cf09642f7a23782102cc2f55c001cf
61e72f031061015597000a3c70215597273c74215597443c7821005597613c7c2155977e3c842155979b3c10cf015593e373e8f35cc5033c1fe6f5dbe83f4983e13faf7fffff04229f762f675e048c21cb01c804abaf280d47db51e6f5795e0254842181a10081a1520298219821e30278217821b002487031703144322f
10b46132301db4007e32ac21ac219b32fe75d532eef1eef1c2f232b48a189c21d8a0fc14284006e081010154b1e30560bbde8374b31861355a61d8a0e8fd9b0470b21fb2ff020060267b344531ff31353733452d4345ff44362d343542352dff423532422d383335ff45324434433734438f337d00fe54b19b3560bbf071
3f70b7d53560b98019c46fb800f23582bf72b1db514435f7847da1f11180f1117e3254259b3236313631cf021dc08bc4d53281616135e111c8002244ff9e92f7f41145a77e7f109d0fe127ca7182a4009021cf61c80420b1e2f990212c451e9f847faf842999e3f820b103103f8498afbc4134333fd1c33e85f0803e85dc
87eaf121d139a52dde4983a96045df57dee3052dd55fa3e73f3dde01bf92df1ed4b005b3de81ddd4df60d53844352dd5e081ffffd7478e7663001e045adb613539ee53ec59e75a605adb387e352dd5acb1ffffc748ef5aef0860d59b35b3dbe1ceefe0ef60d5cf050070df5c8489df58ddd535f6df57fc17ef0060d5f235
bfee8def9fef1fd30f4502fe1cdcffeeff00006e0ad8f78f099f04eecf00dea9dac836310310e081ab05005c0d980139a5a40fb60f7998d30fe50f00ebd8021f141fb398311f4318b6839801606135601f431fed988f1fff61a31f089a36be1fa11e700ed4df7ff17f710f4298a2aadac813b1c3e747e09857fb02588805
e5805ad4532139a55f2541ec00762f882e0a35a12fb32fc52f5321eed500e32ff52f073fcac31083cf618874372300b681997909d15fafbb7d7c059575d7750099a11fc1a5a4700943b11285dd391a8f4c8ef5333fa03c67611ff9902647ff50182d4454fb2109146761e8509d7998262eda58882c3fa701006c65d499a1
24bbb25520a281e9c9c235e9397c0589a64ea791418a65d8145131d7536377848b799840eb4b2548d16399a1633f753fff0dd100923f9e3fb03fc23fd43fe63ff83f0a4f001c4f2e4f404f524f644f764f884f9a4f00ac4fbe4fd04fe24ff44f065f185f2a54088b91355f475fff6c01645f705f825f00945fa65fb85fca
5fdc5fee5f006f126f00246f366f486f5a6f6c6f7e6f906fa26f00b46fc66fd86fea6ffc64a891077f197f01ffdba1367f427f547f667f787f8a7ff09c7f2a3914f25bf139dc63b3a7bf54a8ca78959398dc786a7f6300dcc1cf07c0ef7f00018f57f5672e2c8f3e8f508f628f748f08868f988faa8f55949ffd6309d118
2102dd8c09773e19d1089f149f39278401003495182f2a2f1cac7c056f9fd997cb7d29e864be63b8502caba065d819b1a28cf00168d566d7a2c2a4a8d8175889f35c095ad70084ebd81189f384d9c968d269a2bccec430cfdbc70e00a8d896c1cec0dcc600a1840109d1d5c18010a42dcd09d1b7e5780f8a033faf55000e
b055af67af79af30d875b8efc3eed500fdcfe8ca3b25d6cfe8ca74e54bdf245a08fae1abafbdafff0601daafe6aff8af000abf1cbf2ebf40bf52bf64bf76bf88bf009abfacbfbebfd0bfe2bff4bf06cf18cf002acf3ccf4ecf60cf72cf84cf96cfa8cf00bacfcccf7adff0cf29df14dfe9ff38df80bfff5cdf310f80de14
21d581dd8c0700773e17a1c4dfd0df8517f8d1349f469f50589f2eefd49f383ae81085c93d3f013f7cece0e1db25ecef982337f19925fd1244fb436166654c610774746503f201113091ed1100e4283b292c95a9e9946ff8237a1e30907f102700321cc771122013bc3f2c92f8d1421a3807e100e0ff8e835707313ec84e
ff8289834cfdfd8eb21c00a18e030000340da7c2116ef90091d191d182ff94f77af19eff7f11b4ff0062076306d9ff1209c72c060f3d1ca923002d0f0f3e500fbd283d3b7ef5b72f245a2c43f195df000b495e0da50fb70f00dfdfdb080ca302e217af031f3091151f54323f4b15f01085a94b15e0108501995d1d8bef9d
efd9e8711ff6ef08ff00f34f2cff3eff50ff62ff74ff792f98ff00aaff763fc52f935f6043ef2fbd5f634820270f573ffe564b3fa45e47c5a0d0a100f101e481e18484a1bad153632475d58100cc3fd83d84a1f105f0df02ef14ef635afe374f5540bb9c165c87ff25f63f400816f73cffb5c6e43f40d248c04f37af26ea
42171874da541f022c9203dfe29345c64f92438f41cb95089b4c9342837608b5e2e055c2e417574ad3e501e501659044f10138bd6740c9e9a465f109645f8fd3545183495800d0a17f90bad1a1311583934523840f41002e87cb952384c2312e87e05523841151082e87cd1523840f2b8a2e652384c761002e8758552384
9d11bf8771252384577108bf83bc630b535cbd63d0a1159f5be3066643e13f886fcea3bad10f41c2312011519e81c76157719d116748a4bad1b8ea4f475a6c630000c94958790248a2541d512e612e618c161156545512e0522edc94cd122fe9942e62395184395158521303a4712217e5b37215841da41292b490489e81
b190c9e4280d40d5e101012da1737539abd3e3304da32e651921b190e8fdd6e449a2fe385460267b35453843ff443642332d413139ff442d344132322d38ff3243312d45354245ff3935364242324534c77d00fe2da1712539abf03f3849a7b37337ab8019c448a81295405baf4ba1a191cd15d074b861163db4069e8100
1b4ab4c762c211c211577183001d64b49d1122222e652f24a8ff478407ac73ee4785ff999ef0d15190f370205154b86fca6ff07f8352aa4958ec914a0371cf2c759833142a7f05691010d5e4dab19345e6b5d02c7dffbf11cc00737528cf3acf4ccfdab1e0556acf7ccf028ecf718ed44785a7b4395148590f41800f49fb
7f525391d1f1011d514a9599f049583951037119739abc4134053363d1c35b48cbef43d3934551de20664c71df83d6737551d5d11a7562dd01bfb6df42d4e055d7dea5ddf8df84d560cd1551d5b4cc4a16a856f0bf7cdd002e655dee3e6eef567cdd585551d5eeb3c1ca6cef7eef84d5712551d59d361fd069039de3f2ef
04ff84d500f10594df331bb4df8fe6e9a51aef7bfc003bef84d51295e3eeb1efc3ef43d399958026fe000f120f9f3341d10111a13c0400546272695451389fd83f7177be11f83900db71a7b4ef792b45234df36fddd53178ae6e44a03c403e6c903417507f182d4454fb210935118abe109d7078266afabac9b4ce01002c
52be11004758220f4ff50bceb5785f01552e608e5f59373516b35fec573318109f33af11710f830fff0ea1a00fac0f00be0fd00fe20ff40f061f181f2a1f3c1f004e1f601f721f841f961fa81fba1fcc1f00de1ff01f022f142f262f44246481432f02552fff5961722f7e2f902fa22fb42f00c62fd82fea2ffc2f0e3f20
3f323f443f00563f683f7a3f8c3f9e3fb03fc23fd43f00e63ff83f1644c995194f6f6c1ba1444f00504f624f744f864f984faa4f62e9bec2fec2f139dc63b3bf54a8f4d848a36398ea486a6300dc0fc1cf07c0fd4f0f5fbec5eebe003a5f4c5f5e5f705f825f945fa65fb85f4155a26fe9539e819fb1eb5c09850e00d181
166f226f8d87357142659fbfb1bf402a7cceb57d6fe767d946e864ea728e8a7188503a7ba064782781c85001286775657704d2a48b7817c55362a606d6fa00846a6862b1c8502f8967720169b08c7e9f499ec99636d424803286000e7135719bb193a320723b9dd29511df2423d74d7f551c80637f557387807f00e0997d
8efd936d650baff69a0885e49f80f69a78b559af044a2b81b97fcb7fff0041d1e87ff47f068f188f2a8f3c8f4e8f00608f728f848f968fa88fba8fcc8fde8f00f08f029f149f269f389f4a9f5c9f6e9f00809f929fa49fb69fc89fda9f88affe9f0037af22aff7cf46afcdcf6aaf3fdf8eae08fab198e1eb5c07b7ae2571
d2afdeaf0096e7faa94a6f5c6f6e6f44bf185e67b50036f636ef8abceeb1d965fabf667345c1f86775d0b155c8436166654cff6174746544656361116611c2d96112711c0bb729b94175cab7b9941ab82388ee127010275f00321cc77125f0bc5c00103c6006b161c56821341b77d5e119b9006821682190cfa2c78cc1ac
cf8de1c2cf0070d7cef8e9cf22d7b7fc14df4bec99f3003bddfdff5ddfacf92d0b8cc5a7ff1cb6f142efa815b10eb06961a8d9ffbfff7840be33af172fb2cf2c98eb5112a0af06b1010bb7ae1141bcdfc8dff0af31751a738010b2257f11ef127123ef220fcf45f02a1e55a9cf45e01e55996bed99bf00abbfe7b87fef04
cf16cf062f3acf4ccf005ecf70cf82cf69ffa6cfb8cf6b7fb5ff00a62f7313dfffd02f761835dfb12a0c3b5c3b0cb42f000047c15013fcd400f251ef544531c8a1663332453b01df0f00eb0d4531ffd5feaf10bf22bf762a4a1fff55402cee796a8dc9ff0440401016f73cb5ffc6e43f40c5b3a29127806ff450e82c43e4
62ef41720103edb2a525d91fa423a211d965ae1c04a522964608c3b213e5d0b42a27e1b52501f3d1653b64ffd138d037d7b920b735ffd9772f3cf36b2183df38b8a140c8506f71eb512853a5253654153e5a04d9653654163e5a13e53654d0b14157403bd53654d63141573b053654193e5a446b2536541b3e5a61f5e454
1a3e5684cf332a235cd0336831286f4531e86d3ff263e13f9b3fffff8535805a517751d0b1d631ce510861eb5167e02f14c8a1fd1fdd3a7f330000c90adf38792f125430213b013b019ae6482426672513e22eef643bd22ffc64003b024c214c216b226831683161f225b530c6425a515a51b8a100b4a228b5716cc460d7
b42840e3b1010140718086454c7be1b360733b052cf1c460e8f1fdaa345c724b2460267b44ff394445393246442dff364632412d344646ff452d383031372d36ff37423931324132423f3843437d00fe407161f5c64c7bf03f5c77c6434a7b801901c45b783b726b7f7d74b4613bd5e34400cb31775177519462eb51eb51
ce51d4e20cd5e10861001d7784eb5184023b05fe910439ec8495d4e41fff40924bfaf6a4551383ba704524cb3fdd3f035f34b2aa28c688ff611641c23f459841e53e4e4105d0e0e3b4ed81a525f985c43f4d00129f249c86453b9f4d9f5f9fed8113e5087d9f8f9fa19f713bf42211d251ba84004c21c589221122190e5f
46233ef1ffd1083021b8a1c8a199c6884c2116412c435fa4bc41343376a1c36e1800d9bf56a3a52564ae791c84af96a686451064a5c793324075adbfc9af55a413e500eaaeb8ad0bbf97a53bd5eaab44466d1606bb26f0bf8fad3b0570be513e0236108fad6b2564a50193d47fbf91bf97a5fc61f564a5a60d74da40a701
ee05cf17cf97a5ffd5a7af41e4c0af008fadfc752dbf8ecc4ebf97a51e85f6be00c4bfd6bf56a3ac6539ce13df25dfd053081c018641b40c04187689356b214b6f00eb0fca27e1810b19ee41ba8402593e15b0361d064fc59fe325a03c710d90fe47e750182d4454fb2129094a01e1809dc928267dcacd9902c79e013f22
e18113175222221f08eb04e1858b2f553b00a12f28374a06c62f40263746e8d0535a5184df96dfff225100b3dfbfdfd1dfe3dff5df07ef19ef2bef003def4fef61ef73ef85efffffa9efbbef00cdefdfeff1ef03ff15ff27ff39ff57f408775156ff68ffff6c3185ff91ffa3ff00b5ffc7ffd9ffebfffdff0f0f210f330f
00450f570fd11f7b0f8d0f9f0fb10fc30f00d50fe70ff90f0b1f2914b941281f3a1f01ff2e71571f631f751f871f991fab1ff0bd1fcf194262d5c1263577e2a74b15b8eb18b633a8fd18667fe50461b57708c0102f00222fd195019e4d2f5f2f712f832f952f08a72fb92fcb2f55b53fd053bd81b28102fe2c090e3ee451
293f353fd387ed61005535b28fc48f3d4ce185903ffa37ec1652fb34f4855e8458504d4ba07748443a518640017a4578474952a49e48b0f62186407576e9ca00847d381108834342597a4269c35c916f9b6edc66002b74375045562141ed61ae81a6733342204e6de56524af36a7604f552f50764f01558657934ff36990
5e107325b51e7f00097a1b55f76f097a8b856c7f171a688104cc4fde4fff54a1fb4f075f195f2b5f003d5f4f5f615f735f855f975fa95fbb5f00cd5fdf5ff15f036f156f276f396f4b6f005d6f6f6f816f936fa56fb76fc96fdb6f00ed6f9b7f117f4a7f357f0aaf597fe09f487d7f52afa17e1aa8b4fe2c070e3e003841
e57ff17fa9b70d895d3f6f3f813f00578f2b2e7a8549c649bf9d8c0191cf25d00d9f794358917a451e659b4361ff66654c6174746544ff6563616657686970477065642492cf21ab911c1e87283c89a795ca89942d88239bbeab907f102700321cc7713fc041bc6fd02340198174957bf1342e4700efb12c897bf17bf1a3
9fb5979f91bf9f00a0b1d59f83a75ed6fa9f33a9d1cc27af005ebcb3c34ead17df70afc6c947db9f95c4c1cf2f864202882881218030b0ff2253a89f424a986bbf79392b6acb67ba711b14b37f19810b0e3e0dc6afd8af008f0041482d432382384f24bf87c136bf3cdfaae215f0d915a9e215e0d91599007ebdac8fbe8f
fa8892bf179f299f20ff004d9f5f9f719f839f959f83cfb99fcb9f007e4fcfcfc0ff8de3f9cfeaff90e848af70cbfa260b55dcceff000047ecb40012b1053102345f01db71edb3451555d100f9df05ed5f0112b5118f238f358f90fafe64ef5540d891b50bfbff36eb3f40c0055bb0ff055bd03f40ee0f328754769862b9
461374bf8cf303000092bff5f3efbef3bce1e6f5c8ecbff282b01608d68207d5e38444f7f485011206b165224412b138ea07ea89d1051012b991ff56c385f183f908f1418640011dcbd44223bff55024beb15b27e6f50250241f582a07d55024ea815b2719e522502421582a55d5502422582a85f50050242d41ec277bc5
502426c1ec23e90362fe035cea0367cdfa07e83f53b31be13fb50fffffefb15721beb1409121ea81cb21e82126c12d416749e470db7117fff70a99030000c9f908057949e2544af155d155d1adb63ef62481f507d22e094419e22f164455d28066f166f185f2e1457bc23885e012152c4a44f14100b4bcf80fdb33ea841b
2840f68101015a41e6f5664b60f4837a4355d546c1de30e8fdf784fc764265f460267b323235ff42343338352d4234ff34412d343541362dff423946412d394243ff33454144373035418f337d00fe5a417bc5664bf0713f7647e013644b8019c47548805542854f9744ce3119e5fd14e50116006a54cb21c5d2c6d1e821
eeb2efb126c1c07a32572131e19ed255d5abd47b36ff4a490595fa459dba7fcad4cb835f88707ef410e50ff70f1d2f06d2aae0581941301125eb59159854b5581e054b80f684080761bff51365ed591d2c6f3e6ce6f500556f676f796f076107d5976fa96fbb6f017155c43ce1ba71d45466f1df593ce1003ce9282f7ff3
58c112b14af15021db71e199e05866f130114613a4bc410b34339071c388e8ec8f7073bff5007e7e93ec9e7fb076e6f57e75e16362b0028f7dbfe37f6f7407d5048ed27d258fc0b17519e5048b50b687e6d5f6f0bf00a97d55d58a8e6b0e1c06a97d85f57e75821b63d4998fab8fb1757bc57e75e43f174b7eb1e4ee1f9f
319f00b17512b5c17f54b4da7fa97d1655478f00a89c688fb1753855109ede8ff08f707300c635539e2daf3faf19735721e6f1cedc01048656a30585f1653f05efe4f746710025e90821d4541c2958e550ed201f8475acf968fef4a03c8bdd9061b7507f182d4454fb21098bd18a46709de3f82641bfec64e16e010059f2
46712de76cf23cef22bb4675a5ff015555d0bbff42078bd6e0ff400760b810197374219eafb0afff3c21cdafd9af00ebaffdaf0fbf21bf33bf9dbf57bf69bf007bbf8dbf19dfb1bfc3bfd5bfe7bff9bf000bcf1dcf2fcf41cf53cf71c4912170cf0282cfff86019fcfabcfbdcfcfcfe1cf00f3cf05df6fdf29df3bdf4ddf
5fdfebef0083df95dfa7dfb9dfcbdfdddfefdf01ef0013ef25ef43e4a9e344efb2ae484171ef807def8fefa1efb3efc5efd7ef3110ecf859156212ef91263577e24bd315b805f8d003a817f866e53f0461b57708c02aff3cff00eb651b6e67ff79ff8bff9dffafffc1ff04d3ffe5ff55cf0f1973cb21cc51180c0109b2ae
5021430f4f0fed579f216f0500cc5fde5f571c4675aa0f1417ac16151429f49f2e9e2850671ba091185421a2023001941592176322a4b818175887138f4603aa00849708118713045c29941269dd2cab3f763ef63645440051205f263b119a01c851c0434d12683d90ff353e7f50777a1f554920901f5500a027ad1f0d49
aa2e2a439a05384f234a00ef55114f234aa555864f31ea8251e61f02f81fff6e71152f212f332f452f572f00692f7b2f8d2f9f2fb12fc32fd52fe72f00f92f0b3f1d3f2f3f413f533f653f773f00893f9b3fad3fbf3fd13fe33ff53f074f00b54f2b4f644f4f4f247f734ffa6f974f246c7fbb4e23c284180c07e44e5211
00ff4f0b5fc3872759770f890f9b0f715f0045fe94556396638fb75c1b61e9f5276fe09313726194153ee38466436166ff654c617474654578ff74726145737072650773736f3e62e9f1c561b3a13b54085659c165e459944758b671b88bc5607f102700321cc7715a9041bc89a0c36033518e6595c134481700b3a14659
95c195c1bd6fcf67b961d96f00ba81ef6f9d7778a6147f4d79ec9c417f00788cce93687d32af8a7fe19962abb965c4dc9f4956421c5842513b5039b8fff7c908469f4eaa983f54eb80408e101801471116d04f000bce7e0de07ff27f1a5f005b1847133d52521f3e8fa291508f57afaafce5f05df5a9fce5e05df5990098
8dc65fd85f1468ac8f316f436f3bcf00676f796f8b6f9d6faf6f9e9fd36fe56f00981fea9fdbcfa8b314af05dfabb8627f70e6ca41db70ace9cf0000477bd0012529841f011c047ad1f5419bd35fe50070a114bf20bd7ad12c852b5f3d5f4f5ffcabca7fbf5540333d0fc5ff6c8d044040d0055bffb0055bd03f404a9f9f
f4499ff4fb7d8861e3eb048f8fa8c2031a62dac50ecfd9c3d7b11001d5e3bcdac2cbe608f0524085fd54945fc70e6501208165a9c42c81388005e70469ecd52c89accf7193a0c1830014e80b218a100e1118015df3dac56bf4012773fa01d56bf404e176f740856bf4112973fa68756bf42a73fa70a56bf4112b73faa0c5
6bf42d73fa96956bf4112c73f604e319e35c05e39dd15d0fb67ad1e83faeb3e13fd0dfff01ff9dd10e118ff104e1c9f1e6f10301043d0120016764b4f54132cf12eab4d3570000c914e87964b25465c14070a170a1c78659c69cc540822e24148268722f311470a281c181c1a0c213904b1496925255fbe21565140b2100
65b4d7c80ff603046428401061030101751101d5811b0e63951370a58c6191f900e8fddfd4911280c460ff267b304643344533ff30312d373435432dff343137302d383841ff322d333837433942ff3744313242437d0031fe75119695811bf03f9117fbe30e7f1b8019c490187012a01fb21490e901687518f400e11685
24e6f100611b92240301f9a63d01001dac24f02001b9a270a5c6a4c742cc14ffdbbe1740aee8e0101fc61e55c0709dc400ef12ef4438ff3f82aafb2834118fb14774e509986e8573ee0542f010642231dac5022e354874ed473f593c01d5703f823f40943f22314085b23fc43fd63f7170940057b1eaf1ef2481c1fa2957
b157b943ff409ec373912c8165c16bf1f54199fb28f881c18fb161e3abbc41343302ab41c3a3b8066f8b43dac5994eaebc80b94fcb4601d5994564e064e3aa4dbf00fe4f8a4440851f5eed4d405fcc456875309945fc3ca2b6f0c6f0bfc44d70a580a55e86de37d6c44da0c599453633dba0b45fc65fcc45969599457776
61f70099bf4b6fd7562c85dc4f6e84f54fc44d003125625fc36c835fcc4553252b6ef95f000b6f8b43e1056e6e487f5a7f220372f10401d1e9ac04b9d2bad9a0c1800f20bf00ffc7614140b923f1ef2437f973b56bbdb03bef255579e85ed4b03ca6ada0fe7c8750182d4454fb2109097fa161409dfec872f19d47024902
fc3e0174c2614148b77d9257bf3d8b046145c0cf5570a0d6cf5dd77fa6fbcf405bd77b8822038ff1b97fcb7fff57f100e87ff47f068f188f2a8f3c8f4e8f608f00728f848f968fa88fba8fcc8fde8ff08f00029f149f269f389f4a9f5c9f6e9f8c940047058f9fb7dca1d1ba9fc69fd89fea9f00fc9f0eaf20af32af44af
56af68af7aaf008caf9eafb0afc2afd4afe6aff8af0abf801cbf2ebf40bf5eb4c9f15dbf6fbfff0063118cbf98bfaabfbcbfcebfe0bff2bff8aa5906420a71263577e24bd315b820c8ebd3a832c866e53f0461b57708c045cf57cf000645363e82cf94cfa6cfb8cfcacfdccf04eecf00df55eadf2203e6f1e72133dc0109
cd7e6bf15edf6adf083781e18ad500e72ff92f72ec6145c5df2fe721c630e429fbbafeb9f85082eba0ace86ff1a2726001afe5ade77ef2a4d3e81758b8e3aa161e7a0084b2d811b8e30477f9afe269f8fcc60f910e11166014006cf07af656e181e1e321db1368e2830d901a15594f6b4795ef5564f0abef5500bbf7c8ef
2819c5fe451381e5531f3e1a0050f52c1f3e1ac025a11f4cba9d2101ff0213ffff894130ff3cff4eff60ff72ff0084ff96ffa8ffbaffccffdefff0ff020f00140f260f380f4a0f5c0f6e0f800f920f00a40fb60fc80fda0fec0ffe0f101f221f00d01f461f7f1f6a1f3f4f8e1f154fb21f24874fd61e2cdd5433dc07cd7e
6de1001a2f262fde57422992dfa4dfb6df8c2f0060ceaf257e667e5fd22c363104d5423fe0aee38d31afe5b5739f36436166ff654c617474654578ff7472614573707265ff73736f5768697070236564593204d1e0311c5327712994dc35ff2994622823d05ee03010bf2700321cc7717c60bc20a470de304e21a935b091
3463e72c61006129b091b091d83fea37d431f43fd551000a4fb84793762f4f68490e7c5c4f935c00f063834d547fa54f0379847bd435fe6fe264264237285d21562091e419ffa900e5d04bbf53105f01fd76b41b33d12de81f0a4e210be94e0dfb4f0d5f352f76e80062e358226def595fc4616b5f797f17c555f066c5a9
17c5e066c599b35d00e12ff32f2f38c75f4c3f5e3f5d9f823f00943fa63fb83fca3fc06fee3f004fb3ef000c7ffd9fca83367f27afcd887d4f08aab863ab927c0baf0000479da02e0044543ad137d49ca11021bda37ab5927100368f428d9ca14755462f582f6a2fcd9afea18f5540f6cc1e2e9cffb91340401016f73c57
b5c6e417c5e8bc8ed8aa5f02ca92033532fc95309ffb93f98123a508059cfc92edb6080b3281e5183481974a2935013b5165cb9447513827b7401f390eb54759ce9f9363c2918336b80426f1b1802f08847fc3fc958dc4a3918898c723a58dc43195ca81e58dc4320895ca56858dc43395ca92758dc49961880cd7c2958d
c43695cab8658dc4350895c626b33bb35c27b3bfa17fdf85b3363ae3e13ff2afffffbfa194c180a391cec1ebc108d199615fd142d167e086841021549f34bad6a30000c90a36b879868254879192719271e256007b96be9581e2bfa1bfa1568294c194c1109272a391a391c292136de4b8626d25b21dc21587e426f100b4
f9980f6c18e31f3428402b31010197e18023a5a3eb2933b7e3927583611be0e8f1fd01b4b3e2a29460267b42ff414134333432342dff333036362d343243ff302d394539452d44ff42373230313739453f4234347d00fe97e1b865c6a3ebf03fb3e71dc3a1eb801901c4b2e892e2c2efd4e40be156853ac43222b116a7f4
08d1001bb4f49961182b622c615fd1001dcef442d1db72fc9275e874934b96b4e62affa047a39d218e319c07e12b71bb9479810cd12ab4a3910035b97981798965cfbc93956147518791c48dc110219936b8a3917da798bc0408f08201c3c588213f6203fc95700ec0d08c900fa20623a57005a2d3e73f02800ebfd50f61
044475f60ec40d171f70a305568570052b31ffffd7bc8e0612a6f0bf9b0d92757c1ea8ae59a6709b0dc2957005efe1ffffc78b1f109d1fa305b865f60be1112f232fa305004755b30f8954cc0f9b0d53f5391f9a2c005a1fa30575f5022ed01fe21f620303e538452e1f3f313f000070926422bf0834bf2d0f5d82aaa438
94c106278a1009989a2b9bb80537009d04cb31fc9500d735841cee3f004e23a5194f2b4f3d4f00cb3144755b4f6d4f7f4f0cd194c123a1020b8c0448e6e0a5c291a2df428f21a7003801628945c1983459c995858d8d5dbfacfc05ab4fa03cc87d909e57507f182d4454fb2109c8718238009d20a8f3517da79bb8a44f01
00969238016a879f62798f5f5b3805e29f01559270f89f7fa7c8761daf7da79d580044d3a393dd4fef4e79c10a5f165f285f003a5f4c5f5e5f705f825f945fa65fb85f00ca5fdc5fee5f006f126f246f366f486f005a6f6c6f7e6f906fae64cec1ad6fbf6f01ffc3a1dc6fe86ffa6f0c7f1e7f307f00427f547f667f787f
8a7f9c7fae7fc07f00d27fe47ff67f088f1a8f2c8f3e8f508f20628f8084ebc17f8f918fff85e1ae8f00ba8fcc8fde8ff08f029f149fa24999d2fee12139dc63b3bf54a8f442980db39854986a6300dc0fc1cf07c0679f799f9a25df3e00a49fb69fc89fda9fec9ffe9f10af22af41550cbf44d308d1903155ac09ef4e00
8dc180af8cafb13780b1aca5903fa23f2094bc3805e7af51b7439de8dccedbc84550a4bba0ceb891c13fd001d1b514cfb7a0c2a4f5b817c4b3cce6f52a8b0084d4a811c4b399c9d1b269001adce8dfb3de33e682e48ec09cc678b10080b140e1a9638ab2a5dd3ce5b73f420702b7bf5586c0cdbfdfbff1bf51e8edc80067
e3d7a575ef60eab3354eef60eae2f520c3ef6e8abff123cf35cfff600152cf005ecf70cf82cf94cfa6cfb8cfcacfdccf00eecf00df12df24df36df48df5adf6cdf007edf90dfa2dfb4dfc6dfd8dfeadffcdf000eef20ef32ef44eff2ef68efa1ef8cef40611fb0ef371fd4efa91ff8ee35c9140211fc07ef4e8fb13cff48
ffca1770f140acafbeafd0afa6ff4cbfb04ae8be4505c9b54f3ff4fc58015715640f2f13f4af01301515bc0b43616665ff4c61747465576574087b02571102111c75f7b339fe052109e59484f823f22e02101027006f321cc7718d30bc3ffe02e270f1427a287ff178f049c941ff63b57eb74398bba81fc1d863907a78b1
062307f30088b43d3183f9d261d261fa0f0c17f60100161ff7212c1fda17db16511f8a19424c007e1fb52c2443a51f8a4ec81f3848b84b48f605324f6e8a360aff70f10bc16e010d1d2f2f2f57ff98b884b37af28fbfa07b2ff8318d2fad4fc325f09a95a90ac325e09a9599d52d030f150f510800e92f6e0f800f6e6fa4
0fb60fc80fda0f00ec0ff43f101f221ff14f404f0e7fdb53006a4f387fde589f1fd24f7976c64f1f7e0547ae703766245ca159a4ad7132f100ce739c85a971475f535dad71692568fff07aff8cffde6ab25f55408f7dff1f9b83e2104040d0ff055bb0055bd03f407f4702be7935f1f2ba27129384e2cc2fdb620357020d
75416f400c730a613475166c0d72fe86082d02507d253a0492674b05015d2165dc6402692138388741091f856929df6fc73302d36183478848c1c7b04b9111f19093440d759e9439a69a34759e943aa69a447d259e943ba69a48359e943ca69a04a9759e943da69ad3659e9494313aa744ec359e943ea69637834c835c38
83b0d07190afc853e153e13f038fff01ffd0714b91c291df91fc9119a136a10470a1943167975432f1656f458ae773570000c9478879975254986100a971a97104368c66cf657d2238c54832412f64b4a972b461b461d362137eb4c0ec328ff52e921531153148c100b4b20a780f29b3410428404d01010101a8b13475b4
bb4b03c8b3a9759431c62cb0e8fd1284c4b2b3646026ff7b30373343343531ff372d383838422d34f73036381fc035322d46ff37314536364344383f3642447d00fea8b1ec35c6b4bbf03fc4b72e93b2bb801901c4c3b8a3b2d3bfe5b41cb148354b9432338116b8c419a1001bc5c436a1183c323d3170a1001ddfc49432
9e31fca975aa3481baceaa4d91ff494181d98665f757070b6670d064338f458f6b9f7a5251aa2ed867b17e8145a78598ab2482a58f0575904d0455d10d7561d54600a78d7adf8cdc3475a3dfb5dfc7df55d1107d25e5dff7df09ef71c6348a5111f10022d4b4612dd98a518a59769fd163c93110692198619e9132f1992e
d8b4617e81be9483a2bc413433dee1c300d658430fbee30d75cceee15ceceffee6203475cce52fe39a80ddedbf31ffbde4007d2552fe20fd73ffffe5483552fbac860cc2262376f0bff7eda975d8feb97e206a76f7edd365cce569d3d2e7fff9fff8ffe5ec35cce569039d36d00369ec6d0f7f0fffe569250fffab2b002f
ff0a0664c595fff60cb6ffffe586c5005e0e2c0f3e0fbee314b5a10e7b1f8d1f08f9134b931a5e04cf72ed79d361b3af00535f327794e17359569122d46a99a655709e5d6e8f2defc325a03c40b97cfd90af2750182d4454fb532109b02194e09d317826cdea0435e92fee01a76294e17b57d3328a5f08702b94e5f36f55
a970097fd447b026802e7f8e77ae2855a3c291ec1ffe1fff008a911b2f272f392f4b2f5d2f6f2f812f00932fa52fb72fc92fdb2fed2f674f113f00233f353f473f593f6b3f7d3f8f3fa13f10bf34df91be3fd03fffd471ed3ff93f000b4f1d4f2f4f414f534f654f774f894f009b4fad4fbf4f396fe34ff54f075f195f00
2b5f3d5f4f5f615f735f9154fc91905f02a25fff96b1bf5fcb5fdd5fef5f016fe0136f256f376939e23d11d0ba618f3fe01fb053681e83526850ff9dcb6e7f4d2308c000786f8a6f39e569deb56fc76fd96feb6f10fd6f0f7f217f337f551d8f55a319a1041ad1667c09002e9e91917f9d7f3bd700c571bd751adf2cdfa5
8c94e5f87f6287a454666384f2ed9eec9850b58ba088df88a291a50001e285e087b192a462069817a203ddb6511a0084e5781111a203aa99e282692bacf9afc4ae0044b693b49f90ad968981c57116d10ec3409b82b6ad4db58cef9ee7c88f55979002de8f55ee97fb8f5bb9f89e78b3b4850086bf71ba3dd55fbf71baf3
c5d4bf7f5a08d0c1349f469fffbce1639f6f9f819f00939fa59fb79fc99fdb9fed9fff9f11af0023af35af47af59af6baf7daf8fafa1af00b3afc5afd7afe9affbaf0dbf1fbf31bf0043bf55bf03cf79bfb2bf9dbf72efc1bf9048efe5bfbaef09ce3e1004667c0700002ea0814dcf59cf110775c9c57fd77f00e97fbfcf
936ee2c5b106b1ff05dc69d1a0377575dfe183c0d1e2851ccddb43ff6166654c61747465ff57657457686970700365648cd2377113e126048cc1a4c9940fe532d99495c823030e13e010bf2700321cc771a500bc20d71011e081c1dcd5e33134968726010094c9e331e3310bef1de707e127ef0801003defebe7491864ef
9de7371c8fefc6fc001913b6ed7d1fd8ef2c19ad1b07e5271fe297c6426ac890c189c03f313cffbc62c0b440a63fda1fe25b5c7eae6671ac011ecf0b000b1cfe0d2eff40ff68cfa9880095838bc2a08f8cffed019effa21f4a6555f09965a94a65e0996599e6fd0014df26df62d8faff7fdf91df863fb5df00c7dfd9dfeb
dffddfe90f21ef33efe68f00351f264ff3235f1f504ff628b0ef314a388c4bbb1c344f000047cbe47af1006d716a74c54143c157e3ad55bb115f2f006b2dc5417af579cf8bcf9dcff63aca2fff554028390d442c6dff0f40401016f73cb5ffc6e43f40279e158d27047cefcbf8ac53dfddfff332010368d22545593f2443
22314c452e3c0425421666083ed2b4854bd4aa375cd525016ef165f4347af138505752d92037557af9f73fbc03eb31835f58599100ee846671a8632545b6640521c1674c4502b66443be6ab485b6646d71c1677f2520b6640481c167bb15b66446be6aeb3500b66452715277e105b664e44152734f536264535c505359e8
5b5ce83f6d831be13f1b5fffff38813d41052120f761f04104814e71887567af2443c1b87d3f5d5aff430000c95f587902af2254b031bb11bb111506a436e73512b4822e6f847f222f7c84bb12cc3184cc31eb32139684e102a0c54662152cb084599100b422480f418352d41b28405ed10101c0814c45cc8b605cd3e083
bb15ac014480e8fd2a54fcdc82cb3460267b323635ff36453230452d4431df36372d34413a904243ff31362d4444324445ff354444453844397d6300fec081e105cc8bf03fdc871c4663ca8b8019c4db88bb82eb8f20fd8434817f2563644b5116d094925183001bdd944e7125022601e44100c11df79452720521bb1511
242f1effcdc8343b884d874f7fb240b3e187c370e834104b5f5d5f836f6af2aa46a87f81da212523bf5598bcf5be5e058d605ed4086da1254579a525bf5d92afa4ac4c4500bbafcdafdfaf6da16d15fdaf0fbf21bf0171bb04a22152713aa4cc3145a9a22100a2298e6fe933be017af1b031b66143c1e19946a8cc31da21
ac539fbc410b3433f6b1c3ee2854dfd6b3254540e4bef92c04cf16c64c45e4b526ad5502f5bdbf49cfd5b46d156ace38cd8bcfc017c57f25e4b547bced263b46f0bf000fcdbb15f0ced14e82460fcdeb35e4b58281a3cfffcf11df17c5e105e4b59c3f36d069039de785df97df0017c57af527cfbcf440cf0fcd7c95adcf
000eeccecf17c59e9576de44df56dfd6b3002c85b9de93efa5ef00a33d414c41342c010404520559eb31cb7f6b2f4a47acb1008b296e613aa48269be25b62d865f70c5acc4583d44a03cf11d90c7f7507f182d4454fb2109ca118aacb09d494826e5ba4db947be0100bf32acb19327c802a22f88fbacb50b4f0155bb1021
4fa847a578484fa845c6f81000a3052104ff16ffffa26133ff3fff0051ff63ff75ff87ff99ffabffbdffcfff00e1fff3ff050f170f290f3b0f4d0f5f0f00710f830f950fa70fb90fd704f761d60f02e80fffec41051f111f231f351f471f00591f6b1f7d1f8f1fa11fb31fc51fd71f00e91ffb1f0d2f1f2f312f432f552f
672f40792f8b2fa924f041a82fba2fffae8100d72fe32ff52f073f193f2b3f3d3ff5c9fcc27255e1d0ba613fe01ff1b06b3836536a38509dcb6e1f7f4d2308c0903fa23f51b50081aecd3fdf3ff13f034f154f274f394f824b4f55355f00a34a3132a17e4c09008e4eb661a94fb54f53a70581d54532af8044afbd5cacb5
105f7a576c367b54ef14057e047850cd5ba0f758ba6178505101fa55f857c962a41e681775532cf58669ea0084fd48117553c26902fa5269437c118fdc7e5c86ab84b76000c566a151b4b12ea12693b352ce7d658548a4bfb6b7e05f55af60f65f55067700136f7389107e908300559e8f898a55a500778f898a0ba5ec8f
972ae8914c6f5e6f01ffd4b17b6f876f996fab6fbd6fcf6f00e16ff36f057f177f297f3b7f4d7f5f7f00717f837f957fa77fb97fcb7fdd7fef7f00018f138f258f378f498f5b8f6d8f1b9f00918fca8fb58f8abfd98f60bffd8fd2bf12219e4728d47e4c078e4eb851659f00719f29d78d99dd4fef4f015fd79fab3e00fa
95c9d6c9cf1dac81a14f458daff953f4d8a1fa5519e5ab43616665ff4c617474655768698f70706564a4a24f412bb11c509e97bc9927b54aa994ad98231bdefe2bb0102700321cc77182bad0bcefe029b09991f4a5fb013400ae576ad1ac99fb01fb0123bf35b71fb1003fbf20d155bf03c761e87cbfb5b74cec00a7bfde
cc2ee3cebd92eff0bf41e9c2eb801fb53cefaf96d2018595a891a190cdff4d6ced74536142b67f9935e72bfefc717e412c7e41369f000b8e4e0d46cf58cf00809fc158ad53a392b85fa4cf02e1b6cf54b7ef6235f05935a96235e059350199fecd2caf3eaf7aa812df97afa9af009b0fcdafdfaff1af03bf15bffedf39bf
004bbffe5f4aef3b1f080374ef651f0b0840c8bf461aa11bd0ec491f1ac3498fc40085418244da115b91fb13c525d0e174ff0080fdda1192c5919fa39fb59f0b1adfffff5540ac703d0ad7a3ffd83f408cec459d732b09f76235e8fafed8f5cf0812010380a23a156e0f391337016115430c043a122b360856a2a6c563a4
bf0774a5250186c165091492c13865276aa9204c2592c90c1fd1d30011837428716142c6c04a46f4bd333a15cb344bd33a446115cb344cd33aa6c5cb344dd33a4494f5cb344ed33ad0e5cb344fd33a040015cb3451d33af6d5cb34e421674304642379235c6523fd11bd4fc32385531be13f302ffffffd11d231ef31400c
41294146416341e421804167c4f4705b91920f722a14230000c974280579c4f254c501d0e1d0e12dd6b90624fc05a6c22e845494f22f9154d0e208e101e101001213ab54f6d2b8955b325915c554716100b437180f5653366aa4284076a10101d5516115c0e15b74a3f553d0e5c1d15950e8fdf83f24f152e00460267b38
38ff3846453838422d35ff4232322d34373139ff2d413033422d3431ff39443830324433301f32467d00fed551f6d5e15be3f03ff1575b33df5b8019c400f058d052006f1264495194f5783460211916e5644641001bf264634169d2046ad1e4221d0c74804119f2d0e526f4ff4ff8dacc761d7e43ffac92542d056c1b4c
0171fd04b7f167416824e1017329b7f100b7f9a33ffe03d3d192c1c50179415b91f1997428e101bb1798bc41340533c071c303086cafa0733a15ae7ec00e0cce7fe0766115ae75e043e73f02be7ebf138f9f74a6c5348e028d558f70e17594f5ae7576a1ffffd7fafe065016f0bfd97dd0e5ba8ee61e971670d97d0015ae
752d61ffffc7c98f10db8fe175f6d5348be14f9f619fe1750092c5f17fd4c40a8fd97d9165778fd89c00988fe175b365409e0e9f209fa073415538839e5daf6faf000070d0d4602f08722f6b7f2b12aae2a894514497c8800998d89bd928057570db7409b13a150015b5c28c2cbf3ebe611557bf69bf7bbf0009b1a6c599
bfabbfbdbf6741d23161110249fc04fc121a290011e04f80ff5f17007671a0f98331d6a49739d3f5cbfd9b2fac3a85e9bfa03c06fd90dcc7507f182d4454fb210906f18a76709d5e1826b81ad928e2bf0100d4027671a8f7ddd2b7ff9dcb7675201f0155d0e0361fbd1706f65b1fbb17dbc8103ff3ef3119cf2bcfffb731
48cf54cf0066cf78cf8acf9ccfaecfc0cfd2cfe4cf00f6cf08df1adf2cdf3edf50df62df74df0086df98dfaadfbcdfcedfecd4fe41ebdf02fddfff01211aef26ef38ef4aef5cef006eef80ef92efa4efb6efc8efdaefecef00feef10ff22ff34ff46ff58ff6aff7cff408effa0ffbef40251bdffcfffffc35100ecfff8ff
0a0f1c0f2e0f400f520fe0b9fcdd221fa139dc63b3bf54e9a880084b239892086a63001fdcc1cf07c0a50fb70fd895001dbee20ff40f061f181f2a1f3c1f4e1f82601f554a2f49734641cea1931c09002dce7941be1fca1fefa7dd21ea15ceaf40e0afd22c7675252f8f27810de81a4e8819480a72f6a7a00c38cf310530
01280f350d37de32a433381702330a661633aa00841228110233d7390f320169584c265ff14e7156c054cc30da3600b621dd217e513b63c822e34d7a55f5af048077f52f55c4300b3f1d3f2f3f8f58002b48a553e125b35f9e5af1a58c5f9e5a402075016facfafd61613f733fff9e7100903f9c3fae3fc03fd23fe43ff6
3f084f001a4f2c4f3e4f504f624f744f864f984f00aa4fbc4fce4fe04ff24f045f165f285f003a5f4c5f5e5f705f825f306fa65fdf5f00ca5f9f8fee5f758f126fe78f366e3271040a914f6c072dcecd217a6f866f089780ae61ea1ffc1f0e2fe46f8a2feebae80afcb5c9f3bf3f327c96719585a27fe86d83ed716e8512
fa7b4361663f654d6f636861b97295814240811cb367f1a93c855f7994c268f92330ae4080102700321c9bc771c8a0bc3f3c82ae6142f8b898bd61b6601a2a8e9ba1ffec9c4dad1f1476f5e76e6966b621449300003400c32778a1c16910e110e1388f4a87348100548f35a16a8f189719968f8fc8897dbc00bc8ff39c5f
b3e38fc5be069f73b8f3bb4834856dbfacfa51486fae610b499e010d5b9f6d9f956fd628c223b862cd2fa0b99f33b1cb9fe8bf01a5f0d805a90a01a5e0d8059913ad417f537f8f780027afac7fbe7fa9dfe27ff47f068f188f002a8f2fbf4e8f608f2ccf7bbf49ef16d300a5bf73ef19d8dd8f0dcfb4e601cf5aee0547e9
e052a4949a119714e8e170610009f3daf5e4e182cf8ecde8e1a795a66ff0b86fca6f19eaedcf55400685ff007a722af73f408cdfec459d7309c3f0b3c39fd4e5f607edf897cef4dd040aaf16e203957248e57cdf47e345d1106fe551dc48e23906086b72e125787494cdd78975019b916517e4a791388073f77f795af5a7
991aef02b30ee1830882f8863105305354c4cb0348e5d90400d9d1e4076fe5d9041301e407e125d9041156e10a83a5d90457e10ae4e5d9041158e10a0ee5d9045ae10a27b5d9041159e10672f387f35c73f30bf1cb1f6c03d31cd3e13f3effffff0bf100e001d9d11301371154117111ab118e11c167d2c47061a0df80fa
22f3000015c982f879d2c254d3d1e4e1e4e19042a6c7d60ae5e1222e922483a22f209f24e4e2efd1efd10ee213b92427b264cd65690215d324863100b445e8d90f64237f7428408b71010100e3216fe5ef2b89730333e4e5cfa16720e3e8fd4df4ff22eed460267bff4543364632394646ff2d373731362d3434ff33372d
424246372dff43333446463230337f414343377d00fee3218c27b5ef2bf03fff276903ed2b800319c4fe28de220e3f2034572183a56486046ef116f3345411001b004430711177a278a1ab11001d1a448e11f8d8a2e4e5e5a486b74261f5ffa6c24e8dd19eacbc0f92720b700be46eff80ffa60fa2dc62aa6948a221b9f1
afe2f59804e994e0ff05b0008b74904148e59c4501b1e2fdb54fc74c6fe5de4ff04f025f209041bb95205f325f445f7101b4c5c1004f615d44efd16849c5c1c5c9b10f0ce32004b1a791d3d1d9017061996948efd17cb9f1cff39dbc413433196101c311d8817ff95348e5076e1cdc276f4839666fe50765b2d0f5186dbf
6c6f00f854bb958d6e5b6dae6f3a6583a50765186a5c00a65ee6f0bf326de4e5137e40f4eea5e6326d0ee50765a443cd227ff0347f3a6527b50765c5925f2c07f9c5e5a87fba7f3a65a7954a6f00e99b6a6f45769f35d06f318cf16f3a6500c135997e677f797ff9534f25dc7eb68f20c88f3793e0016fe157cc040af228
f9000ee1ee1f8ecf6de7cf51aec991015d4480a509e1c5d9cda9ff9365e7f88484a0eb3c40f4ec90ea9750182d9f4454fb2109eb91cf509d226ce826086a70596a5e01e2d2cf5140b6c70eb2c5cfab9bcf552eef55e4e00044ef0fc7eb9669efc9e7e9989013d9d104279f399fff9c51569f629f749f869f00989faa9fbc
9fce9fe09ff29f04af16af0028af3aaf4caf5eaf70af82af94afa6af80b8afcaafdcaffaa41301f9af0bbfff000ff128bf34bf46bf58bf6abf7cbf8ebf00a0bfb2bfc4bfd6bfe8bffabf0ccf1ecf0030cf42cf54cf66cf78cf8acf9ccfaecf10ccc43711cbcfddcfffd121facf06df0018df2adf3cdf4edf60df18797452
78817fd0ba613fe01fb08ed8fc59f38dd8509dcb6e7f4d072308c0b3dfc5df7455a44ef0df8002ef14ef26ef38ef4aef5cef6eef552058ff901354115541a1ec093b9ed90100ccefd8ef76479021f8e5554f674fe0fc20cf5533ff9df78fd69ef4ed281e27184550f0fba01a08dd01e070011d05141b07ec02a4410817dd
7318368c8a8b008420f811dd73e5091d026900661c342fff1e7f26ce24da00e806c4f100902151414933d6f2f11d8825c75fd95712030f55d200190f552917360f962900331eb323c865c12fac2a78459a2fac2a402e450f3fbaca0b416f0f810ffff751009e0faa0fbc0fce0fe00ff20f041f161f00281f3a1f4c1f5e1f
701f821f941fa61f00b81fca1fdc1fee1f002f122f242f362f00482f5a2f6c2f7e2f902f3e3fb42fed2f80d82fad5ffc2f835f203ff55f443e59044b74a1ec073b9edbf1883f943f4c7700b03900ff12ff24fffa3fcede1d45ec7600ec6f404ca44172e5b04f1c03fb411d05fc86410b58436166654d6fff636861446563
616608c74272e14e511cc137df394a556d49e594d038233e7e4e501027002f321cc771db70bc12904c5008bc3117551eb134d1f78b71cf391eb1001eb1465f58574251625fc7c1785f26670084889f5fd8576d8cca5f017c4f83f15d80b38f136f6289e38b42555d8fd23642f8a538cb31c430fcff99de5efff4b24abd61
1e08ce97408378a1e15a563fbc310b02576e0d696f7b6fa33fe4f8d0f3c63240dbffc76f2381d96fd88f85d5f0d4d515a985d5e0d4d599217d4f4f614f009d48357fba4fcc4fbcaff04f025f145f00265f385f1f8f5c5f6e5f210f6b8f5cbf0029a3958f86bf2ca8eb5f67bac2bbf18c2e6abf000047fcb05bb264a8e100
a5e4fbb17e311cc3e8c5f181959fa19d80fbb1b565b43fc63fd83f2cba00af55ff40b814084629df06ff40408cec459d7309fff73f4036f1ac682493e0f50678e2c3e5187f29b20300a3425bb58faf5ab358a182b564ac5bb2824cd6087942a3858644e0a797450112a961652ab4b5613886c78d496dc510b5692dbff273
21b18395c8940110a0215c6794ded35bb5ecd45df4da82b522ecd45ef4daa385ecd45ff4dab59522ecd460f4daf185ecd461f4da21b522ecd463f4da1785ecd462f4d685c3c09ac3f3d189c01ec1deeffbb1e83f36a8f3e13f51cfffff1ec1f3d18010e12de14ae167e184e1bee1a1e167e0e5947e31b3af93ca35c30000
c90a95c879e59254e6a1f181f181507648daa61db5a3822ea5f4b5922fb2f410f18202b102b121b213ccf41782db35b27cd215e6f4940100b458b80f6c77f38d44284099410101f6f18082b5020b97431603f185e2717af0e8f1fd60c4120201b460267b31ff444432413133382dff334342372d344444ff312d39443530
2d31ff45304142393331423f3632467d00fef6f11785c6020bf03f12077cd3000b801901c41108f1f2210f33046af1b59599d43281c116061467e1001b131484e1188a728b71bee1001d2d14a1e13a92fcf18547948ad67a6aa622ffe148bd916d29cd970747a5701eb481cf93cfb9dfa28251aa7c18b5f110a133f5c598
f76582f4ce05c3d09944a3115bb5af153500f5cdc81fda1c82b5f11f032f152fa31110a385332f452f572f71f174d89188e100701402b17b19d891d899c4df1fb3f47110b561e6a1ecd17e31997c1802b110a1bee2c3a5bc4134332c31c30024a88f4f0c335bb51a3e2fac3a3f4c362082b51a357d23e8c02b3dbf7f3f0b
3400a385a03e6e3dc13f4d35b595a03bfac60c23a671b6f0bf453df185264e07ce20b8b6453d21b51a35b713d5354f474ff84d3517851a35e8b4814e1b01682ca6c34fd54fb5655d3ff764763f00453db205e33f445c044f4d35d405ac4e007a4f8c4f0c3362f5ef4ec95fdb5f689304d4e3689e041dc23bc921b101ffa1
9f0080b7e221c199a4d17014b8d9f495ec9db0bccf3855fac873b4a03c279d90fefd6750182d4454fb2129090091e2209d7fb826dd6f8824027d2e01f5a2e221c997fe72d89fbe6b04e22541bf55f18057bfdeb700967cbf40dcb7fc68689310e13a6f4c6fffaf2100696f756f876f996fab6fbd6fcf6f397f00f36f057f
177f297fb58f4d7f5f7f717f00837f957fa77fb97fcb7fdd7fef7f0d84082de10c8f1e8fff22c13b8f478f598f006b8f7d8f8f8fa18f0b9fc58fd78fe98f00fb8f87af1f9f319f439f559f679f799f008b9f9d9faf9fc19fdf944ae1de9ff09f01ffe4f10daf19af2baf3daf4faf61afc473afdda034f5c5f8e28b512635
9f77e24b15b8a1a86cc3a8feb3a866e50461b5770801c0c6afd8af8725b71e03bf15bf27bf2039bf4bbf5dbf6fbf81bf556bcfb2b30867e16811b4bc094e6eecd1dfbfebbf0089173be10bc5681f7a1ff3cce22546cf48b0c7a2a6b1c4f53bee3ae85003db11a02dd8f0d1aec00130d52ed7ffd2c5a454d817abc32b069f
5a00842233c811abc3f8d930d26979ec47ff0012fe92f6e1f4edd0fbd6d7c136c16411805c03e9c204fd9bf5da2fec2716df5504e5d02cdf553ce749dfa9f946eec6f30036c5d4ffbffa8b15adffbffa4115220f10cd9a1e1182df94dfff0a31b1dfbddf00cfdfe1dff3df05ef17ef29ef3bef4def005fef71ef83ef95ef
a7efb9efcbefddef00efef01ff13ff25ff37ff49ff5bff6dff007fff91ffa3ff510fc7ff000febffc02f200f0f962f330f083f570e625e44b4bc01074e6eeec19b0fa70f5f47c30913cf0025cf37cf0d1fe1ae3015ff46ff3f531c40b71185b5c31f2fd30e2130d51e1b2bff436166654d6f6368ff61446563616657681f
6970706564da1285b16121a11cd407f2095d25801994e30823fc514e6120102700321cc70571f540bc25605f20cf012a2531810134e4c7a541e20931813181592f6b27005521752f56418b2f39371466b02fe92900875cdd2f144c6953043dcd5f263f7c5910fd5b5525775fe50642b808de01d700ff470bcc41843a8645
ffad41ce870621953b52b4b163690fcf010b6a3e0d7c3f008e3fb60ff7c8e3c3d902eecfda3f3d51a8ec3ff25f98a5f08fa5a998a5e0028fa599344d621f741fb018484fcd1f00df1fd67f032f152f272f392f4b2f395f006f2f812f34df855f768f4373af5fa08fc04678fe2f818adc8b0b6c848f00000547169064c534
bbb1b8b415919101003693fb950b61af6fbb6d1591c835c70ff0d90feb0f468a1a7f554048cfffbfe29ea7ec3f409cff54e0d0f3aff03f407f5f4d3c2b1a09f6194812fc93e62b4f438203b6127585a97f40748372719c857e7c758266a6088c1250dc359914fa77aa1501bc3165448402c83138a097a0198795c839478f
0c53023b8183af98a7d1fc30a7a1b4b1f8a344758506b4660eba9c8506b4670eba00dc3506b4b13111b7cf6506b4c17111b7040b6506b46a0eba3b8506b4d7c1a2b744315506b46b0eb69f93b4935ca093d83891f8bf1591e83fbbc3e13f066b9fffff3891a7a12ab147b1b13100c1719eb1d8b1d7c147b1dc319101cd7f
5cad9a4f930000c9af9879ff62015400810b610b616346f4763785dc32092ebfc4cf622fccc40b621c811c81423b8213e6c43152ee0596a21500d496a7d100b472880f91c3a014280d40ac11010110d19c851cdbaa133030d30b65fc4194c0e8fd7a942cd2fe1b8460267b31354344ff353346362d343434ff442d343738
422d39ff3243362d39454645ff3042393836443342c77d00fe10d131551cdbf03f382cd796a31adb8019c42bd80bd2403bdf4dd484c1cf65b3a49b911620e406c171001b2de49eb1a442a541d8b183001d47e4108154620b65616488ffcf44458b6b7f46a9ffc749cbc67411fd702038849b9fad9fd3afdb32aa96e8cfc1
4afc315c0fa5980a450eae05dda010ac14bde17585c9e55e0fade2eff4ec009c850bff1dff2fffbde1dc354dff5fff0271ff710b54f261a2b18ae41c8195e900f261f269deaf39830e51c831008106b1c291019996e81c81fc31fc93a6bc174134334601c33e78a21f2603007585340e497c540f66069c85340597f30402
a0450dbf990f2504dc35ba0e880d80db0f6705cf65ba0b14a63d768b86f001bf5f0d0b65401e219ed2865f0d3b85043405d1e3d64f1f611f6705315534053f073a6da0d3864676dd1f00ef1fc835770f0a44900f5f0dccd5fd0f005e2c1e1f6705eed5c61e941fa61f2603007cc5092ee32ff52fa0b3a7a19c81846c0104
379255993b811bcfbb6f9a87fcf100db69bea18ae4d2a90e75067dd69f95ffd6b385a03c416d90174750183f2d4454fb21094161fcf0459d998826350a9df997fe010f8280fcf1e3671852f26fd83bfcf55b8f55000b60718ff8874166968ff6871648a0b3082ab1543f663fffc9f1833f8f3fa13f00b33fc53fd73fe93f
fb3f0d4f1f4f314f00434f554fcf5f794f8b4f9d4faf4fc14f00d34fe54ff74f095f275447b1265f385f01ff3c91555f615f735f855f975fa95f00bb5fcd5fdf5ff15f036f156f276fa17f004b6f5d6f6f6f816f936fa56fb76fc96f20db6ff9643dc1f86f0a7ffffec1277f00337f457f577f697f7b7f8d7f9f7918a2fe
a521263577e24b15b8f4bb788693a8cd7866e504610fb57708c0e07ff27fa1f5d1ee001d8f2f8f418f538f658f778f898f9b8f4155859fa0b32be182e1ce8c09de8e0006b1f98f059fa3e71ca1259582ef94ef400dacfcf5609fca9762a6cb94f655be8a54b8501daba047a80ab10d2001284aa548a719b2a46ea8170a23
45d616b92a00844d98110a2312b94aa2002be196b961cf2cceacc6fbc407b015b600f1911ca17ee176d303a21ecdb5c5f4ff24060730af55ffa046af5556b763af00c3c960bee0c31ca5eecfd9caa5e5c7cf80d9ca5be53cdfe76a38e19cafaeafff002401cbafd7afe9affbaf0dbf1fbf31bf0043bf55bf67bf79bf8bbf
9dbfafbfc1bf00d3bfe5bff7bf09cf1bcf2dcf3fcf51cf0063cf75cf87cf99cfabcfbdcf6bdfe1cf001adf05dfdaff29dfb0ff4ddf220f71de096b7814ce8c07de8e08a1b5dfc1df007917ddd92d9f3f9f519f27effb7e4ae5001926191f6decd1e19f85ddef49a328f1fa4aa51f35fb436166654dff6f63686145787472
ff6145737072657373116f97a29f817bf11ceed70ce977f5ca9ae994fdd8236b1e7bf010275f00321cc7711020bc3f301079f0e9d144f54b5134fe97c011fcd9004b514b5173ff85f76ff18fff7011a5ff0053072e36caff0309a22cf7ff2e1c8423001e0de82f400f9729183b6ff5922fffd6f142d2d8f8d1f1d0068da8
e8ffe92481439648b1518f93781c7ace81f19186df00050bde8e0d960fa80fd0df11a8fd9380f3d208aff40f5821061f0d3fb275f02a1385a9b275e01385994e1d7cef008eefcae8621fe7eff9eff14f1dff2fff0041ff53ff65ff542f89ff9bff4eafa02f00915f5e43ca2fbb5f6148180f9c5af75b5c263c9f5f000047
31606ddf0400d581d2843061abd1516315752631ca3f00d63d3061e205e1dff3df05ef615a354fff5540bcf05758a598ff0540409c54e0d0f3ffaff03f40bbdcfe20274365fd33181773ed451f5e520103d0e29055c44f8f538d41b755994c049052817608a6e21ca5b3e41557c4e52501d601655f54e20138bb67bae920
a265e209625f2723565183ca68c1a14259306e9c341383905521846f298a44b755218470298a1ca5218471298a44ea35218472298a2635218473298a445655218475298a4c25218474298684ba63cf635cbb635361139f3061e86d3f6443e13f866fffff5361002881458162817f819c81b981f381d681c1671a44abd1e8
4fc86a6a63000015c9ca68791a42541b5126312631907d160f5652551ca22eda94ea322f20e79426323751375156521301a44c226408e5b172151ba4c1a100b48d58d90fac93bae42840c6e10101002ba1b75537abc4e34ba326351721af90e3e8fd956447a2365460267bff4145463732383737ff2d423145322d3444ff
41362d423538442dff36354442353946427f453542337d00fe2ba18c4c2537abf03f47a7b17335ab800319c446a826a256af68a49f91ea3564ce74b661163bb49c81001b48b430b981bf12c011f381001d62b4d681f86f3226357c34071292fce5ff7c074eb3c655f85607ff3a6162815651b66fc86fee7fa2d202aab1b8
ea915931b72a7598042415297e05f870c6e4d8b19055e4b501b92a7dfdbf0fccb75526cf38cf4acf00d8b1d82568cf7acf8ccf7f8129210d4100a081a5b43751b0b90d410d49f97f5453202921e2011b512181abd199b1b837517c59311773adbc41343361d101c35948bcef41d390554fde644c6fdf4881d6b7554fd5ba
187560ddbfb4df0040d4d825d5dea3ddf6df82d5ea354fd518b2cc5846a656f0bf7add26355bee403c6eed567add56554fd5ecb3dd6aeff07cef82d54c254fd58b25bf5803f20b4f4f01ff8de6e20592df241400abdf7adde7a518ef79fc39ef82d509b500e1eeafefc1ef41d3979524fefeff100f10d8832881b7519f3c
0452627069565100369fd63fb55717d1f639d971a5b4ed79c02945214df16fdbd52f78cf54b03cfa5c3da0321750182d4454a7fb2109353117d09db458260850dab8c9b2ce012a5217d1fe373322100d4ff30b17d5765f5526308c5f1367003536b15f11673118d88345816f0f810f01ffe4c19e0faa0fbc0fce0fe00ff2
0f00041f161f281f3a1f4c1f5e1f701f821f00941fa61fb81fca1fdc1fee1f002f122f20242f42246281412f532fff5761702f007c2f8e2fa02fb22fc42fd62fe82ffa2f000c3f1e3f303f423f543f663f783f8a3f009c3fae3fc03fd23fe43ff63f1444589104134f254fff19a1424f4e4f604f724fc0844f964fa84f60
e9cec2c0f170601fff00fe07c0d648a163d548ff50217967e525a20801c0fb4f0d5fbcc5ecbe385f4a5f5c5f206e5f805f925fa45fb65f55a06fd883085c919db1e95c09830e2181146f206f00beb7708140659dbfafbf287c17d57b6f48e567d746e664fd708e6f8850387b11a0627825815b7001657563773482c5a489
7817587360a6d4fa00842268681158732d89657269ae8c7c9f00479ec79616a4228030860c716b6199b18091a31e72399dd0950fdf21d74b7f55041a80617f5571877e7fde997b8efb93006b6509aff49ac0b5e29ff49a76b557af10024a53b1b77fc97fff3fd1e67ff27f00048f168f288f3a8f4c8f5e8f708f828f0094
8fa68fb88fca8fdc8fee8f009f129f00249f369f489f5a9f6c9f7e9f909fa29f00b49fc69fd89f86affc9f35af20aff5cf2044afcbcf68af3ddf8cae7493e4e95c0107830e2371d0afdcaf94e7f8a9486f005a6f6c6f42bf165e65b534f634ef88bc00ecb1ba55f8bf647343c16575df6153c8ff436166654d6f6368ff61
45787472614573ff70726573736f57681f69707065640fc2ba5196c1a11c09b727b992c5b5b99418b823fc86ee96c0102700321cc7057132f0bc5a0094c004b15fc5662101341977e2e117b9662166218ecfa0c7008ac1aacf8be1c0cf6ed74906e5cf1ed900c4fc12df49eca6f339dd0a0f5bdfb9f9103a0b8ac5b4ff1a
b642eda813b10cb0ff8313404258125243ff838e7cd5fbb9546752e951759eaf04b10b9fde0db1df00c3dfebaf2c7818730eb2237f0fef7af1a821ef2f0fcd45f02e55a9cd45e0022e559969ed97bfa9bfe5b87def02cf0014cf132f38cf4acf5ccf6ecf80cf76ff00a4cfb6cf697fc2ffb32f8013ecffdd2fc0831833df
be2a193b480cc12f00000547533076fad4f051ed545231c6a100733330454801ec0ff80d5231fdd5fcaff00ebf20bf832a571f55400183ff7f39525a1540408cffec459d7309f73f4097b6600b3940ea4ee83943da0460ef802203ebb2b225e61fb123af1110d925bb1cb222a34608c1b211e5ceb4943727dfb501f1d165
8124fdd13880dd37d5b9c435fdd9842f49f378218308ec38dc715b7077be043553b225435411784b5ad9254354794b5a11e54354117a4b5a0c1543547b4b5a48054354117c4b5a782543547e4b5a6ef54354117d4b56dc33f1335cdd337531356fb65231e83f8613e13fa83fff01ff75314a5167518451a151be51db5104
1561f851673c14c6a10a2fea3a8c33e70000c9ec388451030054803d214801480198e63126742511e22e04fc640c122f09744802592159217822211323746ef223b5d342153d74dc71cb00b4af280fce63d5b4284006e1b101014d71d925597bdfb36d7318480539f1d160e8fdb73469725824ff60267b3539324541ff35
30332d39433242ff2d343932462d3838fb4134c4704642333739ff41394338397d00fe184d716ef5597bf03f6977d343577b078019c468784872787f8a74c161c80c15f044d831165d84be51001b606a84db51e1e2e2e11561001d8484f0f851910248059e04d37856eeff70733e45a933714c1fd54a1140707524d83fea
3f44105fa322aad3880c7131e1b34c4509983fe54b4e051a50e1b4fa81b225020695b44c4d1f9f319cd925489f5a9f406c9ffa8111e58a9f9c9fae9f7148f4002f11c251c7845921d2892f112f191b5f4076234bf1fdd13d214351c6a199d388f8592131e139439abc4134330283a1c37b18d7bf63a3b22571ae861c9091
afa3a6d92571a5b53a4582adbf00d6af62a411e5f7aec5ad18bfa4a50c153071a5d49c7a16c826f0bf9cad4805807dbe5e3e0f369cad782571a50e93caa08cbf9ebfa4a56ef571a5884ec2e30012cf24cfa4a5fdd5b4af3fe4cdaf9cad0009853abf9bcc5bbfa4a52b8503ced1bf00e3bf63a3b96546ce20df32dffa534a
5104d921c10c04743292397821586ff80f00d72739a11819fb41c7840f594b15431db0134ffda551483634a03c7e0d90fe54e750182d4454fb2109097e0139a09dd628a9e18dc7da9902d49e0142f239a1201755f22f1f15eb0439a5982f554800ae2f35377e06d32f40333753e8fa53675191dfa3dfff2f5100c0dfccdf
dedff0df02ef14ef26ef38ef004aef5cef6eef80ef92efa4efb6efc8ef00daefeceffeef10ff22ff34ff46ff64f408845163ff75ffff793192ff9effb0ff00c2ffd4ffe6fff8ff0a0f1c0f2e0f400f00520f640f760f880f9a0fac0fbe0fd00f00e20ff40f061f181f3614a151351f471f01ff3b71641f701f821f941fa6
1fb81ff0ca1f82b94342e2c139dc63b3a7bf54a8f818c333980a286a7f6300dcc1cf07c01d2f002f2fde950e9e5a2f6c2f7e2f902fa22f08b42fc62fd82f55c23ffa53be51bf81020b3c09a5de4351363f423fe0875941006235bf8fd18f4a4c39a59d3f07479f46520844ea925e9158505a4ba084484447518dc0018745
85475652a4ab48b1178ac38276f6ca00848a3811088ac34f59874269d05c9e6f696ee966003874445052562e415941bb81b3734042205b6df26531af43a76d4f553c50834f01559357a04f00799d5e1d7359452b7f00167ae285047f167a9885797f241a758104d94feb4fff61a1085f145f265f385f004a5f5c5f6e5f80
5f925fa45fb65fc85f00da5fec5ffe5f106f226f346f466f586f006a6f7c6f8e6fa06fb26fc46fd66fe86f00fa6fa87f1e7f577f427f17af667fed9f488a7f5fafae7e7db5b40b3c07a5de004541f27ffe7fb6b71a896a3f7c3f8e3f00648f382e878556c656bfaa8c0e91dc25d01a9f86436591874515729b4361ff6665
4d6f636861572365743192dc21b8911c2b87498994b495d789943a8823a8beb89010bf2700321cc77143c0bc207cd0b6902681819588f1343b47f3b100398988f188f1b09fc297ac91cc9fadb100e29f90a7eec809af42a7d5cc34af6bbc00b7c35bad1bdf7dafcac94bdbac95c5cfe23c86420f8835812e80f384d8ff69
2d6aa5408e74035fee796a18bf0b317ec07f0a26810bc1ae0dd3afe5af0d8f4e48003a433082454f31bf8bc143bf40dfef1555f03e25a9ef15e03e25998bbd00b98fcb8f07989fbf249f369f24ff5a9f006c9f7e9f909fa29f87cfc69fd89f8b4f00d3cfc4ff91e3fdcfeeff94e855afcffab82a0b59dcd2ff0000476400
7f001cb412310f346301e8718403521559d100fddf09ed63011fb51e8f308f428f94fafc68ef55b02023f1a48b11ff40409c54e0d0f3affff03f40b73fc850d99361f470b84a13e482bf91f203000d92c3f5f7efc2f3c0e1eaf5ccecc3f282b41608e3825945f08448f70195011213b16592f41fb138ee07f789d505101f
b995ff5ac389f183fd08fe41ad302180cfd44623c3f55424815c2aeaf5025424825c2a5945542448215f271de52054240e915f2759d55424855c2a89f5225424875c2a7fc55424865c26ed03c202135cee038601463f6301e83f361243e13fb90fffff86015b21807821952148210e91ec212631093167e04de4e8711bff
fb0a9d030000c90afd08794de2544ef159d159d1bab64842f685f559422e0d441de22f1a441059d26af16af189f21334447fc24585b0e412cbb1cbb1fe4100b4c0f80f6cdf33f7842840039101015e4180eaf56a4b01937e4359d54ac1e230e8f1fdc8047a4269f460267b34ff413936374346352dff313745312d343636
ff382d394545462d35ff45314138313144373f3546347d00fe5e417fc5c66a4bf03f7a47e413684b801901c479485942894f9b44d2311de5012432e901166e540e91001b7b54ec2118f2b2f3b12631001d95540931a2d2fc59d5afd45c4583950a61ffb04d8895434d360407c47e7086f4e90ffb0f212f548251aae4581d
4165d1b45d159861b5825c1e052b2003940b61c3f51765b6005d1d306f426ceaf5596f6b6f7d6f0b611033b59b6fad6fbf6f7159c440e1f02100d8546af1e35940e140e92c2f87f35cc1101fb14ef15421e87199e4586af165d1be4a13a4bc4134339471c3008ce8f98f7473c3f5827e97eca27fb47620eaf58275e56350
10937dbfe77f73740033b5088ed67d298fb5751de5088b62160c8be6d9f6f0bfad7d59d58e8e6f0e202006ad7d89f582751f63d49d8faf8ff8b5757fc58275915f2cf9c50392ee239f359fb5751fb5c57f61b400de7fad7d1a554b8fac9c6c8fb5753c5500149ee28ff48f7473ca35579e31af43af10afa35b21eaf1d2dc
048502a30989f100693f09efe8f74a7129e90c21d8542029605ce554ed241fe36f0105a03c8fddfd9065b750182d4454fb5321098fd14a709de7f826837a04eb69e56e015df24a7131e766c240ef0826bb4a75a9ff5559d0bfff46078fd680e4ff440764b80b337821a2afb4afff004021d1afddafefaf01bf13bf25bf37
bf0049bf5bbf6dbf7fbf91bfa3bf1ddfc7bf00d9bfebbffdbf0fcf21cf33cf45cf57cf1075c4952174cf86cfff8a01a3cfafcf00c1cfd3cfe5cff7cf09df1bdf2ddf3fdf0051df63df75dfefef99dfabdfbddfcfdf00e1dff3df05ef17ef29ef47e482254aef00a00c4c4175ef81ef93efa5efb7efc9eff0dbefede90172
f391263577e2a74b15b809f8d403a81bf8667fe50461b57708c02eff0040ffef651f6e6bff7dff8fffa1ffb3ff08c5ffd7ffe9ff55d30f0b337951d051021c0c09b6ae5421470f530ff1570b41007305d05fe25f5b1c4a75ae0f1817b016521914f4a32ea228506b1ba095184458218e1001981596176722a4bc1841178b
13934607aa78526a15118b13046029981269e12caf3f7a3efa36494400552063263f110b41cc51c44351126c3d900345427f54777e1f554d20941f5500a427b11f1149ae2e2e4343853c4f274a00f355154f274aa9558a4f35ea8651ea1f02fc1fff7271192f252f372f492f5b2f006d2f7f2f912fa32fb52fc72fd92feb
2f00fd2f0f3f213f333f453f573f693f7b3f008d3f9f3fb13fc33fd53fe73ff93f0b4f00b94f2f4f684f534f287f774ffe6f9b4f24707fbf4e86c6841c0c07b6ae561100035f0f5fc7872b597b0f8d0f9f0f755f0049fe98556796678fbb5ce611edf52b6fe89713766198151c836b436166ff654d6f6368615765ff7457
686970706564004262edf1c961dc8442515a59c565e859e5944b5823b98ec9601027002f321cc7715b90bc8da0c760083751926599c1344c17dc814a5999c10099c1c16fd367bd61dd6fbe81f36fa17700ff981a7f5377ed9c457f7c8ccf936c7d8033af8e7fe29963abbd65dd9f4d5642f8205846513f502b2916362bff
d2fb4fb4f6ec0c0b971917c81c0187d14f37510b02d27e0de47ff67f1e5f5f184b13415240561f428fa391548f58af00f5f061f515a900f5e061f5999c8dca5fdc5f001868b08f356f476f3ccf6b6f7d6f8f6f00a16fb36f9f9fd76fe96f9c1feb9fdccf00a9b315af06dfacb8667fe7ca42db71ac2eeacf0000477cd088
2d8423010020047bd1f9419cd363e571a115bf21bd807bd130852f5f415f535facca80bf55ff4059d7050cfe2511ff40408cec459d7309fff73f40840c951da6932ef1818862e3e1938fa9c20300e512dbc50fcfdac3d8b102d5e4bcdbc282cce608f45223a5016460c712650112248165aac430813806e70869edd50030
89adcf7293a1c1140118e50f218e1000c1c11c011203dbc56cf4d7c177f702d5206cf4fec177f723a56cf48c74fa35b5226cf48d74fa71a56cf48e74faa1c5226cf49074fa97956cf48f74f605e3c21ae35c06e39ed15e0f7bd1e83f36afb3e13fd1dfffff9ed1c1c180d7c1fec1caf1e7f104013e01210167e065b4f941
33cf13eab5d30000c90a15e87965b25466c171a171a1cb86485ac69dc523a22e251435b22f32141071a282c182c1a1c2134c1497925655b2fce21566140f2100b4d8c80f6cf703086428401461010176118002d5821b1263961371a56291fa00e8f1fde0d4921281c460267b36ff443930333444442dff424437422d3439
36df352d413734f6103436ff42324331464235458f457d00fe76119795821bf0713f9217fce3801b8019c49118807112a11fb314ea0135b519f401e1160c8624e7f1001b93240401db82dc81063e01001dad242101baa271a5c7a4ffbe9451a365ba4640ff9f61c43894b9946941709ec401ef13ef39ff22a2aafc289435
114ce18275e598728574ee052043f014642331dbc52f358375ed483f005a3c02d5713f833f953f233123a5b33f04c53fd73f71719458b10801f02482c100fb2958b158b944ff9fc37491308166c1846cf1f94199fc2882c14ce162e3a12fbc413433ac41c3a4b80a6f008c43dbc59a4eafbcba4fcc4602d59a4508fd3368
e0ab4dbfff4f8b4423a5205e00ee4d415fcd4535b5205b7ae6a3b6f1c603f0bfc54d71a5a65e87de38d6c54d08a1c59a453733d1b55fc75fcd459795fe9a45c5925f2cf9c5e9003b6f4d6fcd453085dd4f7284f64fc54d003225635fc46c845fcd4554252c6efa5f000c6f8c43e2056f6e497f5b7f2303c1c10402d1eaac
049dd2bbd9a1c1810f21bf0000d7624141b924f1f02438f974b56cbdb03cefb8657ae81ad4a03ca7ad90fe7d8750182d4454fb212909a7a162409dffc8265d8f084402fd3e0175c2624149b77e9258bf3e8b046245c1cf5571a0d7cf5ed7a7a6fccf405cd77c8823033691ba7fcc7fff58f100e97ff57f078f198f2b8f3d
8f4f8fb98f00738f858f978fa98f35afcd8fdf8ff18f00039f159f279f399f4b9f5d9f6f9f8d94002fb5909fb8dca2d1bb9fc79fd99feb9f00fd9f0faf21af8baf45af57af69af7baf0007cf9fafb1afc3afd5afe7aff9af0bbf801dbf2fbf41bf5fb4caf15ebf70bfff0064118dbf99bfabbfbdbfcfbfe1bff3bff8ab59
07420b71d0ba613fe0e31fb021c8ecd320c8509dcb3f6e7f4d2308c046cf58cf000745373e83cf95cfa7cfb9cfcbcfddcf04efcf01df55ebdf2303e7f1e82134dc0109ce7e6cf15fdf6bdf0937bbf18bd500e82ffa2f73ec6245c6df30e7c8e631e429f1bbfebaf85083eba0ade870f1a2a6e001b0e5aee77ff2a4d4e817
58a3e3ab161f7a0084b3d811a3e30478f9b0e269f9fcc70f920e12166114006df07bf657e1b6d1e421dc1369e2840d901b155a4f6c4796ef5565f0acef5500bcf7c9ef2919c6fe4613b6d5541f3f1a000b352d1f3f1ac125a21f4dba9e2102ff0214ffff8a4131ff3dff4fff61ff73ff0085ff97ffa9ffbbffcdffdffff1
ff030f00150f270f390f4b0f5d0f6f0f810f930f00a50fb70fc90fdb0fed0fff0f111f231f00d11f471f801f6b1f404f8f1f164fb31f24884fd71e8fde5434dc07ce7e6ee1001b2f272fdf57432993dfa5dfb7df8d2f0061ceb0257f667f5fd32c373105d5433fe8afe38e31b0e5199b3b436166ff654d6f63686157681f
69707065645a3205d1e131a11c54277229dd35003994632823fcd15ee130102700321cc705717060bca570df304f21aa35b191013464e720616229b191b191d93feb3700d531f53fd6510b4fb9471778324f6b4700027c5d4f945ce463844d487fa64ff76910787bd535f26f65264238285e215720ff6273e886168b1c4e
ff83cbf626b87af73d5234d190e91f4f210ba09e0dfc4f000e5f362f77e863e359226eef5a5fb861a86c5f6d7f18c5f067c5a918c5e00267c599b45de22ff42f3038c85f4d3f005f3f519f833f953fa73fb93fcb3fb46f00ef3f014fb4ef007ff19fbe832a7f1bafc0c1887e4ffc9a57ab867cff9f0000054791a0914554
3bd138d490a1112100b1a37bb586712a8f368d90a14855472ff0592f6b2fc19a958f5540ac70ff3d0ad7a3d83f40aa7f5807b4dfca0140bfe425e8b08ed8ab5fbe92033632f09580249fef93ed8117a5f98cf092e1b608a00c325c55193475972a35013c516504bf944851381bb7203902b54859c29f448763b691832ab8
27f1a6e092fc740873c3f09581c49389ca17a581c44b61888cc75c5581c49589ca4a8581c4968889ca867581c49789cab69581c4998889caac6581c49889c61ab32fb35c601bb3b3a173df79b33be3e13fe6af03ffffb3a188c1a5c14b61dfc1fcc10819d153d136d1677a841121489f28baaecaa30000c92ab8797a8254
807b9186718671e3566f96b2955c522e043ae44a822f47e4867297919791b692211361e4ac626e2511c2157be427f1cb00b4ed980f0ce320342840062c3101018be117a597eb2a33abe318867577610fe0e8fdf5a4a7e29694ff60267b3131374241ff3141332d46463341ff2d343238412d3933ff41342d3941414246ff
314138434338467d6300fe8be1ac6597ebf03fa7e71c11c395eb8019c4a6e886e2b6ef20c8e4ffd14a852ec416b1169bf4fcc183001ba8f419d11f62206153d100c11dc2f436d1cf728675dc741a14ff6751bb989140ba4a7f2ce7d03993ab71b394006d811dd11eb4979129b96d816d8959cf00b493896148517b912fd1
1121cdf22eb47c979171a798bc413433760101c3b988223fc6d3f095640ec48c840fb0960617a5640596d3e73f740ebf00c90fc5d45c55ea0eb80d0b1f97054a859c64052c31ffffd7b08e06a6f001bf8f0d8675701e9cae4da68f0db6951c6405e3e1ffffc77f1f911f970500ac65ea0b86560d2f1f2f4855a70f8a5400
c00f8f0d47f52d1f8e2c4e1f970569f500f61ec41fd61fc6d3f7d5392e133f253f07000070866416bf28bf210f5b5221aa98384ae1fa177e10988e2b8fb801052b009104bf31f095cb35781ce23f00f43e17a50d4f1f4f314fbf315c554f4f40614f734f1dd188c117a1ff7c04b2a200d0a9b69196df368f15a72c015689
39c1808c344dc98985818d51bff0059f4fa0f53cbc7d90925750182d444f54fb2109bc712c009d14a811266eaa8fb8984f018a922c015e872093626d8f535b2c05d69f558670ec9f0073a7bc7611af71a79158fff3a5c1cf4f02e14fff4401fe4f0a5f1c5f2e5f405f00525f645f765f885f9a5fac5fbe5fd05f00e25ff4
5f066f186f2a6f3c6f4e6f606f40726f846fa264c2c1a16fb36fffb7a100d06fdc6fee6f007f127f247f367f487f005a7f6c7f7e7f907fa27fb47fc67fd87f00ea7ffc7f0e8f208f328f448f568f748408b8d1738f858fff79e1a28fae8fc08f80d28fe48ff68f089f964993b2d521393fdc63b3bf54a8369801b3fd9848
986a6300dcc1cf0307c05b9f6d9f8e25d33e989faa9f40bc9fce9fe09ff29f04af16af5500bf10fff3fcc1843149ac09e34e2fd174af0080afa53797b1a0a5843f963f88bc2c0548dbaf45b7379de8d0cecfc85098bb11a0c2b885c1bbb001c5b5c3b794c2c5a4e9b817b8b3c0e6e92a008422c8a811b8b38dc9c5b2690e
dcdcdf00a7de27e676e482c090c66cb197b134e180f1e37eb299dd30e5ab3f3607abbf55007ac0c1bfd3bfe5bf45e8e1c85be397b50069ef54eaa73542ef54ead6f5b7ef628a08b3f117cf29cfff540146cf52cf64cf0076cf88cf9acfaccfbecfd0cfe2cff4cf0006df18df2adf3cdf4edf60df72df84df0096dfa8dfba
dfccdfdedff0df02ef14ef0026ef38efe6ef5cef95ef80ef551fa4ef902b1fc8ef9d1fecee98bd1449ac0700e34e83b130ff3cffbe1764f1a0afb2af50c4af9aff40bfa44ae8b245c9a94f013fe8fc4c014b15580f2313a3012415fd13b00b4361707075638f63696e6f6f024b11f6011c4069f7a739f20515096f817bf5
23e62efef600102700321cc771267f30bc3ff20264f1426e2873f1fe6cf04888ea4ab1e687ff4787cada6e897a76392e6cb1fa1300003479b72f310077f9c661c661ee0f0017ea010a1feb2100201fce17cf16451f7e19344c721fa92c001643991f7c4ebc1f2a48aa4bea05244f52628a99feef64f10bb56e0d112f0023
2f4bff8cb878b36ef283bf6f2fea31a8812f9f4fb725f08e95a9b725e0028e9599c92df7ff090f4508dd2f620f00740f606f980faa0fbc0fce0fe00fe63f00041f161fe34f324f007fcd535c4f2a7f40d058931fc44f6b76b84f117e47a070019a5a2450a14da49f7126f1c0739085009b71395f455d9f715d255cff6eff
80fffcd06aa45f554019548bc0ff74e8f53f40aa5807ffb4dfca014040dfbc9f9a785634eeae278584de04c02fcd62034b02ff65336ffe63fc51102675086cff62f08608210297b52e049484673f0501512165ce645d2138802a87350911855d29d16fb933c561830039883cc1bbb0608149a18293ff659094019c989a26
75909433b19b9797b59094119e989a3a3590949f989a9b75909410fc519b97c5659094a2989ade35909411a1989629833e835c2a83c27182af6cba53d353e13ff57fffffc271006081b49133b1ee910ba1fc5162a145a1c167895426f1576f378ad973000015c93988798952548a619b719b7190f8267e66c16597b22e49
b43a322f0056b49b72a661a661c56209310931de326483f52092158ab43cc100b4fc68d90f1bb33504284041010101009ab12675a6bb3f03bab39b7586311eb0e3e8fd0484b6b2a56460267bff4539384333323842ff2d454136332d3436ff43302d384233462dff43434643343130327f354444427d00fe9ab18cde35a6
bbf03fb6b72093a4bb800319c4b5b895b2c5bfd7b40eb13a35643d94258116aac40ba1001bb7c430fc512e322f3162a1001dd1c445a1f88f329b759c34d730968292ffb6e841ae803b06aa0f066be270c264258f378f5d9fa2f062aa20d859b17081db998598049f24978f056790410447d1ff6553d501dd998d6cdf7edc
267595dfa7dfb9df2047d17125d7dfe9dffbdf71b8347c51002ca114d4a6611fd97c517c59689fc36300bb315d218a61909126f1065123d5a6617c708186839ebc413433d0e101c3c858370f0453ff65beeed35cdeef48f0e62675bee5de8785cfedbf23ff000354712544fe12fd65fff1e53a35bee51821ecb6261576f0
bfe9ed9b75cafe40ab7e5c76e9edc565bee55bd3ced9fff0ebfff1e5de35bee5a60d74da0740a7e65f0f710ff1e55d2501ff009f2b21fff0e656c587ffe80ca8fff1e50078c5500e1e0f300f045306b5930e6d1f207f1fed13608126710e5c04c172df7900c561a5af455f247786e16559489114d4805c999855905d608f
4af59e883b14a0eb3c40ab7c90a12750182d1f4454fb2109a22186e0d19122267526d70a27e921ee01996286e1406d57c5327c5f622b86e5e56f559b7000fb6fc647a226207f8077a02847a3b49104de1ff01fff53e10d2f192f2b2f3d2f004f2f612f732f852f972fa92fbb2fcd2f00df2ff12f033f153f273f393f4b3f
5d3f006f3f813f933fb1349e45b43fdc7cc67100df3feb3ffd3f0f4f214f334f454f574f00694f7b4f8d4f9f4fb14fc34fd54fe74f00f94f0b5f1d5f2f5f415f535f655f835408ee91825f945fff88b1b15fbd5fcf5f80e15ff35f056f176fcff92be22f11d03fba613fe01fb045681083fe4468509dcb6e7f4d230308c0
6a6f7c6f2be55bdea76fb96f40cb6fdd6fef6f017f137f257f550f8f1047a30ba10cd1587c09f21e9091837f008f7f2dd7a281af750cdf1edf978c86e590ea7f548746665584eedf9ede985020a78bc2c1d4859491da0001d485d2878aa392a4f88817d703cfb6431a004584d77811d7039c99d482691dac00ebafb6ae36
b685b491909f967b81a2810008d100c38d82a8ad3fb57eef90e7ba8f09558990d08f55e097ed8f4db9ea9e006ab3a68578bf63ba2fd551bf63bae5c520c6bf715ac2c1269f389fffaee1559f00619f739f859f979fa99fbb9fcd9fdf9f00f19f03af15af27af39af4baf5daf6faf0081af93afa5afb7afc9afdbafedafff
af0011bf23bf35bf47bff5bf6bbfa4bf8fbf4064efb3bf3aefd7bfaceffbbea1020402587c07f21e92813fcf4bcf030767c900b77fc97fdb7fb1cf856ed4c5a306a3ff00f7cc5bd1297567dfd383b2d183dc8ac5ff43617070756363697f6e6f44656361667ed284297105e11c78c796c901e524d994f287c823f5fe05e0
10270032171cc7719300bcc91003e073c104ced5d531348887430186c9d531d53100fddf0fe7f9d119effaf12fefdde73b180056ef8fe7251c81efb8fc0713a8ed6b1f40caef1a199b1bf9d5151f89c6425cc8fc82c17bc06b3c2c293deaffd84f8e23320a97fd4b399a5871a20dcf73c10bc43e010d20ff32ff5acf9b88
87837dc2928fa07effdb0190ff901f3c65f08b65a90a3c65e08b6599d8fd06df18df54d800ecff71df83df743fa7dfb9dfcbdfdddf00efdfd70f13ef25efd88f231f144fe123004d1f3e4fe428a2ef1f4a7a4ba91c224f17000047b440a369f45f715c7400b34135c1d4439f55a9114d2f592db341c06cf56bcf7dcf8fcf
e43ab82f5540ffae3c9552424b0540ff40aa5807b4dfca01ff4040cced0f32547649f6bdf89a53e6cfffe132035ad2001345473f124310313a451c3c13420466410830d2a6853dd498374ed50160f10965e2346cf1383e5744d925556cf908e53faa03d931834d584b91fa7031d110587196631345a464a5ac6a3a45a464
11a6ac6aa685a464a7ac6a6d25a46411a8ac6aa915a464a9ac6ad935a46411abac6acf05a464aaac663d535253615c3e53d641967fb341e83f5f831be13f095fffffd64131d1c86140e56102711f713c7176715971679d247035c16b3f4b5aed430000c94d5805799d22549e31a911a9110706923624d535a6822e5d846d
222f6a84a91208ba31ba31d932138484cf0292c5346259159e844b9100b410480f2f833644d4284050d10101ae813a45c0ba8b4ed3ce83a9159a013280e8fdf81854ca82b93460267b4233ff4436363231452d45ff4335382d34364236ff2d414236432d3535bf3731383632331d9031c77d00feae81cf05ba8bf03f38ca
873463b88b8019c4c988a98240d98feb8422816d255164395116be94061f71001bcb943c7142024301767183001de5945971f212a915ff145fff1bb6380516644a92ff0c9d6b7b7ce4a27000d634395f4b5f716fa1c2e39238a46d814a8451c9ad5598aef5ac5e057b601050d47671134567a5cbad5d80af92ac003a45a9
afbbafcdaf767180f5ebaffdaf020fbf71a9049021407128a4ba3133a900902190297c6fd733ac016cf19e315271c235c19934a8ba3184519a53a6bc17413433e4b1c3dc2846dfc4b3001345d2bee72cf2bf04c63a45d2b535b304a050e3bdbf37cf06c480f558ce26cd8079cf05c56d2558cbb256db262946f001bffdbd
a915decebf4e7046fdbdd93504d2b56fa3d6edcfffcf05c5cf05d2b53f58f28b25bfd8e4267bdf008ddf6cf515cfaef42ecffdbd6a959bcf00fcdcbccf05c58c9564de32df44df07c3001a85a7de81ef93effce31b613a41222c0104f242f349d931b97f592f38479ab10079295c6128a47069ac25a42d745ff0d5acb258
2b44a03cdf1d90b5f7507f182d4454fb2109b8118a9ab09d37482695ff40b435be0100ad329ab18127b602902f76fb9ab5f93f0155a9100f4f9647b816344f9447b4f8105b73c861f2ef04ffff67b121ff2dff003fff51ff63ff75ff87fff1ffabffbdff00cfffe1ff6d1f050f170f290f3b0f4d0f005f0f710f830f950f
a70fc504e561c40f02d60fffda41f30fff0f111f231f351f00471f591fc31f7d1f8f1fa11fb31f3f3f00d71fe91ffb1f0d2f1f2f312f432f552f40672f792f97240271962fa82fff9c8100c52fd12fe32ff52f073f193f2b3f8550f1caad55b07243e1263577e2a74b15b859382453a86b38667fe50461b57708c07e3f00
903f3fb56faebb3fcd3fdf3ff13f034f08154f274f394f55235f5b731f7120a1026c4c0906fe5271974fa34f41a75b8100c34520af32afab5c9ab5fe4f68575a36526954f6f36ef26850bb5ba0e55804a861abd001e855e657b762eee5ec51b117a8d3e38657ea0084eb481108a8d3b069e85269317cff7fca7e4a860099
84a560b3668f515b811ca11493a15220bc7d538592bfa4b7ce5f559d60e45f0155f467016f6189fe6e7e8393c58c8f00778a43a5658f778af995da8f852ad691043a6f4c6fffc2b1696f756f876f996f00ab6fbd6fcf6fe16ff36f057f177f297f003b7f4d7f5f7f717f837f957fa77fb97f00cb7fdd7fef7f018f138f25
8f378f498f005b8f099f7f8fb88fa38f78bfc78f4ebf48eb8fc0bf0f9eaa16d46c4c0706fe00a651539f5f9f17d77b99cb4fdd4fef4f00c59f993ee895b7d6b7cf0bac6fa13d45d07bafe753c6a1e8551fd3ab4361ff7070756363696e6fff44656361665768698f7070656492a23d4119b11c508c97aa9915b538a9949b
982309defe19b0102700321cc77182aed0bcdde017b08791e2a5e90134009c575ed19a99e901e90111bf23b70db1002dbf0ed143bff1b7cce668bfa1b940ec0095bfcccc22e3bcbd86efdebf35e9b6eb880db530ef9d9642709896918f90c6ff5c6abea955d3418d7f3c13fcd6f881e06c4129ab219f87910bd80e0d34cf
46cf006e9faf589b539192a65f92cff6d1a4cf54abef5035f04735a95035e047350199eccd1aaf2caf68a800df85af97af008f0fbbafcdafdfaff1af03bff2df27bf0039bfec5f3eef2f1ffcf368ef591ffff8e0b6bf3a1a951bc4ec3d1f00004702cf10ac7dc473417044ce114991ef1300b325c4e168ff74fdce1180c5
7f9f919ff8a39fff0ad3ff5540d83d57ff4aaac0144040aa58ff07b4dfca0140405a3fd148c037afead1c8b52309dae3cffc02036ea22e15620f2d13202b015515370c2e121f360844a276e52851a4b30762a50174c165fd0480c10138592758a9402580c9001fc5d3f401118368285f61f7e0ad3af4b1332e1522bf34ae
c73a5515bf34afc73a76e522bf34b0c73a88f5bf34b1c73ac4e522bf34b2c73af405bf34b4c73aead522bf34b3c73658236d235c5923f1116cb14fce11e83f7353e13f242f03fffff111c631e33100411d413a410857419141744167b8f44991860f662aae08230000c9682879b8f25480b901c4e1c4e11bd6ad06f00576
e22e04785488f22f8554c4e2d501d501f40221139f54ead2a6954f3215b9545f616405522e150f4a5358a4284064a103010174415515d55b62a3e953c4e58cb5d14d50e8fd3324e552d40460ff267b323634303939ff45462d374637412dff344345302d393235ff422d464345344645ff4641393642347d0031fe7441ea
d5d55bf03fe5574f330ed35b8019c4e458c452f45f0664903d5188f56c34542116d9643a4100c11be66457415dd25ed19141001de0007474410df2c4e51af4e4526cff23d69520469a04e43fc8718148d170f104542f80662f8c3f75e20ac152758851f7e15712c82598c2c5c72e05963064a40ac1042e15827558c82d9b
7fad7c5515c47f80d67fe87f0ac176e5068f188f2a8f7100c4d4abf13e414374d5014e79abf1abf980973ff203c7d180c1b901bf31499199f04f78d501f7e1b5239abc41340533ff81c3f7f85aafdf832e15ed8e20020c0d9f1f965515ed8559b625fe8d01bf529fde8476e5739e419d949f20956088f5ed85508cf6f644
16f0bf189d00c4e5f99eda1e8b16189df405ed858a73c1ca08af1aaf2095ead5ed85039d1f36d06903e48eafa0af20950080c5309fc2c4499f189d8565b69f17bc00d79f2095a7657fae4daf5fafdf83355580c2ae9cbfaebf7643c63155113dfc0400f0120e29f401d44f74ff5317b58194f900773143748b39c7f5bffd
8f2f7995cd28d66d14a03cfaed90d0c750183f2d4454fb2109fae1b580459d52182606ba5689508e01c80280b5819cf7d1d2abff91cbb585141f5500c4e02a1fb117fae64f1faf17cfc8764308e3310dcf1fcfff82813ccf48cf5acf006ccf7ecf90cfa2cfb4cfc6cfd8cfeacf00fccf0edf20df32df44df56df68df7adf
008cdf9edfb0dfc2dfe0d40041dfdff1df01fff5110eef1aef2cef3eef50ef62ef0074ef86ef98efaaefbcefceefe0eff2ef0004ff16ff28ff3aff4cff5eff70ff82ff2094ffb2f41d41b1ffc3ffffb751e0ff00ecfffeff100f220f340f460ffe99bf22fe5eb139dc63b3bf54a8f474083f239886086a6300dc0fc1cf07
c0990fab0f5a858a7e00d60fe80ffa0f0c1f1e1f301f421f541f41553e2f76433a413b71871c0921ce00bf31b21fbe1f5c770e41de153b7f4d7f40c62cb585192f83271b368424ea0e4e8a0d4850d62ba00038c331f920012803350137d232a4273817f623fe561672ba0084062811f623cb39033201694c4c1a5fe54e65
56b454c030ce3600aa21092137712f63bc22d74d6e55ad8f24bf87e92f55b830ff2f550f471c3f007c59194e99530925a75f925a5e75805f80925a1475f55fa0faf161553f673fff00dd81843f903fa23fb43fc63fd83fea3f00fc3f0e4f204f324f444f564f684f7a4f008c4f9e4fb04fc24fd44fe64ff84f0a5f001c5f
2e5f405f525f645f765f246f9a5f00d35fbe5f938fe25f698f066fdb8f2a6e09b331a4871c0721cec1216e6f7a6f0032a79669e61ff81f0a2fe06fb40e037500d2a6d29f267c8a715815967f0233e171fa033516ee7b4361707075ff6363696e6f44727908ad72581134811ca767c56930855379e594b6682324ae348010
27002f321cc771c0a0bcf8b0328008a261fd7504e134b72770a1b56904e10004e12c8f3e872881488f29a15e8f0c97006ab8858fbe8752bcb08fe79c34b3d78d8098bff98f47b9c8bb288542bfb86642f88b68b161aa60ea2b5917f6ffb94b4cbd397a9ee59774eef68711b43c6fa2610b023d9e0d4f9f619f896fca28b6
23ac6240c12fad9f08b1bf9fbdbf6b05f0ba0515a96b05e0ba059907ad357f477f0083781bafa07fb27fa1dfd67fe87ffa7f000c8f1e8f04bf428f548f073f50bf41ef000ed37abf6bef11d8d18f4ceaa7ebd6bc2e4fef000047e1e0b598948e11008b14e0e1646101f3cef5d6b17acf86cd80e0e19b959a6fac6fbe6f11
eae5cf55ff40dccb22acce3dedff3f40bce7a9352649fffd3f40f5499ff449939ff6ec98c7f3e6fe9f0ee20300897240e574df3fe33dd167e549dc40e2823106085f72af956c74c5d77d7501128f91650fe49b91386bf7737952f5109b9912efd7a306e1837af87a31f92021b64cc4c30340e5d104b7d90a67e522d104b8
d90aaf95d104b9d90a9ac522d104bad90ad6b5d104bbd90a06e522d104bdd90afca5d104bcd9066af3c27ff35c6bf303f1c31fe0e1e83f368e23e13f36ffffff03f1d80180f50112112f114c116911a311861167e0cac4646198df78fa1af30000c90a7af879cac254cbd1d6b1d6b136a648bfd602e5af922e8a249ac22f
972410d6b2e7d1e7d106e213b124fca2c16542610215cb247a3146c240e50f5c2336737428407f71010147c167e5c0e72b7d73fb23d6b5c7a15f20e8fdf845f4f722e6d460267b3939ff3643423338412d36ff4634322d34333633ff2d394246462d3032ff32364645414137321f34357d00fe47c1fca5e72be3f03ff727
6103e52b8019c400f628d622063f18344f219ac57e0466f11847a147a14c11001bf83469116fa20c70a1a311001d124486111fc2d6b5fe2cc4ab0a408216ff1cff4eb7e22b9d83be1e836a7003e466ff78ff9e0fae92aa2861489a21e2b1f2daf598dd95d9fe0105a8007f74884140e59445caf0dcfb00ad4fbf4c67e5d6
4fe84ffa4f8841af9508185f2a5f3c5f71d6a4bdc16d11554400e7d16049bdc1bdc9a90f04e3d9a19b9108cbd1d1016461996148e7d1e2b1c7f35fa6bc4134331161c309d800757ff15340e5ff5e14dc1f6f316667e510ff556253cdf0106dbf646ff054af9500856e536da66f32659ac5856bdff608d60656e6f0bf2a6d
d6b50b7eecee9de6102a6d06e5ff559c43d61a7f2c7f326514fca5ff5577dc71f711d6a87fba7f009b95426fdd945b6f2a6d9735c86f298c00e96f3265b935917e5f7f717ff153472580d47eae8fc08f2b93d80167e14fcc040002f220f906e1e61f86cf65e7c751a6c900890155449d09d9c5d1cda1ff605f7ee5eba03c
0ccd90e29750182d9f4454fb2109e5b1c7509d2264e826006a6859625e01dad2c75140aec7e3a2bdcfa39bc75526ef55d6b0003cefc3e7e5b661efc1e7e1988813f501041f9f319fffbd014e9f5a9f6c9f7e9f00909fa29fb49fc69fd89fea9ffc9f0eaf0020af9abf44af56af68af7aaf8caf9eaf80b0afc2afd4aff2a4
1211f1af03bfff0007f120bf2cbf3ebf50bf62bf74bf86bf0098bfaabfbcbfcebfe0bff2bf6cdf16cf0028cf3acf4ccf5ecf70cf82cf94cfa6cf10c4c40821c3cfd5cfffc921f2cffecf0010df22df34df46df58df6ad97e5270817f263577e24b15b886d8fa51f3a898d866e50461b5077708c0abdfbddf6c559c4ee8df
80fadf0cef1eef30ef42ef54ef66ef552050ff88134c114d4199ec09339ed10100c4efd0ef6e47e7f1f0e54d4f5f4fd8fc20c7552bff95f787d696f4f6201e1f184550e8fba01208d5010b00011505141307e402a439081708031036848a8b008418f8110803dd09150269005e1c2c2ff71e7726c624d200e006bcf100e7
f149414133cef2e91d8025bf5fd15712fbff55ca00110f5521172e0f8e29002b1eab23e7f5b92fa42a7045922fa42a402645073fb2ca0341670f790fffef5100960fa20fb40fc60fd80fea0ffc0f0e1f00201f321f441f561f681f7a1f8c1f9e1f00b01fc21fd41fe61ff81f0a2f1c2f2e2f00402f522f642f762f882f36
3fac2fe52f80d02fa55ff42f7b5f183fed5f3c3ebc04437499ec07339ed3f1803f8c3f447700a839f8ef0aff1cfff23fc6de1545e47600e46f384c9c416ae5a84f1403f3411505fca264cb35436170707563ff63696e6f45787472ff6145737072657373116fbf426ae146511cb937d7394255ca654994c83823367e4650
10275f00321cc771dc70bc0a90104450b4310f5516b134c9f78c71c7390016b116b13e5f50573a515a5f3b71705f001e67f986955fce596e8cc25ff96c508300e95db48f0b6f6389e48b3a555e8fca36f1429d38c331bc307653739aff5f9dfb488e9b49912f053300b45531bd4e3fb431050b4f6e0d616f736f9b3fdcf8
c8f380be32d3ffbf6f2481d16fd98f7dd5f02aded5a97dd5e0ded599197d474f00594f95482d7fb24fc44fbdafe84ffa4f000c5f1e5f305f208f545f665f190f6c8f005dbf2aa3968f87bf2da8e35f68bac3bb5cf28c6bbf000047fdb0beaa6400a0e19de4fcb176311dc3e0c5f281969f00a29dfcb1ad65ac3fbe3fd03f
2dba01affe6bd0e9424db0bf0540ff40c4e7a9352649fdff3f4051d961ea72fb49fdfe68e3c3ed107f2ab2039b42005cb590af5bb359a183b565ac5cb24dd641087142e7f57e44e1a78f4501a16109652bb4ad613887c785496ec5ad69882ebff37322b18396c88c010b00bf006894dfd35cb5edd47cf1f8d783b5edd411
c1f5dae7f5edd4c2f5dab695edd411c3f5daf285edd4c4f5da22b5edd411c6f5da1885edd4c5f5d686c39bc3615c87c31fc1dfeffcb1e83f30a31be13f52cfffff1fc1f4d17cf1402ee14be168e185e1bfe1a2e167e694707631b4af94ca36c30000c996c80579e69254e7a1f281f2814876dba6241eb5e7f22ea6f4b692
2fb3f4f2820803b103b122b213cdf41882d3357dd25915e7f48c0100b459b80f78f3368544284091410101f7f183b5c0030b8f431703f285e3717bf0e8fdf861c4130202b460267b3445ff3334343839412d31ff4436312d34454441ff2d414135342d3143ff45383935363937301f37427d00fef7f11885030be3f03f13
077dd3010b8019c4001208f2f2220f34046bf1b6959ad482c11916071468e1001b141485e18b720c8c71bfe1001d2e14a2e13b92f285fe4894f560dbd4a30203ff4c96d82a92c3a66c838d701fb482cf94cfbadfa382aa287d18b6f125914df6c598ef65f5ce4105c4d09144a4115cb5b0154ff6cd00c91fdb1c83b5f21f
042f162fa411a48508342f462f582f71f274d991553171140003b17c19d991d999c5df20b3f571ad6108e7a1edd17631997d1803b12591e3c35fadbc4134332d31c325a800874f0d335cb51b3e30ac3b3f4d3683b5121b3550e4c52c3dbf803f0c34a48500a13e6f3dc23f4e35b6951b357e2c24a60272b6f0f4d0483bf2
85274e08ceb9b610463d22b51b35b813dd364f484f4e35fc18851b35fc62c92f967c001bafcd4f5946ad655e3fef64773f463d00b305e43f455c054f4e35d505ad4e7b4f008d4f0d3363f5f04eca5fdc5fa4e3f4d10483b16b9c041ec23cc922b102ffa29f0081b7e321c29959747411b9d9f595ed9db0bdcfa735fbc89b
b4b03c289da0fefe6750182d4454fb2129092891e3209d80b8261c3a8429027e2e01f6a2e321ca97ff72d99fbf6b04e32542bf55f28058bfdfb728967dbf40ddb7fd68a4e311e13b6f4d6fffd9d1006a6f766f886f9a6fac6fbe6fd06fe26f00f46f067f187f2a7f3c7f4e7f607f727f00847f967fa87fba7fcc7fde7ff0
7f0e84082ee10d8f1f8fff23c13c8f488f5a8f006c8f7e8f908fa28fb48fc68fd88fea8f00fc8f0e9f209f329f449f569f689f7a9f008c9f9e9fb09fc29fe0944be1df9ff19f01ffe5f10eaf1aaf2caf3eaf50af62aff074af2c49edc28c517060ff00c7fe07c0a2a86dc3a1a850213f7967e525a20811e1caaf00dcaf8b
22b81e04bf16bf28bf3abf4cbf085ebf70bf82bf556ccfa4e368e1691102b5bc094f6eedd1e0bfecbf8a173ce1000cc5691f7b1ff4cce32547cfb1c749d652b2c4fd3cee3be85004dba02ed844f1d127d00131d52fd700e2a455d8b11724d32c06a05a008434c8110824d3f9d931d2697aec48ff13fe93f600e2f4eed0fc
d6d8c137c165115d03eac22005fd9cf5db2fed2717df55e6d02ddf01553de74adfaaf947eec7f337c5d5ff00c0fa8c15aeffc0fa4215230fce9a1f110483df95dfff0b31b2dfbedfd0dfe2df00f4df06ef18ef2aef3cef4eef60ef72ef0084ef96efa8efbaefccefdeeff0ef02ff0014ff26ff38ff4aff5cff6eff80ff92
ff00a4ff520fc8ff010fecffc12f100f972f48340f093f580ec55f44b5bc074f6e00efc19c0fa80f6047c40914cf26cf38cf000e1fe2ae31150056004f541cb81186b5d0c41f30d30f2131d5271c2b4361ff7070756363696e6fff4578747261457370ff726573736f5768698f70706564db1286b162211c50d507f3095e
25811994e40823524efe6220102700321cc77182ff40bc26606020d0012b2532813400e5c7af41e309328132815a2f6c27562100762f57418c2f3a371566b12fea29915c00de2f154c7353053dd75f273f8659076b885625815fe60642b908df01d80043ff54511b68ea3340a07f4c1bc635c3d81fb5b129c66a0fd0010b
6b3e0d7d3f8f3f00b70ff8c8e4c3da02efcfdb3f4751ed3f54fc5f99a5f0e8a5a999a5e0e8a50199354d631f751fb118494fce1fe01f00e07f042f162f282f3a2f4c2f435f702f00822f35df8f5f808f4d73b95faa8f5078e0ff2f8b8ae68b156c8e8f000047022090c7c634bcb1b9b41f919201409300fc951561b96fc5
6d1f91c935c80fda0ff8ec0f508a247f55402787aeffb9b6ec114040bce7efa9352649371009f8e64fd5c4b3f41a4806a3e42c4f024d8203b7127f85b37f7e837c71a68508887c7f8270a6088d12dd359a1404874aab1501bd31654e84c93138aa9740a1199195c939518f1653458183b99884a8d127d0c88b6402b37f85
10b4c98818baa68510b4ca18badd3510b4cb8818bad96510b4cc18ba156510b4cd8818ba458510b4cf18ba3b5510b4ce0818b6a993be935caa93429102cf1f91dbe83fbcc3e13f759fffff00429117b134b151b16eb18bb1a8b1e2b102c5b16709749201d77fb79a59933dc30abc95790972540a8115611561644648fe76
4185dd322ec9c4d9622fd6c410156226812681458213f0c43b52ef05b2a0a2150ad4a8d100b47c880f6c9bc3a1142840ad1101011ad180a68526dbab133ad3156506519ec0e8f1fd849436d2258460267b42ff413136384643322dff393041412d344245ff302d393131332d39ff33444639453733393f3242377d00fe1a
d13b55c626dbf03f36d7a0a324db801901c435d815d245df57d434b1d965bda432a591162ae48bb1001b37e4a8b118ae42af41e2b1001d51e4c5b15e62fc15656b64fa71df23dcb0ff9b49b2fccbfe70fe07d42b704284a59fb79fddafdc3251aaa0e8d9c1fd310619a5980b458218ae05e7a0ad14c7e17f85d3e5080019
adeceffeeca68515ff27ff39ffc7e110dd3557ff69ff7bff711554fc618fb10094e426819fe9fc61fc69e8af4383185110c9310a8110b1920199a0e82681fd31be06a3a4bc4134335001c3004878a31f30037f853e0e537c5e0f700620a6853e05a1f30ca04f0dbfa30f2f0400dd35c40e920de50f7105d965c40b1ea60c
47769586f0bf690d15654a1e2b9e20dc86690d45853e05dbe3d4591f6b1ff871053b553e050c74da40a7030defdf1ff11f7105c935810f0b44009a0f690dd6d5071f682c281f7105f8d500d01e9e1fb01f300386c5132eed2fff2f10c7b317b1a6818e6c0441925f9945810025cfc56fa4870601e569c8a194e4dca96018
75107de09f9fffbd85a03c4b6dfd90214750182d4454fb5321094b6106009da388263f0a04a7f9a1fe0119820601ed672252fc6f08e23b0605658f5515607b8f02974b6680a08f00972048c7b334b15e3f703fff00fca18d3f993fab3fbd3fcf3fe13ff33f00054f174f294f3b4f4d4f5f4fd95f834f00954fa74fb94fcb
4fdd4fef4f015f135f10315451b1305f425fff46915f5f6b5f007d5f8f5fa15fb35fc55fd75fe95ffb5f000d6f1f6f316fab7f556f676f796f8b6f009d6faf6fc16fd36fe56f03746eb1027f02147fff08d1317f3d7f4f7f617f737fe0857f977fa979abf2af212635774fe24b15b8c5789093a8d778ff66e50461b57708
c000ea7ffc7fabf5dbee278f398f4b8f5d8f106f8f818f938fa58f558f9fc7b38bb1048ce1d88c09723e10b1039f0f9fade70026a12f958cef9eef17ac06056a9fd497a46ca6d594f45fbe5eb85027aba08851a814b117200154a552a723b2a46278a81714234fd6c32a00845798111114231cb954a2699dbc6bcf36ce00
b6c605d411b01fb6fb9126a188e180d3400da228cdbfc5feff10073aaf5509b00250af5560b76dafcdc96abeeac326a500f8cfe3caafe5d1cfe3ca65e546dff16a0842e1a6afb8afff2e01d5afe1aff3af0005bf17bf29bf3bbf4dbf5fbf71bf83bf0095bfa7bfb9bfcbbfddbfefbf01cf13cf0025cf37cf49cf5bcf6dcf
7fcf91cfa3cf00b5cfc7cf75dfebcf24df0fdfe4ff33df90baff57df2c0f7bdece8214d88c0700723e12a1bfdfcbdf8317e7d9379f499f005b9f31ef058e54e52326231f77ecdbe1a0a985e7ef53a332f154a51d3ffb43ff617070756363696eff6f4472795768697047706564fee2a98185f11cf8d72816e981f5a4e994
07e823751e85f07f102700321cc771182041bc493083f0f3d14ef555513408a700c81106e9555155517dff8ff779f199ff007a11afff5d073836d4ff0d09aa2c010f00381c8c23280df02f4a0f9f29203b79f5c49a2f09e642dcd802e1fbd0bc8dff6a5ffc086944ad54bf320c8f911243d881cf148ddff3d10b8e0e0da0
0fb20fdadf001ba807a3fdd212affe0f6021101f153faabc75f00b85a9bc75e00b859900581d86ef98efd4e86c1ff1ef03fff94f0027ff39ff4bff5dff6fff5c2f93ffa5ff0058afa82f995f6643d22fc35f6948220f70a45aff5b2e3ca75f000047396001d0e904df81dc843861b5d159631f75002e31d23fde3d3861ec
05ebdffddf0feffc695a3d4f5540536b4c92ff0a5c104040aa58077fb4dfca0140401a66e249f13d181f73e14f1f665203dae2009855cc4f97539541bf55a14c985289764108b0e226a5bde41d57cee501e00109656754ec0138c367c4e9aa65ec09886a5f2f235e5183d268cba14d40d110a4341b8398552984d2318abf
55298411d3318a26a52984d4318af235298411d5318a2e352984d6318a5e55298411d8318a54252984d73186c263d763615cc3635b611b9f3861e83fdf931be13f8e6fffff5b6130814d81406a818781a481c181fb81de8167224470b5d1f04fd06a72630000c9d268057922425423512e312e3187161756245a5526a22e
e294f2322fef942e32083f513f515e521309a4542212e5b972591523a4cba100b495580fb49336c4e42840d0e1010133a1bf55c03fabcee353a32e351f21b790e8fdf89d644fa23e5460267b4631ff4545313532432d37ff4333332d34373739ff2d393645362d3030ff32414242444535461f38307d00fe33a154253fab
e3f03f4fa7b9733dab8019c4004ea82ea25eaf70a4a791f235d674be61191643b4a481001b50b4c181c71200c811fb8197129811de8177322e358434ffe9a68fee01d29d4cff820ae56ed0088b5941705b54be6fd06ff67fff02aab9b894f2914d41183275982e15317e05200080d0e4e0b19855ecb519327d05cf0017cc
bf552ecf40cf52cfe0b1001570cf0482cf94cf712e241541c581adb43f5100b8b915411549018f5c533121ec01235184d781b5d199b9b83f514d411f73a12fbc41343369d1c36148c6ef0049d3985557de6c4c77df89d6bf5557d508bac3257068ddbfbcdf48d40015ddde00abddfedf8ad5f235dddb37766046ae5603f0
bf82dd2e3563ee446ef55682dd085e5557d5f4b3d172ef84ef8ad55425fe57d5a60d74da40a7ea00f8ef0aff8ad5ec059adf2e14b3df82dd00efa520ef81fc41ef8ad511b5e9eeb7ef00c9ef49d39f952cfe060f180fe083308104bf51a73c045a6278695e513e9fde3f00bd571fd1fe39e171adb4f5793145294db0f96f
5dd53778d754a03c643d90fe3a1750182d4454fb21290964311fd09dbc58261a1fc5c402bace0132521fd106473b22154ffb0b041fd57e5f552e30945f1b676436b95f4019673918e0834d81770f890fffecc100a60fb20fc40fd60fe80ffa0f0c1f761f00301f421f541f661ff22f8a1f9c1fae1f00c01fd21fe41ff61f
082f1a2f2c2f4a24086a81492f5b2fff5f61782f842f962f00a82fba2fcc2fde2f483f023f143f263f00383fc44f5c3f6e3f803f923fa43fb63f00c83fda3fec3ffe3f1c4487811b4f2d4f01ff21a14a4f564f684f7a4f8c4f9e4ff0b04f68e9d6c2c8f1d0ba613fc7e01fb0de48a963dd48509d7fcb6e7f4d2308c0035f
00155fc4c5f4be405f525f645f765f885f089a5fac5fbe5f55a86fe083a481a5b102f15c098b0ed7811c6f286fc6b73f71004865a5bfb7bf307c1fd5836fed67857652ee64f1788e778850407ba06a78442d816370016d756b773c82a49178b117607368a6dcfa008470681108607335896d7269b68c849f4f9ecf96001e
a42a80388614713f71a1b199a3267220419dd89517df29d7537f552280697f01557987867fe699838e03a33f7511af00fc9ac8b5ea9ffc9a7eb55faf0a4a5bb104bf7fd17fff47d1ee7ffa7f0c8f1e8f00308f428f548f668f788f8a8f9c8fae8f00c08fd28fe48ff68f089f1a9f2c9f3e9f00509f629f749f869f989faa
9fbc9fce9f00e09f8eaf04af3daf28affdcf4cafd3cf4870af45df94aed79be4f15c078b0e002b71d8afe4af9ce700b9506f626f746f004abf1e5e6db53cf63cef90bcf4b1c255d000cf6c734bc16d751a58cb4361ff7070756363696e6f7f5768697070656417c284c2519ec11c11b72fb99ac5bdb994f220b8238eee9e
c010270032171cc7712ef0bc62009cc00cb10467c56e21342177dee11fb96e216e210096cfa8c792c1b2cf93e1c8cf76d7d4f800efcf28d7c0fc1adf51eca2f341dd060f4063dfb5f9360b92c5b0ff22b642f5a8fc1bb114b046ea54a4ec7dff49489d459f65a3c74ba3eaf151d8a6af0cb10ba7de010db9dfcbdff3af34
78207316b22b7fa017ef76f129ef2b0fd545f03655a90ad545e036559971ed9fbfb1bfedb80085ef0acf1ccf0f2f40cf52cf64cf76cf0088cf72ffaccfbecf717fbeffaf2f7c1300e8ffd92f7f183bdfba2a153b440cbd2f170000474f30d93624f851f554004e312b13713138454401e80ff40d3525c04e3104bf16bf28
bf7f2a531f5540ffac703d0ad7a3d83fff4076bd394d2cf10795407c74e86e1ed868ef7c220300f3b2ae25e21fad23ab11d525b71cae22829f4608c9b23f75d6b4be39e9b30112f9d1657d2405e138d937ddb94e312005e105e9802f45f3742183e838e471426370daba043153ae253f54db475a44d5253f54dc475a3f75
3f54dd475a4408153f54de475a44053f54df475a4474253f54e1475a6af53f54e0475604d833ed335cd9337131316f374382131be13fa43fffff7131465163514080519d51ba51d7511161f451673814a0cea1062fe63acea14e31c9e8387902381254392144014401a0e62d267025123f722ef86408122f057444025521
8455217422131f746af22bb5c432152c3974e47100b4ab280fca63ddb41b2840e9b101014971d525557b60e7b36973440535f1cd60e8fdb334fc6572542460267b444433ff46443431432d3541ff42462d344231382dff383531322d373435ff46394332383544458f447d00fe49716af5557bf0713f6577c43555798019
c46478804472747f8674bd610815ec44d431160c5984ba51001b6684d751dde2dee1068261001d8084f4518d0244059a04ff1586fd162a938144ff9752037dcf147003017171242b11db51dc345521e7392b11002b19175f722347f105e13921ed51cea1f199e83855212f3798bc413405333491c37718dfbf1493ae2522
9ec0821c429f5496d52522955463e73f02329ebf879f139419e5a89e769dc99f70559508152295e9b1ffffd76e1e06c426f0bf4d9d44052eae5a3e0b36704d9d74252295a171ffffc73daf004faf55956af5a89b43e6cbafddaf05e500659f47e47e9f4d9dc435eb9f4cbc0caf0055952785b4ae82af94af1493b565f7ae
1cd1bfe3bf00006eff88ec4ffe4f04e38ff58ea9e838dee1a420d541a0c50051cd8dc1ae2599cfabcfd228c8cfdacf003c18f7cf09df051826df38d8ae238dc160440555df38df712884dfff6198df0869f6b3df96de703fc4d43fe63f66cf423e12aa21e80871b8a73ca0984cbb024d480570c04f9448e1ae2554e536ac
006bef7deed52596efa8efbaef48e13f1580d8efeaeffcefdb514651d521bd0c040070328e397421546ff40fd32771c114190051c115e465c947153f1d0f4fae9528ffeba03c7a0d901b0750182d9f4454fb2109530171c09d22d228262c3a4d4821ff01482271c1401c175b222b1fdcfb71c5942f55948000aa2f31371c
06cf2f2f371a08f65363510458ff6affff3ec187ff93ffa5ffb7ff00c9ffdbffedffffff110f230f350f470f00590f6b0f7d0f8f0fa10fb30fc50fd70f80e90ffb0f0d1f2b1480512a1f3c1fff0042c1591f651f771f891f9b1fad1fbf1f00d11fe31ff51f072f192f2b2f3d2f4f2f00612f732f852f972fa92fbb2fcd2f
df2f10fd249d51fc2f0e3fff0a912b3f373f00493f5b3f6d3f7f3f913f1ff908420c417f39dc63b3bf54a8bf38fa8a5398d1386a6300dcc107cf07c0e43ff63f08455cee214f80334f454f574f694f7b4f8d4f9f4f5520895fbd8364810de1d24c096cfe447100fd4f095f2ee7206129550def1fef116c9071c5645fce57
c03de8597e58785022216ba04b680e714460014e654c678a1d72a4726817416351c94f97004584515811416316794e6269977c080b74258f18770e72680a910b70197600f5512061aca1ca810564228daca1aca5086dcf7fc3346f5503704a6f5c6f6e6f00ce886a78e4832065f28fdd8a30e5cb8f10dd8a69a5409f191a
df9d6faf6fdd6100fbb1cf6fdb6fed6fff6f117f237f357f00477f597f6b7f7d7f8f7fa17fb37fc57f00d77fe97ffb7f0d8f1f8f318f438f558f00678f798f8b8f9d8faf8fc18f6f9fe58f001e9f099fdebf2d9fb4bf519f26cf759e09e079d4d24c076cfe0c61b99fc59f007ad7ed91295f3b5f4d5f23afc95f2dfa15e8
0545c932ff3f71acd5a1d4b5d0e1afacb32cb1adb51339bb436fff6666656553686f7000f8a2d4b17fb1e2d1f59430e97bb59ea9e59401a8236fde7fb01027006f321cc77108e0bc3f7bb2e2ed9142f7c8fc91f590bd41c4ffc105b7464b9d17059f453bbaad21f55183c3000300340267b8d100a94f114f1177bf0089b7
73b193bf74d1a9bf57c758c6cebf0007c9bdecfbbf32dc9fe322cf05fe45cf20b3e833fb73b5adef191ae1879fed91050b88ce0d9acfaccfd49f1568016380f7920c6ff8cf73e10adf28ff40d5f02a0545a940d5e005459952dd80af0092afcea866dfebaffdafe90f21bf33bf0045bf57bf69bf6fef8dbf9fbf6cffbbef
00891f5603e5efb31f59081ccf4dfff4161441ff9a1e472920e2e3c4d941d644002821af91492319352421c2ffcefd2821c0e6c5e59ff79f09af591a2d0f5540bfac703d0ad7a366a0767fbd394d2cf10440400f0441df760a03d4a28815bc0f8713850110af15910c8812793608aaa22065b7a4940d17c8a501dac16557
14e6c13880b327bea99a25e6c95a1f42e34e118308c228c5614460e394f40b438815194411e4214aaf151944e5214a2065194411e6214ac3d51944e7214a2425194411e8214a4e151944ea214a67e5194411e92146b223c7235cb3234b210b5f6c50a3d953e13f7e2fffff4b210020413d415a4177419441b141eb41ce41
c1671204af91e00fc02a6223000015c9c228791202541311242124219081d607164a1520622ed254c3d22f00df5424222f112f114e1292d192d167e2640ca5a932151364c56100b48518d90fa453bea42840caa10101002361af152f6bc8a3436324250fe1a750e3e8fd8d243f622e1460267bff4636324441413633ff2d
364646372d3438ff37432d383738372dff42433333313337367f383039417d00fe23618c67e52f6bf03f3f67a9332d6b800319c43e681e624e6f60649751c3d564c634ae211633749441001b407430b141b7d2b8d1eb41001d5a74ce41f818e2242525e423242646a3ffc6474b83dc229e350f9b60c4714b140501b541b6
24002f11c12905010509f13f4c1344e1e6c1881311c741af9199c2282f1155c7982fbc4134330e81c35108c0af00ee738815fc7e5c0c1c8f2e86af15fc75162e53e73f0c8ebf618fed74fac580828e508da38f2f85c3d5fc75caa1ff33ffd7480e4ba6f0bf278d242580089e342ee516278d4e15fc757b61ff83ffc7179f
299f2f8567e5828be1009d9faf9f2f85e6c53f8f28db5f8f2e8600df65c58f26ace68f2f8501758e9e5c9fc06e9fee738f55d19eabafbdaf0000417041e4ae2fc02fb97fcf52aa30b848e251929716909828db24d805c37000298457b1881563b5109c7abf8cbeaf1500a5bfb7bfc9bf57b1fac5e7bff9bf0bcf10b54120
41af1197fc044a2268294e11002e5fceffad17c471eef9d13124b4e539e02105190de92f888537cfa03c40faeeac902ad750182d4454a7fb21092bd1c4709dac18260815aa49c830cf012212c471f6f74ee210050febcbc4756e1f552420841f4ff7002bd6a91f18a729d8d0433d4167cf79cf01ff054196cfa2cfb4cfc6
cfd8cfeacf00fccf0edf20df32df44df56df68df7adf008cdf9edfb0dfc2dfd4dfe6dff8df0aef201cef3ae45a4139ef4befff4f2168ef0074ef86ef98efaaefbcefceefe0eff2ef0004ff16ff28ff3aff4cff5eff70ff82ff0094ffa6ffb8ffcaffdcffeeff0c047741040b0f1d0fff11613a0f460f580f6a0fc07c0f8e
0fa00f2ec93bc23fc139dc9f63b3bf54a8ce08992398fee0086a6300dcc1cf0701c0f30f051f3bc56bbe301f421f541f20661f781f8a1f9c1fae1f55982fd0430894411cb1e11c097bcec7410c2f182f003db7d05138251cbf2ebf203cc475732fa4dd27cf0de8684e674850303ba0885a381d415330015d355b372c42a4
628138175033586681aa008460281111503325495d3269a64c745f3f5e00bf560e641a4028460431d051cc518963401632315dc85543bfce77433f55124000593f6b3f7d3f17a87948f353bd85016f00ec5afe35da5fec5a6e754f6ffafa4b7104af3fc13fffec71de3fea3ffc3f0e4f00204f324f444f564f684f7a4f8c
4f9e4f00b04fc24fd44fe64ff84f0a5f1c5f2e5f00405f525f645f765f885f9a5fac5fbe5f00d05f7e6ff45f2d6f186fed8f3c6fc38f48606f359f846ee95594e11c077bce001b31c86fd46f5697fc61382f4a2f5c2fa8327fd82f3ccae838c5c941cf3f00807ce471e385f07fbb833b81bc857da1fe4b88457370726573
73116f0782e3818e811c01773fb98a85caad79941078237eae8e801027df00321cc77115b0bc3fc48a82fc614206a80b710470db74ff6069339ec94bab853f29cd7705ccb404319293070000341137c5a10f795ee15ee100868f98878281a28f83a1b88f6697679600dd8f1699cabc0a9f41acacb3319f12ce40549fc0b8
40cb8285babffafaea966f0afc610b979e0da99fbb9fe36f243800103306721b3f07af80b119af35cf4fa555f0bc05a94fa5e0bc059961ad008f7fa17fdd7875affa7f0c8ff6df308f00428f548f668f788f7cbf9c8fae8f79cf00c8bf96ef63d3f2bfc0ef66d82b9f5acf2801f64ecfa7ee4736f0ebf294e81100e51435
f1be6156f3280531f1cfcfdbcd8035f1f595f46f067f187f66ea3adf55ff40834cdcce726ff5ff3f4076bd394d2cf1ff044040f46ae259d19348ec46a71b04dc58af63e20300e37299a9cddf90d3bce59edc95e286064108b972e3e5c6741ae7d77501e991096564e4f59138c0f7cd79a7f5f5998867ef4fb35be183cff8
d4315330ec10a1c4181395e52614ed2e1abce5261411ee2e1ae3e52614ef2e1aefc5261411f02e1a31f52614f12e1a5be5261411f32e1a74b52614f22e16bff3d4f3c15cc0f358f1182f50d369d3e13f068bffffff58f12d114a116711841110a111be11f811db11671fd4be61eddf5ccdfa6ff30000c9cff8791fd20154
20e131f131f190a614e657e5e3e2092edf24efc22fec2431f23ce13ce1425be213063474b21b75b60215203496d43100b492e80fb123cd74280d40d97101013031bce53c3bd77330503331f51cb1b420e8fd9af44c32fe3be460267b36323043ff453143462d353939ff442d343446382d42ff4545392d30444233ff3543
433835433434c77d00fe303174b53c3bf03f384c37b6033a3b8019c44b382b32405b3f6d34a421efc5d304bbf116404406a111001b4d44be11c4a2c5a1f81183001d6744db1125b231f532b4daff7f381654f3844992ff2bb0a9b9a751a1702058e4bbffcdfff30fe2e2aab648ef214a0601f02f059837a42d0f05fd0010
d974dd4195e5e945f22f0d025f145c00bce52b5f3d5f4f5fdd41e3e56d5f7f5f02915f714eb412d1c211aa443ce1b5490012d112d9fe0f59e351b1f59120e12611c2be6199b6483ce106011c039cbc174134336661c35ed8cf7f46638095e5546e69dc746f8666bce55465f3041d05656dbfb96f4564e3e5da6ea86d80fb
6f8765efc55465b75c4ea6abe6f001bf7f6d31f5607e41fef2e67f6d5be5045465f143cc6f7f817f876574b554657f36d069039d36e5f57f00078f8765f595976f37abb76f9276ec35001d7f7e8c3e7f87650e45e67eb47fc67f0046639c25298e039f159f85932d11bce102a4cc0457f275f95be13b2fdbcfbae7001c61
fbc9de01aa44f2092ed526ddf6ffb8e065340850a4a03c4041fc90fe37a750182d4454fb21290938a11c609db9e8266d8abd5902b75e012fe21c6103d75bb212dff89b041c657bef5531f091ef5cc738a6b6ef4016f736a8dd134a11749f869fff121100a39faf9fc19fd39fe59ff79f09af1baf002daf3faf51af63af75
af87af99afabaf00bdafcfafe1aff3af05bf17bf29bf47b408671146bf58bfff5cf175bf81bf93bf00a5bfb7bfc9bfdbbfedbfffbf11cf23cf0035cf47cf59cf6bcf7dcf8fcfa1cfb3cf00c5cfd7cfe9cffbcf19d4841118df2adf01ff1e3147df53df65df77df89df9bdff0addf65793222c581d0ba613fc7e01fb0dbd8
a6f3dad8509d7fcb6e7f4d2308c000ef0012efc155f14e3def4fef61ef73ef85ef0897efa9efbbef55a5ffdd13a111a24102eeec09889e261119ff25ffc34775110045f5a24fb44f2d0c1c6580ffeaf7dcd652ebf4ec751e7418503d0ba06708442a117080016a0568073912a48e08b1176d836536d98a00846df811086d
8332196a0269b31c812f4c2ecc26001b3427103516110170f19e4196332302203e2dd525146f2667500f551f10660f01557617830fe329801e003370f50e3f00f92ac545e72ff92a7b455c3f07da584104bc0fce0fff4461eb0ff70f091f1b1f002d1f3f1f511f631f751f871f991fab1f00bd1fcf1fe11ff31f052f172f
292f3b2f004d2f5f2f712f832f952fa72fb92fcb2f00dd2f8b3f013f3a3f253ffa5f493fd05f486d3f426f913ef29874eeec07889e002801d53fe13f9977fd394dff5fff71ff00474f1bee6a453986397f8d4cf141bfe5c0fd4f690348516a05d3415858446fff75626c65457370728f6573736f1452bfe19b511c500e47
2c499755ba49941d48238b7efe9b50102700321cc771822880bc5f909950094164556bb134001e07d8711c496bb16bb1935fa5578f5100af5f9071c55f7367d188ec5f2567ba8c00176f4e7c9c833e6d009f606faf89309b888f55aa8f1f4642f2381841114035ffe73a9277580b418d7f56e800f27206b1eee129f3a33f
09410ba46e0db66fc86f00f03f31081d031342280f147f7081267f54259fd2d5f021e5a9d2d5e021e501996e7d9c4fae4fea48827f075f195f0009bf3d5f4f5f615f735f855f6c8fa95f00bb5f6e0fb88fa9bf76a3e28fd3bf79a860386fb4ba0fcb3e9cb7bf0000010000002100000021000000000000000055a6e9f204
ebf005ebf006ebf0550debf00eebf013ebf015ebf05516ebf01bebf01cebf01debf05521ebf02eebf02febf030ebf05533ebf034ebf038ebf039ebf0553aebf03bebf03eebf03febf05540ebf041ebf042ebf043ebf05544ebf045ebf046ebf047ebf05548ebf049ebf04aebf04bebf0554cebf04debf04eebf04febf005
50ebf051dcf0000000000000556cebf034ebf02ce7f429ebf0fd01fff10c39e04408fbff1840ec34b1c4a3684b0940e3f8021f04eaf10bebf0ffac36d2294bdc0000f589ebf0432d02c430d22915d4370006ebf041e9f202015532ebf014ebf012dffc01e7f4fd40ebf02430d229dadc3700004debf052000548ebf03cdc
ff040f160f280a5532ebf014ebf012dffc01e7f4fd45ebf06c30d22946dd3700000debf05200556cebf014ebf04ce3f801ebf0f504e7f415ebf0dc15bd29ff5c2c0000deaf0000f7d300c9ebf05c0fbd29df3adc000011ebf04000fd3febf03c16bd2927dd7700001febf0520044ebf01fa417bd29533b0655010524ebf0
18dcff040a0534ebf028dcff040f16085531ebf0fff2f007ebf028e8f3351cebf00cdcff0003ebf0f6f1aae6f501ebf002ebf04f220844c22602553d01e8f3f2f1510fffff204a056609e0fb2901eaf168220801012f02005418ebf004790f87062aeaf1bce3f82b1602552c02de0fbea80d07060000c985081e82260251
2d01b70a19011901db0248002a04390f2800540f59131901671da90f508c0f9e0fb00fe9f29be3f84516020151ee0ff01f022f142c0000000002000000554d4c204e6f726d616c0000000000f517ebf001ebf056697369ff6f457874656e64657f64446174613100f513ebf002ebf0554d4c50ff7265734f7074696f076e
3100f516ebf002ebf0554d4c53ff757070726573734f3f7074696f6e0002000000554d4c56657273696f6e0000000000000000000000000000000000010000005768697465206c696e65000000000002000000436c6173730002000000554d4c54656d706c6174650000000000000000000000000000000000f518ebf002
ebf0554d4c41ff75746f4c6f636b54ff657874456469740000000000f513ebf002ebf0554d4c50ff7265734f7074696f076e3200020000004f7065726174696f6e730000000000000000000000000000000000020000004174747269627574657300020000004e616d650002000000506172616d65746572730000000000
000000000000000001000000506167652d310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000554d4c53686170655479706500f512ebf002ebf0554d4c4fff626a65637447554903440002000000554d4c4572726f7200000000000000
000001000000436c6173732e31300001000000436c6173732e31390000000000010000004775696465000000000001000000436c6173732e32380001000000436c6173732e33370001000000436c6173732e34360001000000436c6173732e35350001000000436f6e6e6563746f720001000000426c61636b2066696c6c
0001000000436c6173732e36340001000000436c6173732e37330001000000436c6173732e38320001000000436c6173732e39310001000000436c6173732e3130300001000000436c6173732e3130390001000000436c6173732e3131380001000000436c6173732e3132370001000000436c6173732e31333600010000
00436c6173732e3134350001000000436c6173732e3135340001000000436c6173732e3136330001000000436c6173732e3137320001000000436c6173732e3138310001000000436c6173732e3139300001000000436c6173732e3139390001000000436c6173732e3230380001000000436c6173732e32313700010000
00436c6173732e3232360001000000436c6173732e323335000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000001000000486169726c696e650001000000554d4c20536861646f7700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000df0615000018ebf0e214d2e0fbf30304eaf133ebf0b47d7fcd297dde000004ebf07d451102647ecd29811b00550f1f06dc1700901b0a9c290055941b001cebf0471102
bc290051b01b00f2f15803d42900c81b00d51b5506f42900e32d0a0c7f57cd29f21b0a7c2900f61b0a553c9500fa1b0a8c2900fe1b0aad54950002df2e098c95001154e1001e0724950015e1000a1f0655ac95001fe100101f066c9500552ff30a7c950033f30ac49500d537f30ad495003bf30a048057cd293fe1001d55
063c6d10955cf30a546d1060e10066076c2a6d1078e10aa46d10873b1b6d10558bf30a846d108ff30ae46d10d593f30af46d1097e10a0c8157cd29a6e100091f061c0f2055afe10a340f20bef30a4c0f20d5c2f30a640f20c6f30a348a57cd29cae1000b1f06940f2055d5f30acc0f20d9f30aac0f207dddf30a0c82cd29
e1f30aa5ec0f20e5372bb120e9f30a6c2ab120edf30a8cb120f14d1bb12095f5f30afcb120f9912bb120fddaf30a2cb12001e0f40a83cd4b2905453011af075330164530551755065453302d45300d1b17aa53303a453a8453303e453a5cef8dcd29427b3a848ecdab294f7b3abc53305c453a9c5253306045300817dc53
306a453adfa493cd296e7b3ae49ff7cd297bb13ba5cd2988ea7b3a7c0f20957b3a0c84cd4b29a245300ef7074f40b04530be3007f4abcd29bf7b3a5c6faccd29cc7b3a3cae8e20ea7b3a549740e67b3a04b4cd6b29f3534a5cbb4001e1544955c4bb400fd14afcbb401dd14af5f453302bd14a84b5cd297d39d14ab4becd
2947d14af53c4f4055d14ae4bfcd29bd63f54bd0cd2971d14a54fa4f407fd14a64d4cd298dbed14aecdccd299bd14a6cfa4f40a9d14a0cdecd29b7aad14a24b750c5d14a9c4f40d3a8d140fc384f40d7df5aac4f40dbaadf5ab44f40dfdf5abc4f40e3aadf5ac44f40e7df5acc4f40ebaadf5ad44f40efdf5adc4f40f3aa
df5ae44f40f7df5aec4f40fbaadf5af44f40ffdf5afc4f4003bde2601a85cd2907b76a0caac5600bb76a2cc5600fb76a14aac56013b76a1cc56017b76a24aac5601bb76a44c5601fb76a4caac56023b76a54c56027b76a5caac5602bb76a64c5602fb76a6caac56033b76a74c56037b76a7caac5603bb76a84c5603fb76a
8caac56043b76a94c56047b76a9caac5604bb76aa4c5604fb76aacaac56053b76ab4c56057b76abcaac5605bb76ac4c5605fb76accaac56063b76ad4c56067b76adcaac5606bb76ae4c5606fb76aecaac56073b76af4c56077b76afc8ac5607bb76b867050c96be1808324ed6be18087ff6be1808b117be180a98fdb6be1
8093b76a34e180974ab76a3ce1809b237be1809f357b92e180a3477be180a7597be180ab246b7be180af7d7be180b38f7be18049b7a17be180bbb37be180bfc57b92e180c3d77be180c7e97be180cb24fb7be180cf0d8be180d31f8be18049d7318be180db438be180df558b92e180e3678be180e7798be180eb248b8be1
80ef9d8be180f3af8be18029f7c18be180fbb76b87a260c96ba621b003e3ee6a21b00737ba1caa21b00b37ba2421b00f37ba2caa21b01337ba3421b01737ba3caa21b01b37ba4421b01f37ba4caa21b02337ba5421b02737ba5caa21b02b37ba6421b02f37ba6caa21b03337ba7421b03737ba7caa21b03b37ba8421b03f
37ba8caa21b04337ba9421b04737ba9caa21b04b37baa421b04f37baacaa21b05337bab421b05737babcaa21b05b37bac421b05f37baccaa21b06337bad421b06737badcaa21b06b37bae421b06f37baecaa21b07337baf421b07737bafc9a21b07b37ba0488705037ba0c9261d08337bb61d08749bb61d08b245bbb61d0
8f6dbb61d0937fbb61d0499791bb61d09ba3bb61d09fb5bb9261d0a3c7bb61d0a7d9bb61d0ab24ebbb61d0affdbb61d0b30fcb61d049b721cb61d0bb33cb61d0bf45cb9261d0c357cb61d0c7b1cb61d0cba4f9cb61d0cf37b07e37f461d0dc9437b030079c61d0eb7bcb61d0efa48dcb61d0f39fcb61d0f765db89c89060
37bb35f0ff49bb35f003e454f40a35f0075dfa2c35f00b5dfa553435f00f5dfa3c35f0135dfa554435f0175dfa4c35f01b5dfa555435f01f5dfa5c35f0235dfa556435f0275dfa6c35f02b5dfa557435f02f5dfa7c35f0335dfa558435f0375dfa8c35f03b5dfa559435f03f5dfa9c35f0435dfa55a435f0475dfaac35f0
4b5dfa55b435f04f5dfabc35f0535dfa55c435f0575dfacc35f05b5dfa55d435f05f5dfadc35f0635dfaa5e435f0675df6271101b7400252b74003b741b74005b74006b7408507b74008b7401621ea3170210c90b7407e315641aa1110b7405a311252b74013f761b74015b74016b740aa6c3118b74019b7401ab7401b54
55f1b7401db7401eb7401fb7405520b74021b74022b740234f31aab74025b74026b74027b740282ab74029b7402ab7402b79f1b740552db7402eb7402fb74030b7404531b74032b7406422b74035b7405536b74037b74038b74039b740a53ab7403b6131b7403db7403eaab7403fb74040b74041b74042d2b740432d7123
14466d3200005548b74049b7404ab7404bc1f1aab7404db7404eb7404fb740502ab74051b74052b740537331b7405555b74056b74057b74058b7409559b7405ab7405bc941b7405daab7405eb7405fb74060b740614ab74062b740637d51b74065b7405566b74067b74068b74069b740a56ab7406b8531b7406db7406eaa
b7406fb74070b74071b7407252b740731b01b74075b74076b7405577b74078b74079b7407ab740a97b2d01b7407db7407eb7407faab74080b74081b74082b74083541151b74085b74086b74087b7405588b74089b7408ab7408b5101aab7408db7408eb7408fb740902ab74091b74092b74093a1e1b7405595b74096b740
97b74098b7409599b7409ab7409b7501b7409daab7409eb7409fb740a0b740a14ab740a2b740a30341b740a5b74055a6b740a7b740a8b740a9b740a5aab740ab0df1b740adb740aeaab740afb740b0b740b1b740b252b740b32351b740b5b740b6b74055b7b740b8b740b9b740bab740a9bbbd01b740bdb740beb740bfaa
b740c0b740c1b740c2b740c354db41b740c5b740c6b740c7b74055c8b740c9b740cab740cbdfc1aab740cdb740ceb740cfb740d02ab740d1b740d2b740d3f1c1b74055d5b740d6b740d7b740d8b74095d9b740dab740dbc5e1b740dd4ab740deb740dfb740bf4000d140d500b76000dfe0000d1000e5aa5dd0e65dd0e75d
d0e85dd0e94a5dd0ea5dd0eb8f515dd0ed5dd055ee5dd0ef5dd0f05dd0f15dd001f299101512e9f215e3f801dcf0551ee9f201ebf00bebf036ebf0553cebf03debf0d1ebf0d2dcf0000000000000556cebf034ebf02ce7f407ebf0fd01fff10c39e04408fbff1840ec34b1c4a3684b0940e3f8021f04eaf10bebf0ff444a
d229b8ed0000f51aebf0432d022440d22915d2370006ebf041e9f20201000001000000030000000000556cebf034ebf02ce7f402dcffe8ddfefef1fef50bebf01430d2bf2925ee00000aebf0414a2d020c33002f3700fef141e9f2010110005f1c01000014ebf0fcdffc810edcff180f2a0f3c0f4e0fe7f440feebf00c44
d229d8ed000b004debf052560f8a0f9c0fae0ff0c00fd20fe40f67022c17bd291f31ee00003675020548ebf03cdcff040f160f280a0548ebf03cdcff040f160f280a5f1c01000014ebf0fcdffc810edcff180f2a0f3c0f4e0fe7f445feebf05444d229aeee000b000debf052560f8a0f9c0fae0ff0c00fd20fe40f670244
65cd2901bb71060520ebf014dcff0406000072dc5a057b8602ebf00100007af3f04ee0fb010003ebf00a0504ebf01509ebf067f3f022dcff340f460f18580ff9fee4f7180884038d0fe8f3ff281a14b9c8ee10e21f4028e259d1aa029d0faf06efa078f90df7fc4068cdd529e6f515e7f416ebf02cd5d7bc293aebf054eb
f052007d17ebf074debc298e1704aa0a139c111097151618ebf0dcaf6ecd29a0ebf076ebf0d2fb0026ebf0a4dfbc2916baf3f021ebf042001aebf0ec6f89cd2937f3f020073e117d1bebf0104b980757870075a94f121cebf030911d1802f92f4f127e100024e8bc295fd52b00007e0712248b115fffbc29532c161527eb
f0cd4ca11072dd04154e11041b47bd29c6b7101813e90134c51095cfb7100b0712310d11c510da6ab710a33d12ffebf0e46ce807f7600032ebf03c7ecd29df6be40000431a005600fd3c130160cd29aeed00bb000aebf046003febf01cff64cd2967ee000047fa071244ebf06c66cd29c8aa35204307123debf0b435100b
f9ef16154a218421d229141a592006ebf044000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000008100000082000000830000008400000085000000860000008700000088000000890000008a0000008b0000008c0000008d0000008e0000008f000000900000009100000092000000930000009400000095000000960000009700000098000000990000009a0000009b0000009c0000009d0000009e00
00009f000000a0000000a1000000a2000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffeff0000040002000000000000000000000000000000000001000000e0859ff2f94f6810ab9108002b27b3d930000000e04500000800000001000000480000000400000050000000060000006800000005000000740000000300000080000000070000008c000000020000009800
000011000000a400000002000000e40400001e0000000e00000041646d696e6973747261746f720000001e00000001000000000000001e00000001000000000000001e00000001000000000000001e00000001000000000000001e00000001000000000000004700000034450000ffffffff0e000000010000008c000000
00000000000000007f0000007f0000000000000000000000c80d0000c80d000020454d46000001002c45000003000000010000000f0000006c00000000000000800400006003000040010000f000000000000000000000000000000000e2040080a9030056004900530049004f000000440072006100770069006e006700
0000000000004c0000008c44000000000000000000007f0000007f000000000000000000000080000000800000002000cc0000000000000000000000803f00000000000000000000803f0000000000000000ffffff000000000064000000280400008c040000004000002800000080000000800000000100080000000000
004000000000000000000000000000000000000000000000000080000080000000808000800000008000800080800000c0c0c000c0dcc000f0caa600f0fbff00a4a0a000808080000000ff0000ff000000ffff00ff000000ff00ff00ffff0000ffffff000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300000000000000000000000000000000
000000000000000000000000131313000000000000000000000000000000000000000000000000000000000000000000000000131313000000000000000000000000000000000000000000000000001313131313131313131313131313131313131313131313131313131313131313130013131313131313131313131313
131313131313131313131313130013131300131313131313131313131313131313131313131313131313131313131313131313130013131300131313131313131313131313131313131313131313131300131313131313131313131313131313131313131313131313131313131313131313001300130013130013130013
130013001313001313130000130013001313130013001300130013130013130013130013130013130013000013130000131313130013001313130013001300131300130013000000130000131313130013130013131313131313131313131313131313131313131313131313131313131313131300131313131313131313
131313131313131313131313131313131300131313001313131313131313131313131313131313131313131313131313131313131313131300131313001313131313131313131313131313131313131313131313001313131313131313131313131313131313131313131313131313131313131313131300000000000000
000000000000000000000000000000000000000013131300000000000000000000000000000000000000000000000000000000000000000000000013131300000000000000000000000000000000000000000000000000131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300000000
000000000000000000000000001313130000000000000000000000000000000000001313000000000000000000000000000000000000000000000000000000131313000000000000000000000000000000000000000000131300000000000000000000000000000000131313131313131313131313131313131313130013
131313131313131313131313131300131313001313131313131313131313131313131300131300131313131313131313131313131313131313131313131313130013131300131313131313131313131313131313131313130013130013131313131313131313131313130013131313131313131313131313131313131313
001313131300130013001313001313130013131300130013001313001300131300131300130013130013001300131300130013130013130013000013131313130013001313130013001300131300130013000013131313001313001313001300130013130013001300000013001313131313131313131313131313131313
131300131313131313131313131313131313001313130013131313131313131313131313131313001313001313131313131313131313131313131313131313131313131300131313001313131313131313131313131313131313131300131300131313131313131313131313131300131313131313131313131313131313
131313131300000000000000000000000000000000131313000000000000000000000000000000000000131300000000000000000000000000000000000000000000000000000013131300000000000000000000000000000000000000000013130000000000000000000000000000000013131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313130000000000000000000000000000000000000000000000000000000000001313130000000000000000000000000000000000000000000000000000000000000000000000000000130000000000000000000000000000000000000000000000000000001313131313131313131313
131313131313131313131313131313131313001313131313131313131313131313131313131313131313131313131300131313001313131313131313131313131313131313131313131313131313131313131313131313130013001313131313131313131313131313131313131313131313131300131313131313131313
131313131313131313131313131313131313131300130013001313001313131300131300130013130013131300001300130013131300001300131300131313130013130013130013001313130000130013000013131313130013001300130013001313001313131300000000130000131313131300130013131313131313
131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313131313131313001313130013131313131313131313131313131313131313131313131313131313131313131313131300130013131313131313131313131313131313131313131313131313001313131313
131313131313131313131313131313131313131313131313130000000000000000000000000000000000000000000000000000000013131313000000000000000000000000000000000000000000000000000000000000000000000000001313130000000000000000000000000000000000000000000000000000131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313130000000000000000000000000000000000131313000000000000000000000000000000000000000013131313130000000000000000000000000000000000000000000000000000000013131300000000000000000000000000000000000000000000
001313000000000000000000000000000000000013131313131313131313001313131313131313131313131313130013131300131313131313131313131313131313131313001313131313001313131313131313131313131313131313131313131313131313001313130013131313131313131313131313131313131313
131300131300131313131313131313131313131313001313131313131313131300131313001300130013131313001313001313130013001300131300131313130013130013001300131313131300001300131300131313130013130013001300001313131313001300131313001300130013130013131313000000131313
131300130013130000130013130013131313000000001300131313131313131313130013131313131313131313131313131300131313001313131313131313131313131313131313130013131313130013131313131313131313131313131313131313131313131313130013131300131313131313131313131313131313
131313131313001313001313131313131313131313131313130013131313131313131313130000000000000000000000000000000013131313000000000000000000000000000000000000001313131313000000000000000000000000000000000000000000000000000000001313131300000000000000000000000000
000000000000000000131300000000000000000000000000000000001313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313000000000000000000000000000000000000000000000000000000000000131313000000000000000000000000000000000000000000000000000000000000000000000000000000131300000000
000000000000000000000000000000000000000000000000131313131313131313131313131313131313131313131313131300131313131313131313131313131313131313131313131313131313130013131300131313131313131313131313131313131313131313131313131313131313131313131313130013130013
131313131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313131313130013001313131313131313131313130013130013130013131300000013001313130000131313131313131313131313001313001313001313130000001313000013131313130013001313
001300131313131313131313131313131300001313131313001313001313131313131313131313131313131313131313131313131313001313131313131313131313131313131313131313131313131313131300131313001313131313131313131313131313131313131313131313131313131313131313131313131300
131300131313131313131313131313131313131313131313131313131300131313131313131313131313131313131313131313131313131313000000000000000000000000000000000000000000000000000000000013131300000000000000000000000000000000000000000000000000000000000000000000000000
001313131300000000000000000000000000000000000000000000000000001313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313000000000000000000000000000000000013000000000000000000000000000000000000000000130000000000000000000000000000000000000000000000000000
000000001313000000000000000000000000000000000000000000000000130000000000000000000000000000000000001313131313131313131313131300131313131313131313131313131313001300131313131313131313131313131313131313130013001313131313131313131313131313131313131313131313
131313131300131300131313131313131313131313131313131313131313130013001313131313131313131313131313131300131313131313131313131313130013130013131313131313131313131300130013001313131313131313131313130013130013001300130013131313131313131313131300131300130000
131313130013130013130013001313131313131313131300001313131313001313001300130013131313131313131313131313130013131313131313131313131313001313131313131313131313131313130013001313131313131313131313131313131313131300130013131313131313131313131313131313131313
131313131313131313001313001313131313131313131313131313131313131313131300130013131313131313131313131313131313001313131313131313131313131313000000000000000000000000000000131313000000000000000000000000000000000000001313130000000000000000000000000000000000
000000000000000000000013131313000000000000000000000000000000000000000000001313130000000000000000000000000000000000131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130000000000000000000000000000000000130000000000000000000000000000000000000000131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313001313131313131313131313131313130013001313131313131313131313131313131313130013131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300131313130013130013000013131313001300131313131313001313001313001300001313001313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130013131313131313131313131313131300130013131313131313131313131313131313131300131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130000000000000000000000000000001313130000000000000000000000000000000000001313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313000000000000000000000000000000000013131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300131313131313131313131313131313001313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130013131313130013001313131313131300131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313001313131313131313131313131313130013131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300000000000000000000000000000000001313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313130e00000014000000000000001000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000600000050616765730003000000010000001e000000080000004d61737465727300030000000100000000001e1000000200000008000000506167652d31000006000000436c
61737300bc000000060000000000000038000000010000008c0000000000008094000000020000009c00000003000000a800000004000000b40000000300000004000000100000005f565049445f5052455649455753000003000000180000005f565049445f414c5445524e4154454e414d455300454d46020000001000
00005f5049445f4c494e4b4241534500000002000000e404000013000000091c00004100000004000000000000001e00000001000000000000000c10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001050000050000000d0000004d45544146494c455049435400463e00002de0ffff548d00000800463ed31f0000
010009000003a64600000c001610000000001610000026060f002220574d46430100000000000100bb160000000004000000002000004845000048650000010000008c000000040000001b000000c3060000920300000000000000000000463e0000d31f000020454d460000010048650000c1020000090000000f000000
6c000000000000000c090000d20c0000c400000016010000000000000000000000000000f8fd0200743d040056004900530049004f000000440072006100770069006e006700000000000000250000000c00000008000080250000000c000000050000805200000070010000010000009cffffff00000000000000000000
000090010000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000c20000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000d85dfd0d6800000000000000409ffa0d409ffa0d30f112004590fb77701f
f877ffffffff40f11200891000780000c200000000005c0000004c9ffa0dffffffffec5dfd0d07b63460ec5dfd0d00000000200000000c5efd0dd85dfd0dd4b534604c9ffa0dd85dfd0d00000000000000006476000800000000250000000c00000001000000250000000c0000000e000080280000000c00000001000000
0a00000010000000000000000000000009000000100000005b070000c3030000120000000c0000000200000027000000180000000100000000000000ffffff0000000000250000000c00000001000000250000000c00000008000080560000003000000007000000dd020000e8000000190300000500000007001903e800
1903e800dd020700dd0207001903250000000c00000008000080250000000c00000005000080280000000c00000001000000190000000c000000ffffff00260000001c0000000100000000000000030000000000000000000000250000000c00000001000000120000000c00000001000000570000003000000004000000
da020000eb0000001c0300000500000007001903e8001903e800dd020700dd0207001903250000000c00000008000080280000000c00000001000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff00000000000000000000
0000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d
0492b707287cf90d000000000300000000000000000000000000000000000000000000000000000000000000407cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200407c
f90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000287cf90d0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c00000000000000120000000c00000001000000
54000000840000002d000000e6020000c10000000b03000001000000e7670741f18607412d00000005030000090000004c000000000000000000000000000000ffffffffffffffff6000000043006100660065004c006100740074006500000018000000120000000b0000001200000014000000120000000b0000000b00
000012000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000200000000000000ffffff0000000000250000000c00000002000000250000000c00000008000080560000003000000029010000dd0200001e0200001903000005000000290119031e021903
1e02dd022901dd0229011903250000000c00000008000080250000000c00000005000080280000000c00000002000000190000000c000000ffffff00260000001c0000000200000000000000030000000000000000000000250000000c00000002000000120000000c00000001000000570000003000000026010000da02
0000210200001c03000005000000290119031e0219031e02dd022901dd0229011903250000000c00000008000080280000000c00000002000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000002000000dfffffff000000000000000000000000
bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200c87bf90d0492
b707c87bf90d000000000300000000000000000000000000000000000000000000000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200287cf90d
f8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000c87bf90d0492b707c87bf90d000000000492b707c87bf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000002000000180000000c00000000000000120000000c000000010000005400
0000a00000002d010000e60200001a0200000b03000001000000e7670741f18607412d010000050300000e0000004c000000000000000000000000000000ffffffffffffffff6800000043006100660065004c0061007400740065004400650063006100660018000000120000000b000000120000001400000012000000
0b0000000b00000012000000170000001200000012000000120000000b000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000300000000000000ffffff0000000000250000000c00000003000000250000000c0000000800008056000000300000005002
0000dd020000cf030000190300000500000050021903cf031903cf03dd025002dd0250021903250000000c00000008000080250000000c00000005000080280000000c00000003000000190000000c000000ffffff00260000001c0000000300000000000000030000000000000000000000250000000c00000003000000
120000000c0000000100000057000000300000004d020000da020000d20300001c0300000500000050021903cf031903cf03dd025002dd0250021903250000000c00000008000080280000000c00000003000000250000000c0000000500008078000000100000000000000000000000160000000c000000180000005200
00007001000003000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0d00000000fceb12008806c200b0ec12004590fb77
f022f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fafd0d000000000300000000000000000000000000000000000000000000000000000000000000c87bf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092
b707ffffffff0010007801ec120035e4b70730ec1200c87bf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000
180000000c00000000000000120000000c0000000100000054000000cc00000054020000e6020000ca0300000b03000001000000e7670741f18607415402000005030000150000004c000000000000000000000000000000ffffffffffffffff7800000043006100660065004c0061007400740065004400650063006100
66005700680069007000700065006400000018000000120000000b0000001200000014000000120000000b0000000b00000012000000170000001200000012000000120000000b0000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080
120000000c0000000200000027000000180000000400000000000000ffffff0000000000250000000c00000004000000250000000c0000000800008056000000300000004200000053030000c40100008f0300000500000042008f03c4018f03c40153034200530342008f03250000000c00000008000080250000000c00
000005000080280000000c00000004000000190000000c000000ffffff00260000001c0000000400000000000000030000000000000000000000250000000c00000004000000120000000c0000000100000057000000300000003f00000050030000c7010000920300000500000042008f03c4018f03c401530342005303
42008f03250000000c00000008000080280000000c00000004000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000004000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d000000000300000000000000000000000000000000000000
000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000
0000287cf90d0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000004000000180000000c00000000000000120000000c0000000100000054000000d0000000460000005c030000bf0100008103000001000000e7670741
f1860741460000007b030000160000004c000000000000000000000000000000ffffffffffffffff7800000043006100660065004c0061007400740065004500780074007200610045007300700072006500730073006f0018000000120000000b0000001200000014000000120000000b0000000b000000120000001600
0000120000000b0000000d000000120000001600000012000000140000000d00000012000000120000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000500000000000000ffffff0000000000250000000c0000000500000025000000
0c00000008000080560000003000000001020000530300000d0400008f0300000500000001028f030d048f030d0453030102530301028f03250000000c00000008000080250000000c00000005000080280000000c00000005000000190000000c000000ffffff00260000001c0000000500000000000000030000000000
000000000000250000000c00000005000000120000000c000000010000005700000030000000fe0100005003000010040000920300000500000001028f030d048f030d0453030102530301028f03250000000c00000008000080280000000c00000005000000250000000c00000005000080780000001000000000000000
00000000160000000c00000018000000520000007001000005000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d0000
0000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200c87bf90d0492b707c87bf90d000000000300000000000000000000000000000000000000000000000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200
891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200287cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000c87bf90d0492b707c87bf90d000000000492b707c87bf90d28ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c00000005000000180000000c00000000000000120000000c0000000100000054000000fc000000050200005c030000080400008103000001000000e7670741f1860741050200007b0300001d0000004c000000000000000000000000000000ffffffffffffffff880000004300610066006500
4c0061007400740065004500780074007200610045007300700072006500730073006f005700680069007000700065006400000018000000120000000b0000001200000014000000120000000b0000000b0000001200000016000000120000000b0000000d000000120000001600000012000000140000000d0000001200
00001200000012000000140000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000600000000000000ffffff0000000000250000000c00000006000000250000000c00000008000080
56000000300000005b050000dd0200003c06000019030000050000005b0519033c0619033c06dd025b05dd025b051903250000000c00000008000080250000000c00000005000080280000000c00000006000000190000000c000000ffffff00260000001c00000006000000000000000300000000000000000000002500
00000c00000006000000120000000c00000001000000570000003000000058050000da0200003f0600001c030000050000005b0519033c0619033c06dd025b05dd025b051903250000000c00000008000080280000000c00000006000000250000000c000000050000807800000010000000000000000000000016000000
0c00000018000000520000007001000006000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806
c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200407cf90d0492b707407cf90d000000000300000000000000000000000000000000000000000000000000000000000000c87bf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c200
0000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200c87bf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000407cf90d0492b707407cf90d000000000492b707407cf90d28ed120000000000191223600c000000c4ed12006af5007864760008000000002500
00000c00000006000000180000000c00000000000000120000000c00000001000000540000009400000063050000e6020000330600000b03000001000000e7670741f186074163050000050300000c0000004c000000000000000000000000000000ffffffffffffffff6400000043006100660065004c00610074007400
650057006500740018000000120000000b0000001200000014000000120000000b0000000b000000120000001f000000120000000b000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000700000000000000ffffff0000000000250000000c0000000700
0000250000000c0000000800008056000000300000004504000053030000a80500008f0300000500000045048f03a8058f03a80553034504530345048f03250000000c00000008000080250000000c00000005000080280000000c00000007000000190000000c000000ffffff00260000001c0000000700000000000000
030000000000000000000000250000000c00000007000000120000000c0000000100000057000000300000004204000050030000ab050000920300000500000045048f03a8058f03a80553034504530345048f03250000000c00000008000080280000000c00000007000000250000000c00000005000080780000001000
00000000000000000000160000000c00000018000000520000007001000007000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000fd0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fafd0d000000000300000000000000000000000000000000000000000000000000000000000000407cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffff
ffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200407cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed1200
6af500786476000800000000250000000c00000007000000180000000c00000000000000120000000c0000000100000054000000c0000000490400005c030000a30500008103000001000000e7670741f1860741490400007b030000130000004c000000000000000000000000000000ffffffffffffffff740000004300
6100660065004c0061007400740065005700650074005700680069007000700065006400000018000000120000000b0000001200000014000000120000000b0000000b000000120000001f000000120000000b0000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000
250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000000b040000dd0200003205000019030000050000000b041903320519033205dd020b04dd020b041903250000000c00
000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000570000003000000008040000da020000350500001c030000050000000b041903
320519033205dd020b04dd020b041903250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000100000078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff000000000000000000000000bc0200000000
00000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200c87bf90d0492b707c87bf90d
000000000300000000000000000000000000000000000000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590
fb77801ff877ffffffff000012003d1100780000c20000000000c87bf90d0492b707c87bf90d000000000492b707c87bf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c00000000000000120000000c0000000100000054000000ac000000
0f040000e60200002d0500000b03000001000000e7670741f18607410f04000005030000100000004c000000000000000000000000000000ffffffffffffffff6c00000043006100660065004c006100740074006500570068006900700070006500640018000000120000000b0000001200000014000000120000000b00
00000b000000120000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000
3000000007000000ef010000e80000002b0200000500000007002b02e8002b02e800ef010700ef0107002b02250000000c00000008000080250000000c0000001610000026060f002220574d464301000000000001000000000000000400000000200000482500004865000005000080280000000c000000080000001900
00000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000570000003000000004000000ec010000eb0000002e0200000500000007002b02e8002b02e800ef010700ef0107002b02250000000c0000000800008028000000
0c00000008000000250000000c00000005000080280000000c0000000200000078000000100000000000000000000000160000000c00000018000000520000007001000002000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d0000000003000000000000000000000000000000000000000000000000000000
00000000c87bf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200c87bf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000287cf90d0492
b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000002000000180000000c00000000000000120000000c00000001000000540000008400000020000000f8010000cf0000001d02000001000000e7670741f186074120000000
17020000090000004c000000000000000000000000000000ffffffffffffffff6000000043006100660065004d006f00630068006100000018000000120000000b000000120000001d00000014000000120000001400000012000000120000000c00000001000000250000000c0000000d000080120000000c0000000200
000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000002e010000ef0100003f0200002b020000050000002e012b023f022b023f02ef012e01ef012e012b02250000000c00000008000080250000000c0000000500008028000000
0c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000002b010000ec010000420200002e020000050000002e012b023f022b023f02ef012e01ef012e012b02250000000c00
000008000080280000000c00000008000000250000000c00000005000080280000000c0000000300000078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fafd0d00000000030000000000000000000000000000000000
0000000000000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200287cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c200
00000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c00000000000000120000000c0000000100000054000000a000000032010000f80100003a0200001d02000001000000e767
0741f186074132010000170200000e0000004c000000000000000000000000000000ffffffffffffffff6800000043006100660065004d006f006300680061004400650063006100660018000000120000000b000000120000001d0000001400000012000000140000001200000017000000120000001200000012000000
0b000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080560000003000000091020000ef0100002b0400002b0200000500000091022b022b042b022b04
ef019102ef0191022b02250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000008e020000ec010000
2e0400002e0200000500000091022b022b042b022b04ef019102ef0191022b02250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000400000078000000100000000000000000000000160000000c00000018000000520000007001000004000000dfffffff0000
00000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc77
1807c200407cf90d0492b707407cf90d000000000300000000000000000000000000000000000000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4
b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000407cf90d0492b707407cf90d000000000492b707407cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000004000000180000000c0000000000000012000000
0c0000000100000054000000cc00000095020000f8010000260400001d02000001000000e7670741f18607419502000017020000150000004c000000000000000000000000000000ffffffffffffffff7800000043006100660065004d006f00630068006100440065006300610066005700680069007000700065006400
000018000000120000000b000000120000001d00000014000000120000001400000012000000170000001200000012000000120000000b0000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000
180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000004200000067020000df010000a3020000050000004200a302df01a302df016702420067024200a302250000000c00000008000080250000000c00000005000080280000000c0000000800
0000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000003f00000064020000e2010000a6020000050000004200a302df01a302df016702420067024200a302250000000c00000008000080
280000000c00000008000000250000000c00000005000080280000000c0000000500000078000000100000000000000000000000160000000c00000018000000520000007001000005000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d00000000030000000000000000000000000000000000000000000000
0000000000000000407cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200407cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000287c
f90d0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000005000000180000000c00000000000000120000000c0000000100000054000000d00000004600000070020000da0100009502000001000000e7670741f1860741
460000008f020000160000004c000000000000000000000000000000ffffffffffffffff7800000043006100660065004d006f006300680061004500780074007200610045007300700072006500730073006f0018000000120000000b000000120000001d00000014000000120000001400000012000000160000001200
00000b0000000d000000120000001600000012000000140000000d00000012000000120000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c000000
0800008056000000300000001a0200006702000042040000a3020000050000001a02a3024204a302420467021a0267021a02a302250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c000000080000000000000003000000000000000000
0000250000000c00000008000000120000000c000000010000005700000030000000170200006402000045040000a6020000050000001a02a3024204a302420467021a0267021a02a302250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000600000078000000
100000000000000000000000160000000c00000018000000520000007001000006000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000fd0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fafd0d000000000300000000000000000000000000000000000000000000000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877
ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200287cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000006000000180000000c00000000000000120000000c0000000100000054000000fc0000001e020000700200003c0400009502000001000000e7670741f18607411e0200008f0200001d0000004c000000000000000000000000000000ffffffffffffffff88000000
43006100660065004d006f006300680061004500780074007200610045007300700072006500730073006f005700680069007000700065006400000018000000120000000b000000120000001d0000001400000012000000140000001200000016000000120000000b0000000d0000001200000016000000120000001400
00000d000000120000001200000012000000140000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c0000000800000025000000
0c000000080000805600000030000000cc050000ef010000c00600002b02000005000000cc052b02c0062b02c006ef01cc05ef01cc052b02250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000
000000000000250000000c00000008000000120000000c000000010000005700000030000000c9050000ec010000c30600002e02000005000000cc052b02c0062b02c006ef01cc05ef01cc052b02250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000007000000
78000000100000000000000000000000160000000c00000018000000520000007001000007000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200c87bf90d0492b707c87bf90d000000000300000000000000000000000000000000000000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77
701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000c87bf90d0492b707c87bf90d000000000492b707c87bf90d28ed120000000000191223600c00
0000c4ed12006af500786476000800000000250000000c00000007000000180000000c00000000000000120000000c000000010000005400000094000000d0050000f8010000bb0600001d02000001000000e7670741f1860741d0050000170200000c0000004c000000000000000000000000000000ffffffffffffffff
6400000043006100660065004d006f0063006800610057006500740018000000120000000b000000120000001d000000140000001200000014000000120000001f000000120000000b000000120000000c00000001000000250000000c0000000d000080120000000c000000020000002700000018000000080000000000
0000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000006904000067020000e7050000a3020000050000006904a302e705a302e7056702690467026904a302250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000
ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000006604000064020000ea050000a6020000050000006904a302e705a302e7056702690467026904a302250000000c00000008000080280000000c0000000800
0000250000000c00000005000080280000000c0000000100000078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200407cf90d0492b707407cf90d000000000300000000000000000000000000000000000000000000000000000000000000c87b
f90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200c87bf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000407cf90d0492b707407cf90d
000000000492b707407cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c00000000000000120000000c0000000100000054000000c00000006d04000070020000e20500009502000001000000e7670741f18607416d0400008f0200001300
00004c000000000000000000000000000000ffffffffffffffff7400000043006100660065004d006f006300680061005700650074005700680069007000700065006400000018000000120000000b000000120000001d000000140000001200000014000000120000001f000000120000000b0000001f00000014000000
0900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080560000003000000069040000ef010000ab0500002b02
00000500000069042b02ab052b02ab05ef016904ef0169042b02250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000
570000003000000066040000ec010000ae0500002e0200000500000069042b02ab052b02ab05ef016904ef0169042b02250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000200000078000000100000000000000000000000160000000c000000180000005200
00007001000002000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0d00000000fceb12008806c200b0ec12004590fb77
f022f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fafd0d000000000300000000000000000000000000000000000000000000000000000000000000407cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092
b707ffffffff0010007801ec120035e4b70730ec1200407cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000002000000
180000000c00000000000000120000000c0000000100000054000000ac0000006d040000f8010000a60500001d02000001000000e7670741f18607416d04000017020000100000004c000000000000000000000000000000ffffffffffffffff6c00000043006100660065004d006f006300680061005700680069007000
70006500640018000000120000000b000000120000001d000000140000001200000014000000120000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff00
00000000250000000c00000008000000250000000c0000000800008056000000300000000700000004010000e8000000400100000500000007004001e8004001e80004010700040107004001250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff002600
00001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000000400000001010000eb000000430100000500000007004001e8004001e80004010700040107004001250000000c00000008000080280000000c0000000800000025000000
0c00000005000080280000000c0000000300000078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d000000000300000000000000000000000000000000000000000000000000000000000000f8fafd0d18000000
000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000287cf90d0492b707287cf90d000000000492
b707287cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c00000000000000120000000c0000000100000054000000880000001a0000000d010000d40000003201000001000000e7670741f18607411610000026060f002220574d46430100
000000000100000000000000040000000020000048050000486500001a0000002c0100000a0000004c000000000000000000000000000000ffffffffffffffff60000000430061007000700075006300630069006e006f001800000012000000140000001400000014000000120000001200000009000000140000001400
0000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080560000003000000011010000040100002d0200004001000005000000110140012d0240012d020401
1101040111014001250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000000e010000010100003002
00004301000005000000110140012d0240012d0204011101040111014001250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000400000078000000100000000000000000000000160000000c00000018000000520000007001000004000000dfffffff00000000
0000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807
c200407cf90d0492b707407cf90d000000000300000000000000000000000000000000000000000000000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b707
30ec1200287cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000407cf90d0492b707407cf90d000000000492b707407cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000004000000180000000c00000000000000120000000c00
00000100000054000000a8000000150100000d010000280200003201000001000000e7670741f1860741150100002c0100000f0000004c000000000000000000000000000000ffffffffffffffff6c000000430061007000700075006300630069006e006f00440065006300610066000000180000001200000014000000
14000000140000001200000012000000090000001400000014000000170000001200000012000000120000000b000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00
00000800008056000000300000005002000004010000f5030000400100000500000050024001f5034001f50304015002040150024001250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c00000008000000000000000300000000000000
00000000250000000c00000008000000120000000c0000000100000057000000300000004d02000001010000f8030000430100000500000050024001f5034001f50304015002040150024001250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c000000050000007800
0000100000000000000000000000160000000c00000018000000520000007001000005000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200c87bf90d0492b707c87bf90d000000000300000000000000000000000000000000000000000000000000000000000000407cf90d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200407cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000c87bf90d0492b707c87bf90d000000000492b707c87bf90d28ed120000000000191223600c000000
c4ed12006af500786476000800000000250000000c00000005000000180000000c00000000000000120000000c0000000100000054000000d0000000540200000d010000f00300003201000001000000e7670741f1860741540200002c010000160000004c000000000000000000000000000000ffffffffffffffff7800
0000430061007000700075006300630069006e006f0044006500630061006600570068006900700070006500640018000000120000001400000014000000140000001200000012000000090000001400000014000000170000001200000012000000120000000b0000001f00000014000000090000001400000014000000
1200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000009c050000040100009606000040010000050000009c0540019606
4001960604019c0504019c054001250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000570000003000000099050000
010100009906000043010000050000009c05400196064001960604019c0504019c054001250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000600000078000000100000000000000000000000160000000c00000018000000520000007001000006000000dfff
ffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200
e0a5fc771807c200f8fafd0d0492b707f8fafd0d000000000300000000000000000000000000000000000000000000000000000000000000c87bf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec
120035e4b70730ec1200c87bf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c00000000000000
120000000c00000001000000540000009c000000a00500000d010000910600003201000001000000e7670741f1860741a00500002c0100000d0000004c000000000000000000000000000000ffffffffffffffff68000000430061007000700075006300630069006e006f00440072007900000018000000120000001400
000014000000140000001200000012000000090000001400000014000000170000000d00000013000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080
5600000030000000420000007a010000ea010000b6010000050000004200b601ea01b601ea017a0142007a014200b601250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c00000008000000000000000300000000000000000000002500
00000c00000008000000120000000c0000000100000057000000300000003f00000077010000ed010000b9010000050000004200b601ea01b601ea017a0142007a014200b601250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c000000070000007800000010000000
0000000000000000160000000c00000018000000520000007001000007000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d000000000300000000000000000000000000000000000000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff
00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000287cf90d0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af5
00786476000800000000250000000c00000007000000180000000c00000000000000120000000c0000000100000054000000d80000004600000083010000e5010000a801000001000000e7670741f186074146000000a2010000170000004c000000000000000000000000000000ffffffffffffffff7c00000043006100
7000700075006300630069006e006f004500780074007200610045007300700072006500730073006f0000001800000012000000140000001400000014000000120000001200000009000000140000001400000016000000120000000b0000000d000000120000001600000012000000140000000d000000120000001200
00001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000001b0200007a0100004d040000b6010000050000001b02b601
4d04b6014d047a011b027a011b02b601250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000001802
00007701000050040000b9010000050000001b02b6014d04b6014d047a011b027a011b02b601250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000100000078000000100000000000000000000000160000000c00000018000000520000007001000001000000
dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec
1200e0a5fc771807c200c87bf90d0492b707c87bf90d000000000300000000000000000000000000000000000000000000000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff00100078
01ec120035e4b70730ec1200287cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000c87bf90d0492b707c87bf90d000000000492b707c87bf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c0000000000
0000120000000c0000000100000054000000000100001f0200008301000048040000a801000001000000e7670741f18607411f020000a20100001e0000004c000000000000000000000000000000ffffffffffffffff88000000430061007000700075006300630069006e006f0045007800740072006100450073007000
72006500730073006f0057006800690070007000650064001800000012000000140000001400000014000000120000001200000009000000140000001400000016000000120000000b0000000d000000120000001600000012000000140000000d000000120000001200000012000000140000001f000000140000000900
000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c000000080000805600000030000000830400007a01000007060000b6010000
050000008304b6010706b60107067a0183047a018304b601250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c000000010000005700
00003000000080040000770100000a060000b9010000050000008304b6010706b60107067a0183047a018304b601250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000200000078000000100000000000000000000000160000000c0000001800000052000000
7001000002000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0d00000000fceb12008806c200b0ec12004590fb77f022
f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fafd0d000000000300000000000000000000000000000000000000000000000000000000000000c87bf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707
ffffffff0010007801ec120035e4b70730ec1200c87bf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c000000020000001800
00000c00000000000000120000000c0000000100000054000000c4000000870400008301000002060000a801000001000000e7670741f186074187040000a2010000140000004c000000000000000000000000000000ffffffffffffffff74000000430061007000700075006300630069006e006f004400720079005700
68006900700070006500640018000000120000001400000014000000140000001200000012000000090000001400000014000000170000000d000000130000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200
000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080560000003000000029040000040100007605000040010000050000002904400176054001760504012904040129044001250000000c00000008000080250000000c0000000500008028000000
0c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000570000003000000026040000010100007905000043010000050000002904400176054001760504012904040129044001250000000c00
000008000080280000000c00000008000000250000000c00000005000080280000000c0000000300000078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d00000000030000000000000000000000000000000000
0000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c200
00000000287cf90d0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c00000000000000120000000c0000000100000054000000b40000002d0400000d010000710500003201000001000000e767
0741f18607412d0400002c010000110000004c000000000000000000000000000000ffffffffffffffff70000000430061007000700075006300630069006e006f0057006800690070007000650064000000180000001200000014000000140000001400000012000000120000000900000014000000140000001f000000
140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c000000080000805600000030000000070000001e000000e800
00005a0000000500000007005a00e8005a00e8001e0007001e0007005a00250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c000000
010000005700000030000000040000001b000000eb0000005d0000000500000007005a00e8005a00e8001e0007001e0007005a00250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000400000078000000100000000000000000000000160000000c0000001800
0000520000007001000004000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec1200
4590fb77f022f877ffffffffc0ec1200e0a5fc771807c200407cf90d0492b707407cf90d000000000300000000000000000000000000000000000000000000000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c2000300
00000092b707ffffffff0010007801ec120035e4b70730ec1200287cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000407cf90d0492b707407cf90d000000000492b707407cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c000000
04000000180000000c00000000000000120000000c0000000100000054000000880000001c00000027000000d30000004c00000001000000e7670741f18607411c000000460000000a0000004c000000000000000000000000000000ffffffffffffffff6000000043006f006600660065006500530068006f0070001800
0000140000000b0000000b000000120000001200000016000000140000001400000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000
30000000070000008e000000e8000000ca000000050000000700ca00e800ca00e8008e0007008e000700ca00250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00
000008000000120000000c000000010000005700000030000000040000008b000000eb000000cd000000050000000700ca00e800ca00e8008e0007008e000700ca00250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000005000000780000001000000000000000
00000000160000000c00000018000000520000007001000005000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0d0000
0000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200ba02000026060f006a05574d4643010000000000010000000000000004000000480500000000000048650000e0a5fc771807c200f8fafd0d0492b707f8fafd0d0000000003000000000000000000000000000000000000000000000000000000
00000000407cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200407cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492
b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000005000000180000000c00000000000000120000000c00000001000000540000007c0000002e00000097000000c0000000bc00000001000000e7670741f18607412e000000
b6000000080000004c000000000000000000000000000000ffffffffffffffff5c00000045007300700072006500730073006f001600000012000000140000000d00000012000000120000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c00000002000000270000001800
00000800000000000000ffffff0000000000250000000c00000008000000250000000c000000080000805600000030000000120100008e0000001b020000ca000000050000001201ca001b02ca001b028e0012018e001201ca00250000000c00000008000080250000000c00000005000080280000000c00000008000000
190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000000f0100008b0000001e020000cd000000050000001201ca001b02ca001b028e0012018e001201ca00250000000c000000080000802800
00000c00000008000000250000000c00000005000080280000000c0000000600000078000000100000000000000000000000160000000c00000018000000520000007001000006000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d000000000300000000000000000000000000000000000000000000000000
000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000287cf90d
0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c00000000000000120000000c0000000100000054000000a0000000160100009700000016020000bc00000001000000e7670741f18607411601
0000b60000000e0000004c000000000000000000000000000000ffffffffffffffff6800000044006f00750062006c00650045007300700072006500730073006f001700000014000000140000001400000009000000120000001600000012000000140000000d0000001200000012000000120000001400000012000000
0c00000001000000250000000c0000000d0000800e000000140000000000000010000000140000000400000003010800050000000b0200000000050000000c02c2035c0708000000fa02050000000000ffffff00040000002d01000007000000fc020100000000000000040000002d0101001c000000fb029cff00000000
000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d0102001c000000fb021000070000000000bc02000000000102022253797374656d0000000000000000000000000000000000000000000000000000040000002d01030004000000f00102000400
00000201020007000000fc020000ffffff000000040000002d010200040000002d0100000e0000002403050007001903e8001903e800dd020700dd0207001903040000002d010000040000002d01010004000000f0010200050000000102ffffff0008000000fa0200000300000000000000040000002d01020004000000
020101000e0000002503050007001903e8001903e800dd020700dd0207001903040000002d01000004000000f0010200040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01
020005000000090200000000040000000201010015000000320a05032d0009000000436166654c6174746572180012000b001200140012000b000b00120004000000020101001c000000fb021000070000000000bc02000000000102022253797374656d0000000000000000000000000000000000000000000000000000
040000002d010400040000000201020007000000fc020000ffffff000000040000002d010500040000002d0100000e00000024030500290119031e0219031e02dd022901dd0229011903040000002d010000040000002d01010004000000f0010500050000000102ffffff0008000000fa02000003000000000000000400
00002d01050004000000020101000e00000025030500290119031e0219031e02dd022901dd0229011903040000002d01000004000000f0010500040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000000000000000000000000000000000000000
00000000040000002d0105000500000009020000000004000000020101001c000000320a05032d010e000000436166654c617474654465636166180012000b001200140012000b000b00120017001200120012000b000400000002010100040000002d010400040000000201020007000000fc020000ffffff0000000400
00002d010600040000002d0100000e0000002403050050021903cf031903cf03dd025002dd0250021903040000002d010000040000002d01010004000000f0010600050000000102ffffff0008000000fa0200000300000000000000040000002d01060004000000020101000e0000002503050050021903cf031903cf03
dd025002dd0250021903040000002d01000004000000f0010600040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d0106000500000009020000000004000000020101002700
0000320a0503540215000000436166654c6174746544656361665768697070656473180012000b001200140012000b000b00120017001200120012000b001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d01070004000000
2d0100000e0000002403050042008f03c4018f03c40153034200530342008f03040000002d010000040000002d01010004000000f0010700050000000102ffffff0008000000fa0200000300000000000000040000002d01070004000000020101000e0000002503050042008f03c4018f03c40153034200530342008f03
040000002d01000004000000f0010700040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01070005000000090200000000040000000201010028000000320a7b0346001600
0000436166654c617474654578747261457370726573736f180012000b001200140012000b000b001200160012000b000d0012001600120014000d0012001200120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010800040000002d0100000e000000
2403050001028f030d048f030d0453030102530301028f03040000002d010000040000002d01010004000000f0010800050000000102ffffff0008000000fa0200000300000000000000040000002d01080004000000020101000e0000002503050001028f030d048f030d0453030102530301028f03040000002d010000
04000000f0010800040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01080005000000090200000000040000000201010033000000320a7b0305021d000000436166654c61
7474654578747261457370726573736f5768697070656464180012000b001200140012000b000b001200160012000b000d0012001600120014000d0012001200120014001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d01
0900040000002d0100000e000000240305005b0519033c0619033c06dd025b05dd025b051903040000002d010000040000002d01010004000000f0010900050000000102ffffff0008000000fa0200000300000000000000040000002d01090004000000020101000e000000250305005b0519033c0619033c06dd025b05
dd025b051903040000002d01000004000000f0010900040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01090005000000090200000000040000000201010019000000320a
050363050c000000436166654c61747465576574180012000b001200140012000b000b0012001f0012000b000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010a00040000002d0100000e0000002403050045048f03a8058f03a80553034504530345048f03
040000002d010000040000002d01010004000000f0010a00050000000102ffffff0008000000fa0200000300000000000000040000002d010a0004000000020101000e0000002503050045048f03a8058f03a80553034504530345048f03040000002d01000004000000f0010a00040000002d010100040000002e011800
1c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010a0005000000090200000000040000000201010024000000320a7b03490413000000436166654c617474655765745768697070656473180012000b0012001400
12000b000b0012001f0012000b001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e000000240305000b041903320519033205dd020b04dd020b041903040000002d010000040000002d010100
04000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305000b041903320519033205dd020b04dd020b041903040000002d01000004000000f0010b00040000002d01010004000000f0010200040000002e0118001c000000fb02dfff
000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d0102000500000009020000000004000000020101001f000000320a05030f0410000000436166654c6174746557686970706564180012000b001200140012000b000b0012001f001400
090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050007002b02e8002b02e800ef010700ef0107002b02040000002d010000040000002d01010004000000f0010b00050000000102ffffff00
08000000fa0200000300000000000000040000002d010b0004000000020101000e0000002503050007002b02e8002b02e800ef010700ef0107002b02040000002d01000004000000f0010b00040000002d01010004000000f0010500040000002e0118001c000000fb02dfff000000000000bc0200000000000000204172
69616c000000000000000000000000000000000000000000000000000000040000002d01050005000000090200000000040000000201010015000000320a1702200009000000436166654d6f63686157180012000b0012001d0014001200140012000400000002010100040000002d010400040000000201020007000000
fc020000ffffff000000040000002d010b00040000002d0100000e000000240305002e012b023f022b023f02ef012e01ef012e012b02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e0000002503
05002e012b023f022b023f02ef012e01ef012e012b02040000002d01000004000000f0010b00040000002d01010004000000f0010600040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010600
0500000009020000000004000000020101001c000000320a170232010e000000436166654d6f6368614465636166180012000b0012001d00140012001400120017001200120012000b000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d01
00000e0000002403050091022b022b042b022b04ef019102ef0191022b02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e0000002503050091022b022b042b022b04ef019102ef0191022b020400
00002d01000004000000f0010b00040000002d01010004000000f0010700040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01070005000000090200000000040000000201010027000000320a
1702950215000000436166654d6f6368614465636166576869707065646f180012000b0012001d00140012001400120017001200120012000b001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d010000
0e000000240305004200a302df01a302df016702420067024200a302040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305004200a302df01a302df016702420067024200a30204000000
2d01000004000000f0010b00040000002d01010004000000f0010800040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01080005000000090200000000040000000201010028000000320a8f02
460016000000436166654d6f6368614578747261457370726573736f180012000b0012001d001400120014001200160012000b000d0012001600120014000d0012001200120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d010000
0e000000240305001a02a3024204a302420467021a0267021a02a302040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305001a02a3024204a302420467021a0267021a02a30204000000
2d01000004000000f0010b00040000002d01010004000000f0010900040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01090005000000090200000000040000000201010033000000320a8f02
1e021d000000436166654d6f6368614578747261457370726573736f5768697070656464180012000b0012001d001400120014001200160012000b000d0012001600120014000d0012001200120014001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000
ffffff000000040000002d010b00040000002d0100000e00000024030500cc052b02c0062b02c006ef01cc05ef01cc052b02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e00000025030500cc05
2b02c0062b02c006ef01cc05ef01cc052b02040000002d01000004000000f0010b00040000002d01010004000000f0010a00040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010a0005000000
090200000000040000000201010019000000320a1702d0050c000000436166654d6f636861576574180012000b0012001d0014001200140012001f0012000b000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e00000024030500
6904a302e705a302e7056702690467026904a302040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305006904a302e705a302e7056702690467026904a302040000002d01000004000000
f0010b00040000002d01010004000000f0010200040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01020005000000090200000000040000000201010024000000320a8f026d04130000004361
66654d6f6368615765745768697070656473180012000b0012001d0014001200140012001f0012000b001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050069042b02ab052b02
ab05ef016904ef0169042b02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e0000002503050069042b02ab052b02ab05ef016904ef0169042b02040000002d01000004000000f0010b0004000000
2d01010004000000f0010500040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d0105000500000009020000000004000000020101001f000000320a17026d0410000000436166654d6f63686157
686970706564180012000b0012001d0014001200140012001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050007004001e8004001e80004010700040107004001040000002d01
0000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e0000002503050007004001e8004001e80004010700040107004001040000002d01000004000000f0010b00040000002d01010004000000f0010600040000002e01
18001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01060005000000090200000000040000000201010016000000320a2c011a000a00000043617070756363696e6f180012001400140014001200120009001400
14000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e00000024030500110140012d0240012d0204011101040111014001040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa020000
0300000000000000040000002d010b0004000000020101000e00000025030500110140012d0240012d0204011101040111014001040000002d01000004000000f0010b00040000002d01010004000000f0010700040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000
00000000000000000000000000000000000000000000040000002d0107000500000009020000000004000000020101001e000000320a2c0115010f00000043617070756363696e6f446563616664180012001400140014001200120009001400140017001200120012000b000400000002010100040000002d0104000400
00000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050050024001f5034001f50304015002040150024001040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000
020101000e0000002503050050024001f5034001f50304015002040150024001040000002d01000004000000f0010b00040000002d01010004000000f0010800040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000000000000000000000000000000000000000
0000040000002d01080005000000090200000000040000000201010028000000320a2c0154021600000043617070756363696e6f446563616657686970706564180012001400140014001200120009001400140017001200120012000b001f001400090014001400120014000400000002010100040000002d0104000400
00000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e000000240305009c05400196064001960604019c0504019c054001040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000
020101000e000000250305009c05400196064001960604019c0504019c054001040000002d01000004000000f0010b00040000002d01010004000000f0010900040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000000000000000000000000000000000000000
0000040000002d0109000500000009020000000004000000020101001b000000320a2c01a0050d00000043617070756363696e6f44727961180012001400140014001200120009001400140017000d0013000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d01
0b00040000002d0100000e000000240305004200b601ea01b601ea017a0142007a014200b601040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305004200b601ea01b601ea017a014200
7a014200b601040000002d01000004000000f0010b00040000002d01010004000000f0010a00040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010a0005000000090200000000040000000201
01002a000000320aa20146001700000043617070756363696e6f4578747261457370726573736f001800120014001400140012001200090014001400160012000b000d0012001600120014000d0012001200120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff0000000400
00002d010b00040000002d0100000e000000240305001b02b6014d04b6014d047a011b027a011b02b601040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305001b02b6014d04b6014d04
7a011b027a011b02b601040000002d01000004000000f0010b00040000002d01010004000000f0010200040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010200050000000902000000000400
00000201010034000000320aa2011f021e00000043617070756363696e6f4578747261457370726573736f576869707065641800120014001400140012001200090014001400160012000b000d0012001600120014000d0012001200120014001f001400090014001400120014000400000002010100040000002d010400
040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e000000240305008304b6010706b60107067a0183047a018304b601040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b000400
0000020101000e000000250305008304b6010706b60107067a0183047a018304b601040000002d01000004000000f0010b00040000002d01010004000000f0010500040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000000000000000000000000000000000000000
00000000040000002d01050005000000090200000000040000000201010025000000320aa20187041400000043617070756363696e6f44727957686970706564180012001400140014001200120009001400140017000d0013001f001400090014001400120014000400000002010100040000002d010400040000000201
020007000000fc020000ffffff000000040000002d010b00040000002d0100000e000000240305002904400176054001760504012904040129044001040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b000400000002010100
0e000000250305002904400176054001760504012904040129044001040000002d01000004000000f0010b00040000002d01010004000000f0010600040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000000000000000000000000000000000000000000000000400
00002d01060005000000090200000000040000000201010021000000320a2c012d041100000043617070756363696e6f576869707065647018001200140014001400120012000900140014001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff00
0000040000002d010b00040000002d0100000e0000002403050007005a00e8005a00e8001e0007001e0007005a00040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e0000002503050007005a00e800
5a00e8001e0007001e0007005a00040000002d01000004000000f0010b00040000002d01010004000000f0010700040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d0107000500000009020000
0000040000000201010016000000320a46001c000a000000436f6666656553686f70180014000b000b001200120016001400140014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e000000240305000700ca00e800ca00e800
8e0007008e000700ca00040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305000700ca00e800ca00e8008e0007008e000700ca00040000002d01000004000000f0010b00040000002d01
010004000000f0010800040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01080005000000090200000000040000000201010013000000320ab6002e0008000000457370726573736f16001200
14000d0012001200120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e000000240305001201ca001b02ca001b028e0012018e001201ca00040000002d010000040000002d01010004000000f0010b00050000000102ffff
ff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305001201ca001b02ca001b028e0012018e001201ca00040000002d01000004000000f0010b00040000002d01010004000000f0010900040000002e0118001c000000fb02dfff000000000000bc020000000000000020
417269616c000000000000000000000000000000000000000000000000000000040000002d0109000500000009020000000004000000020101001c000000320ab60016010e000000446f75626c65457370726573736f1700140014001400090012001600120014000d001200120012001400040000000201010004000000
2d010400030000000000}{\result {{\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pictureActive}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}
\picscalex83\picscaley83\piccropl0\piccropr0\piccropt0\piccropb0\picw15942\pich8147\picwgoal9038\pichgoal4619\wmetafile8\bliptag-1776280610\blipupi-195{\*\blipuid 96201bde646ca75e6fc8e7ae1016d703}
010009000003a64600000c001610000000001610000026060f002220574d46430100000000000100bb1600000000040000000020000048450000486500000100
00008c000000040000001b000000c3060000920300000000000000000000463e0000d31f000020454d460000010048650000c1020000090000000f0000006c00
0000000000000c090000d20c0000c400000016010000000000000000000000000000f8fd0200743d040056004900530049004f00000044007200610077006900
6e006700000000000000250000000c00000008000080250000000c000000050000805200000070010000010000009cffffff0000000000000000000000009001
0000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000c20000000000000000000000000000000000000000000d0000000000
0000000000000000000000000000000000000000000000000000d85dfd0d6800000000000000409ffa0d409ffa0d30f112004590fb77701ff877ffffffff40f1
1200891000780000c200000000005c0000004c9ffa0dffffffffec5dfd0d07b63460ec5dfd0d00000000200000000c5efd0dd85dfd0dd4b534604c9ffa0dd85d
fd0d00000000000000006476000800000000250000000c00000001000000250000000c0000000e000080280000000c000000010000000a000000100000000000
00000000000009000000100000005b070000c3030000120000000c0000000200000027000000180000000100000000000000ffffff0000000000250000000c00
000001000000250000000c00000008000080560000003000000007000000dd020000e8000000190300000500000007001903e8001903e800dd020700dd020700
1903250000000c00000008000080250000000c00000005000080280000000c00000001000000190000000c000000ffffff00260000001c000000010000000000
0000030000000000000000000000250000000c00000001000000120000000c00000001000000570000003000000004000000da020000eb0000001c0300000500
000007001903e8001903e800dd020700dd0207001903250000000c00000008000080280000000c00000001000000250000000c00000005000080780000001000
00000000000000000000160000000c00000018000000520000007001000001000000dfffffff000000000000000000000000bc02000000000000000000204100
7200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d00000000030000000000
0000000000000000000000000000000000000000000000000000407cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff0000
1200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200407cf90df8ec12004590fb77801ff877ffffffff0000
12003d1100780000c20000000000287cf90d0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c00000001000000180000000c00000000000000120000000c0000000100000054000000840000002d000000e6020000c10000000b03
000001000000e7670741f18607412d00000005030000090000004c000000000000000000000000000000ffffffffffffffff6000000043006100660065004c00
6100740074006500000018000000120000000b0000001200000014000000120000000b0000000b00000012000000120000000c00000001000000250000000c00
00000d000080120000000c0000000200000027000000180000000200000000000000ffffff0000000000250000000c00000002000000250000000c0000000800
0080560000003000000029010000dd0200001e0200001903000005000000290119031e0219031e02dd022901dd0229011903250000000c000000080000802500
00000c00000005000080280000000c00000002000000190000000c000000ffffff00260000001c00000002000000000000000300000000000000000000002500
00000c00000002000000120000000c00000001000000570000003000000026010000da020000210200001c03000005000000290119031e0219031e02dd022901
dd0229011903250000000c00000008000080280000000c00000002000000250000000c0000000500008078000000100000000000000000000000160000000c00
000018000000520000007001000002000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec
12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200c87bf90d0492b707c87bf90d0000000003000000000000000000000000000000000000000000
00000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c2000300
00000092b707ffffffff0010007801ec120035e4b70730ec1200287cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000c87b
f90d0492b707c87bf90d000000000492b707c87bf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000200
0000180000000c00000000000000120000000c0000000100000054000000a00000002d010000e60200001a0200000b03000001000000e7670741f18607412d01
0000050300000e0000004c000000000000000000000000000000ffffffffffffffff6800000043006100660065004c0061007400740065004400650063006100
660018000000120000000b0000001200000014000000120000000b0000000b00000012000000170000001200000012000000120000000b000000120000000c00
000001000000250000000c0000000d000080120000000c0000000200000027000000180000000300000000000000ffffff0000000000250000000c0000000300
0000250000000c00000008000080560000003000000050020000dd020000cf030000190300000500000050021903cf031903cf03dd025002dd02500219032500
00000c00000008000080250000000c00000005000080280000000c00000003000000190000000c000000ffffff00260000001c00000003000000000000000300
00000000000000000000250000000c00000003000000120000000c0000000100000057000000300000004d020000da020000d20300001c030000050000005002
1903cf031903cf03dd025002dd0250021903250000000c00000008000080280000000c00000003000000250000000c0000000500008078000000100000000000
000000000000160000000c00000018000000520000007001000003000000dfffffff000000000000000000000000bc0200000000000000000020410072006900
61006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0d0000
0000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fafd0d0000000003000000000000000000
00000000000000000000000000000000000000000000c87bf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff000012008910
00780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200c87bf90df8ec12004590fb77801ff877ffffffff000012003d11
00780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed12006af50078647600080000
0000250000000c00000003000000180000000c00000000000000120000000c0000000100000054000000cc00000054020000e6020000ca0300000b0300000100
0000e7670741f18607415402000005030000150000004c000000000000000000000000000000ffffffffffffffff7800000043006100660065004c0061007400
74006500440065006300610066005700680069007000700065006400000018000000120000000b0000001200000014000000120000000b0000000b0000001200
0000170000001200000012000000120000000b0000001f000000140000000900000014000000140000001200000014000000120000000c000000010000002500
00000c0000000d000080120000000c0000000200000027000000180000000400000000000000ffffff0000000000250000000c00000004000000250000000c00
00000800008056000000300000004200000053030000c40100008f0300000500000042008f03c4018f03c40153034200530342008f03250000000c0000000800
0080250000000c00000005000080280000000c00000004000000190000000c000000ffffff00260000001c000000040000000000000003000000000000000000
0000250000000c00000004000000120000000c0000000100000057000000300000003f00000050030000c7010000920300000500000042008f03c4018f03c401
53034200530342008f03250000000c00000008000080280000000c00000004000000250000000c00000005000080780000001000000000000000000000001600
00000c00000018000000520000007001000004000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806
c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d00000000030000000000000000000000000000000000
0000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000
c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000
0000287cf90d0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00
000004000000180000000c00000000000000120000000c0000000100000054000000d0000000460000005c030000bf0100008103000001000000e7670741f186
0741460000007b030000160000004c000000000000000000000000000000ffffffffffffffff7800000043006100660065004c00610074007400650045007800
74007200610045007300700072006500730073006f0018000000120000000b0000001200000014000000120000000b0000000b00000012000000160000001200
00000b0000000d000000120000001600000012000000140000000d00000012000000120000001200000014000000120000000c00000001000000250000000c00
00000d000080120000000c0000000200000027000000180000000500000000000000ffffff0000000000250000000c00000005000000250000000c0000000800
0080560000003000000001020000530300000d0400008f0300000500000001028f030d048f030d0453030102530301028f03250000000c000000080000802500
00000c00000005000080280000000c00000005000000190000000c000000ffffff00260000001c00000005000000000000000300000000000000000000002500
00000c00000005000000120000000c000000010000005700000030000000fe0100005003000010040000920300000500000001028f030d048f030d0453030102
530301028f03250000000c00000008000080280000000c00000005000000250000000c0000000500008078000000100000000000000000000000160000000c00
000018000000520000007001000005000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec
12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200c87bf90d0492b707c87bf90d0000000003000000000000000000000000000000000000000000
00000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c2000300
00000092b707ffffffff0010007801ec120035e4b70730ec1200287cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000c87b
f90d0492b707c87bf90d000000000492b707c87bf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000500
0000180000000c00000000000000120000000c0000000100000054000000fc000000050200005c030000080400008103000001000000e7670741f18607410502
00007b0300001d0000004c000000000000000000000000000000ffffffffffffffff8800000043006100660065004c0061007400740065004500780074007200
610045007300700072006500730073006f005700680069007000700065006400000018000000120000000b0000001200000014000000120000000b0000000b00
00001200000016000000120000000b0000000d000000120000001600000012000000140000000d000000120000001200000012000000140000001f0000001400
00000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c00000002000000270000001800
00000600000000000000ffffff0000000000250000000c00000006000000250000000c0000000800008056000000300000005b050000dd0200003c0600001903
0000050000005b0519033c0619033c06dd025b05dd025b051903250000000c00000008000080250000000c00000005000080280000000c000000060000001900
00000c000000ffffff00260000001c0000000600000000000000030000000000000000000000250000000c00000006000000120000000c000000010000005700
00003000000058050000da0200003f0600001c030000050000005b0519033c0619033c06dd025b05dd025b051903250000000c00000008000080280000000c00
000006000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000006000000dfffffff0000
00000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807
c200407cf90d0492b707407cf90d000000000300000000000000000000000000000000000000000000000000000000000000c87bf90d18000000000000000492
b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec
1200c87bf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000407cf90d0492b707407cf90d000000000492b707407cf90d28ed
120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c00000000000000120000000c0000000100
0000540000009400000063050000e6020000330600000b03000001000000e7670741f186074163050000050300000c0000004c00000000000000000000000000
0000ffffffffffffffff6400000043006100660065004c00610074007400650057006500740018000000120000000b0000001200000014000000120000000b00
00000b000000120000001f000000120000000b000000120000000c00000001000000250000000c0000000d000080120000000c00000002000000270000001800
00000700000000000000ffffff0000000000250000000c00000007000000250000000c0000000800008056000000300000004504000053030000a80500008f03
00000500000045048f03a8058f03a80553034504530345048f03250000000c00000008000080250000000c00000005000080280000000c000000070000001900
00000c000000ffffff00260000001c0000000700000000000000030000000000000000000000250000000c00000007000000120000000c000000010000005700
0000300000004204000050030000ab050000920300000500000045048f03a8058f03a80553034504530345048f03250000000c00000008000080280000000c00
000007000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000007000000dfffffff0000
00000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000fd0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807
c200f8fafd0d0492b707f8fafd0d000000000300000000000000000000000000000000000000000000000000000000000000407cf90d18000000000000000492
b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec
1200407cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed
120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000007000000180000000c00000000000000120000000c0000000100
000054000000c0000000490400005c030000a30500008103000001000000e7670741f1860741490400007b030000130000004c00000000000000000000000000
0000ffffffffffffffff7400000043006100660065004c0061007400740065005700650074005700680069007000700065006400000018000000120000000b00
00001200000014000000120000000b0000000b000000120000001f000000120000000b0000001f00000014000000090000001400000014000000120000001400
0000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff00000000002500
00000c00000008000000250000000c0000000800008056000000300000000b040000dd0200003205000019030000050000000b041903320519033205dd020b04
dd020b041903250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800
000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000570000003000000008040000da020000350500001c03
0000050000000b041903320519033205dd020b04dd020b041903250000000c00000008000080280000000c00000008000000250000000c000000050000802800
00000c0000000100000078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff00000000000000000000
0000bc020000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200c87bf90d0492
b707c87bf90d000000000300000000000000000000000000000000000000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec
12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec
12004590fb77801ff877ffffffff000012003d1100780000c20000000000c87bf90d0492b707c87bf90d000000000492b707c87bf90d28ed1200000000001912
23600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c00000000000000120000000c0000000100000054000000ac00
00000f040000e60200002d0500000b03000001000000e7670741f18607410f04000005030000100000004c000000000000000000000000000000ffffffffffff
ffff6c00000043006100660065004c006100740074006500570068006900700070006500640018000000120000000b0000001200000014000000120000000b00
00000b000000120000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d0000801200
00000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080560000003000
000007000000ef010000e80000002b0200000500000007002b02e8002b02e800ef010700ef0107002b02250000000c00000008000080250000000c0000001610
000026060f002220574d464301000000000001000000000000000400000000200000482500004865000005000080280000000c00000008000000190000000c00
0000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000570000003000
000004000000ec010000eb0000002e0200000500000007002b02e8002b02e800ef010700ef0107002b02250000000c00000008000080280000000c0000000800
0000250000000c00000005000080280000000c0000000200000078000000100000000000000000000000160000000c0000001800000052000000700100000200
0000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec
1200e0a5fc771807c200287cf90d0492b707287cf90d000000000300000000000000000000000000000000000000000000000000000000000000c87bf90d1800
0000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec
120035e4b70730ec1200c87bf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000287cf90d0492b707287cf90d000000000492
b707287cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000002000000180000000c000000000000001200
00000c00000001000000540000008400000020000000f8010000cf0000001d02000001000000e7670741f18607412000000017020000090000004c0000000000
00000000000000000000ffffffffffffffff6000000043006100660065004d006f00630068006100000018000000120000000b000000120000001d0000001400
0000120000001400000012000000120000000c00000001000000250000000c0000000d000080120000000c000000020000002700000018000000080000000000
0000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000002e010000ef0100003f0200002b020000050000002e01
2b023f022b023f02ef012e01ef012e012b02250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffff
ff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000002b01
0000ec010000420200002e020000050000002e012b023f022b023f02ef012e01ef012e012b02250000000c00000008000080280000000c000000080000002500
00000c00000005000080280000000c0000000300000078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfff
ffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000fd0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5
fc771807c200f8fafd0d0492b707f8fafd0d000000000300000000000000000000000000000000000000000000000000000000000000287cf90d180000000000
00000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4
b70730ec1200287cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fa
fd0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c00000000000000120000000c00
00000100000054000000a000000032010000f80100003a0200001d02000001000000e7670741f186074132010000170200000e0000004c000000000000000000
000000000000ffffffffffffffff6800000043006100660065004d006f006300680061004400650063006100660018000000120000000b000000120000001d00
000014000000120000001400000012000000170000001200000012000000120000000b000000120000000c00000001000000250000000c0000000d0000801200
00000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080560000003000
000091020000ef0100002b0400002b0200000500000091022b022b042b022b04ef019102ef0191022b02250000000c00000008000080250000000c0000000500
0080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c0000000800
0000120000000c0000000100000057000000300000008e020000ec0100002e0400002e0200000500000091022b022b042b022b04ef019102ef0191022b022500
00000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000004000000780000001000000000000000000000001600
00000c00000018000000520000007001000004000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806
c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200407cf90d0492b707407cf90d00000000030000000000000000000000000000000000
0000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000
c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000
0000407cf90d0492b707407cf90d000000000492b707407cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00
000004000000180000000c00000000000000120000000c0000000100000054000000cc00000095020000f8010000260400001d02000001000000e7670741f186
07419502000017020000150000004c000000000000000000000000000000ffffffffffffffff7800000043006100660065004d006f0063006800610044006500
6300610066005700680069007000700065006400000018000000120000000b000000120000001d00000014000000120000001400000012000000170000001200
000012000000120000000b0000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d00
0080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c000000080000805600
0000300000004200000067020000df010000a3020000050000004200a302df01a302df016702420067024200a302250000000c00000008000080250000000c00
000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00
000008000000120000000c0000000100000057000000300000003f00000064020000e2010000a6020000050000004200a302df01a302df016702420067024200
a302250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c000000050000007800000010000000000000000000
0000160000000c00000018000000520000007001000005000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb
12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d000000000300000000000000000000000000
000000000000000000000000000000000000407cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000
c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200407cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000
c20000000000287cf90d0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af5007864760008000000002500
00000c00000005000000180000000c00000000000000120000000c0000000100000054000000d00000004600000070020000da0100009502000001000000e767
0741f1860741460000008f020000160000004c000000000000000000000000000000ffffffffffffffff7800000043006100660065004d006f00630068006100
4500780074007200610045007300700072006500730073006f0018000000120000000b000000120000001d000000140000001200000014000000120000001600
0000120000000b0000000d000000120000001600000012000000140000000d00000012000000120000001200000014000000120000000c000000010000002500
00000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00
00000800008056000000300000001a0200006702000042040000a3020000050000001a02a3024204a302420467021a0267021a02a302250000000c0000000800
0080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c000000080000000000000003000000000000000000
0000250000000c00000008000000120000000c000000010000005700000030000000170200006402000045040000a6020000050000001a02a3024204a3024204
67021a0267021a02a302250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000006000000780000001000
00000000000000000000160000000c00000018000000520000007001000006000000dfffffff000000000000000000000000bc02000000000000000000204100
7200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fd0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fafd0d00000000030000000000
0000000000000000000000000000000000000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff0000
1200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200287cf90df8ec12004590fb77801ff877ffffffff0000
12003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c00000006000000180000000c00000000000000120000000c0000000100000054000000fc0000001e020000700200003c0400009502
000001000000e7670741f18607411e0200008f0200001d0000004c000000000000000000000000000000ffffffffffffffff8800000043006100660065004d00
6f006300680061004500780074007200610045007300700072006500730073006f005700680069007000700065006400000018000000120000000b0000001200
00001d0000001400000012000000140000001200000016000000120000000b0000000d000000120000001600000012000000140000000d000000120000001200
000012000000140000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d0000801200
00000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080560000003000
0000cc050000ef010000c00600002b02000005000000cc052b02c0062b02c006ef01cc05ef01cc052b02250000000c00000008000080250000000c0000000500
0080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c0000000800
0000120000000c000000010000005700000030000000c9050000ec010000c30600002e02000005000000cc052b02c0062b02c006ef01cc05ef01cc052b022500
00000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000007000000780000001000000000000000000000001600
00000c00000018000000520000007001000007000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806
c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200c87bf90d0492b707c87bf90d00000000030000000000000000000000000000000000
0000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000
c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000
0000c87bf90d0492b707c87bf90d000000000492b707c87bf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00
000007000000180000000c00000000000000120000000c000000010000005400000094000000d0050000f8010000bb0600001d02000001000000e7670741f186
0741d0050000170200000c0000004c000000000000000000000000000000ffffffffffffffff6400000043006100660065004d006f0063006800610057006500
740018000000120000000b000000120000001d000000140000001200000014000000120000001f000000120000000b000000120000000c000000010000002500
00000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00
00000800008056000000300000006904000067020000e7050000a3020000050000006904a302e705a302e7056702690467026904a302250000000c0000000800
0080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c000000080000000000000003000000000000000000
0000250000000c00000008000000120000000c0000000100000057000000300000006604000064020000ea050000a6020000050000006904a302e705a302e705
6702690467026904a302250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000001000000780000001000
00000000000000000000160000000c00000018000000520000007001000001000000dfffffff000000000000000000000000bc02000000000000000000204100
7200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200407cf90d0492b707407cf90d00000000030000000000
0000000000000000000000000000000000000000000000000000c87bf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff0000
1200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200c87bf90df8ec12004590fb77801ff877ffffffff0000
12003d1100780000c20000000000407cf90d0492b707407cf90d000000000492b707407cf90d28ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c00000001000000180000000c00000000000000120000000c0000000100000054000000c00000006d04000070020000e20500009502
000001000000e7670741f18607416d0400008f020000130000004c000000000000000000000000000000ffffffffffffffff7400000043006100660065004d00
6f006300680061005700650074005700680069007000700065006400000018000000120000000b000000120000001d0000001400000012000000140000001200
00001f000000120000000b0000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d00
0080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c000000080000805600
00003000000069040000ef010000ab0500002b0200000500000069042b02ab052b02ab05ef016904ef0169042b02250000000c00000008000080250000000c00
000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00
000008000000120000000c00000001000000570000003000000066040000ec010000ae0500002e0200000500000069042b02ab052b02ab05ef016904ef016904
2b02250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c000000020000007800000010000000000000000000
0000160000000c00000018000000520000007001000002000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0d00000000fceb
12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fafd0d000000000300000000000000000000000000
000000000000000000000000000000000000407cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000
c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200407cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000
c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed12006af5007864760008000000002500
00000c00000002000000180000000c00000000000000120000000c0000000100000054000000ac0000006d040000f8010000a60500001d02000001000000e767
0741f18607416d04000017020000100000004c000000000000000000000000000000ffffffffffffffff6c00000043006100660065004d006f00630068006100
570068006900700070006500640018000000120000000b000000120000001d000000140000001200000014000000120000001f00000014000000090000001400
0000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c000000020000002700000018000000080000000000
0000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000000700000004010000e800000040010000050000000700
4001e8004001e80004010700040107004001250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffff
ff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000000400
000001010000eb000000430100000500000007004001e8004001e80004010700040107004001250000000c00000008000080280000000c000000080000002500
00000c00000005000080280000000c0000000300000078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfff
ffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5
fc771807c200287cf90d0492b707287cf90d000000000300000000000000000000000000000000000000000000000000000000000000f8fafd0d180000000000
00000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4
b70730ec1200f8fafd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000287cf90d0492b707287cf90d000000000492b707287c
f90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c00000000000000120000000c00
00000100000054000000880000001a0000000d010000d40000003201000001000000e7670741f18607411610000026060f002220574d46430100000000000100
000000000000040000000020000048050000486500001a0000002c0100000a0000004c000000000000000000000000000000ffffffffffffffff600000004300
61007000700075006300630069006e006f0018000000120000001400000014000000140000001200000012000000090000001400000014000000120000000c00
000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c0000000800
0000250000000c00000008000080560000003000000011010000040100002d0200004001000005000000110140012d0240012d02040111010401110140012500
00000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c00000008000000000000000300
00000000000000000000250000000c00000008000000120000000c0000000100000057000000300000000e010000010100003002000043010000050000001101
40012d0240012d0204011101040111014001250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000400
000078000000100000000000000000000000160000000c00000018000000520000007001000004000000dfffffff000000000000000000000000bc0200000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200407cf90d0492b707407cf90d0000
00000300000000000000000000000000000000000000000000000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200287cf90df8ec12004590fb77801f
f877ffffffff000012003d1100780000c20000000000407cf90d0492b707407cf90d000000000492b707407cf90d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000004000000180000000c00000000000000120000000c0000000100000054000000a8000000150100000d01
0000280200003201000001000000e7670741f1860741150100002c0100000f0000004c000000000000000000000000000000ffffffffffffffff6c0000004300
61007000700075006300630069006e006f0044006500630061006600000018000000120000001400000014000000140000001200000012000000090000001400
000014000000170000001200000012000000120000000b000000120000000c00000001000000250000000c0000000d000080120000000c000000020000002700
0000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000005002000004010000f503
0000400100000500000050024001f5034001f50304015002040150024001250000000c00000008000080250000000c00000005000080280000000c0000000800
0000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100
000057000000300000004d02000001010000f8030000430100000500000050024001f5034001f50304015002040150024001250000000c000000080000802800
00000c00000008000000250000000c00000005000080280000000c0000000500000078000000100000000000000000000000160000000c000000180000005200
00007001000005000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022
f877ffffffffc0ec1200e0a5fc771807c200c87bf90d0492b707c87bf90d00000000030000000000000000000000000000000000000000000000000000000000
0000407cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffff
ffff0010007801ec120035e4b70730ec1200407cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000c87bf90d0492b707c87b
f90d000000000492b707c87bf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000005000000180000000c00
000000000000120000000c0000000100000054000000d0000000540200000d010000f00300003201000001000000e7670741f1860741540200002c0100001600
00004c000000000000000000000000000000ffffffffffffffff78000000430061007000700075006300630069006e006f004400650063006100660057006800
69007000700065006400180000001200000014000000140000001400000012000000120000000900000014000000140000001700000012000000120000001200
00000b0000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c00
00000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000009c05
0000040100009606000040010000050000009c05400196064001960604019c0504019c054001250000000c00000008000080250000000c000000050000802800
00000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c000000080000001200
00000c00000001000000570000003000000099050000010100009906000043010000050000009c05400196064001960604019c0504019c054001250000000c00
000008000080280000000c00000008000000250000000c00000005000080280000000c0000000600000078000000100000000000000000000000160000000c00
000018000000520000007001000006000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0d00000000fceb12008806c200b0ec
12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fafd0d0000000003000000000000000000000000000000000000000000
00000000000000000000c87bf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c2000300
00000092b707ffffffff0010007801ec120035e4b70730ec1200c87bf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fa
fd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000600
0000180000000c00000000000000120000000c00000001000000540000009c000000a00500000d010000910600003201000001000000e7670741f1860741a005
00002c0100000d0000004c000000000000000000000000000000ffffffffffffffff68000000430061007000700075006300630069006e006f00440072007900
000018000000120000001400000014000000140000001200000012000000090000001400000014000000170000000d00000013000000120000000c0000000100
0000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c000000080000002500
00000c000000080000805600000030000000420000007a010000ea010000b6010000050000004200b601ea01b601ea017a0142007a014200b601250000000c00
000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000
000000000000250000000c00000008000000120000000c0000000100000057000000300000003f00000077010000ed010000b9010000050000004200b601ea01
b601ea017a0142007a014200b601250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c000000070000007800
0000100000000000000000000000160000000c00000018000000520000007001000007000000dfffffff000000000000000000000000bc020000000000000000
002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d000000000300
000000000000000000000000000000000000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffff
ffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801ff877ffff
ffff000012003d1100780000c20000000000287cf90d0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed12006af5
00786476000800000000250000000c00000007000000180000000c00000000000000120000000c0000000100000054000000d80000004600000083010000e501
0000a801000001000000e7670741f186074146000000a2010000170000004c000000000000000000000000000000ffffffffffffffff7c000000430061007000
700075006300630069006e006f004500780074007200610045007300700072006500730073006f00000018000000120000001400000014000000140000001200
00001200000009000000140000001400000016000000120000000b0000000d000000120000001600000012000000140000000d00000012000000120000001200
000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff000000
0000250000000c00000008000000250000000c0000000800008056000000300000001b0200007a0100004d040000b6010000050000001b02b6014d04b6014d04
7a011b027a011b02b601250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c00
00000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000570000003000000018020000770100005004
0000b9010000050000001b02b6014d04b6014d047a011b027a011b02b601250000000c00000008000080280000000c00000008000000250000000c0000000500
0080280000000c0000000100000078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff000000000000
000000000000bc020000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200c87b
f90d0492b707c87bf90d000000000300000000000000000000000000000000000000000000000000000000000000287cf90d18000000000000000492b7070492
b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200287c
f90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000c87bf90d0492b707c87bf90d000000000492b707c87bf90d28ed12000000
0000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c00000000000000120000000c000000010000005400
0000000100001f0200008301000048040000a801000001000000e7670741f18607411f020000a20100001e0000004c000000000000000000000000000000ffff
ffffffffffff88000000430061007000700075006300630069006e006f004500780074007200610045007300700072006500730073006f005700680069007000
7000650064001800000012000000140000001400000014000000120000001200000009000000140000001400000016000000120000000b0000000d0000001200
00001600000012000000140000000d000000120000001200000012000000140000001f0000001400000009000000140000001400000012000000140000001200
00000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00
000008000000250000000c000000080000805600000030000000830400007a01000007060000b6010000050000008304b6010706b60107067a0183047a018304
b601250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c000000080000000000
0000030000000000000000000000250000000c00000008000000120000000c00000001000000570000003000000080040000770100000a060000b90100000500
00008304b6010706b60107067a0183047a018304b601250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00
00000200000078000000100000000000000000000000160000000c00000018000000520000007001000002000000dfffffff000000000000000000000000bc02
0000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000fd0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200f8fafd0d0492b707f8fa
fd0d000000000300000000000000000000000000000000000000000000000000000000000000c87bf90d18000000000000000492b7070492b707b0ec12004590
fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200c87bf90df8ec12004590
fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492b707f8fafd0d28ed120000000000191223600c00
0000c4ed12006af500786476000800000000250000000c00000002000000180000000c00000000000000120000000c0000000100000054000000c40000008704
00008301000002060000a801000001000000e7670741f186074187040000a2010000140000004c000000000000000000000000000000ffffffffffffffff7400
0000430061007000700075006300630069006e006f00440072007900570068006900700070006500640018000000120000001400000014000000140000001200
000012000000090000001400000014000000170000000d000000130000001f000000140000000900000014000000140000001200000014000000120000000c00
000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c0000000800
0000250000000c000000080000805600000030000000290400000401000076050000400100000500000029044001760540017605040129040401290440012500
00000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c00000008000000000000000300
00000000000000000000250000000c00000008000000120000000c00000001000000570000003000000026040000010100007905000043010000050000002904
400176054001760504012904040129044001250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000300
000078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfffffff000000000000000000000000bc0200000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287cf90d0492b707287cf90d0000
00000300000000000000000000000000000000000000000000000000000000000000f8fafd0d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fafd0df8ec12004590fb77801f
f877ffffffff000012003d1100780000c20000000000287cf90d0492b707287cf90d000000000492b707287cf90d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000003000000180000000c00000000000000120000000c0000000100000054000000b40000002d0400000d01
0000710500003201000001000000e7670741f18607412d0400002c010000110000004c000000000000000000000000000000ffffffffffffffff700000004300
61007000700075006300630069006e006f0057006800690070007000650064000000180000001200000014000000140000001400000012000000120000000900
000014000000140000001f000000140000000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d0000801200
00000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080560000003000
0000070000001e000000e80000005a0000000500000007005a00e8005a00e8001e0007001e0007005a00250000000c00000008000080250000000c0000000500
0080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c0000000800
0000120000000c000000010000005700000030000000040000001b000000eb0000005d0000000500000007005a00e8005a00e8001e0007001e0007005a002500
00000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000004000000780000001000000000000000000000001600
00000c00000018000000520000007001000004000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806
c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200407cf90d0492b707407cf90d00000000030000000000000000000000000000000000
0000000000000000000000000000287cf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000
c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200287cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000
0000407cf90d0492b707407cf90d000000000492b707407cf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00
000004000000180000000c00000000000000120000000c0000000100000054000000880000001c00000027000000d30000004c00000001000000e7670741f186
07411c000000460000000a0000004c000000000000000000000000000000ffffffffffffffff6000000043006f006600660065006500530068006f0070001800
0000140000000b0000000b000000120000001200000016000000140000001400000014000000120000000c00000001000000250000000c0000000d0000801200
00000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080560000003000
0000070000008e000000e8000000ca000000050000000700ca00e800ca00e8008e0007008e000700ca00250000000c00000008000080250000000c0000000500
0080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c0000000800
0000120000000c000000010000005700000030000000040000008b000000eb000000cd000000050000000700ca00e800ca00e8008e0007008e000700ca002500
00000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000005000000780000001000000000000000000000001600
00000c00000018000000520000007001000005000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd0d00000000fceb12008806
c200b0ec12004590fb77f022f877ffffffffc0ec1200ba02000026060f006a05574d464301000000000001000000000000000400000048050000000000004865
0000e0a5fc771807c200f8fafd0d0492b707f8fafd0d000000000300000000000000000000000000000000000000000000000000000000000000407cf90d1800
0000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec
120035e4b70730ec1200407cf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000f8fafd0d0492b707f8fafd0d000000000492
b707f8fafd0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000005000000180000000c000000000000001200
00000c00000001000000540000007c0000002e00000097000000c0000000bc00000001000000e7670741f18607412e000000b6000000080000004c0000000000
00000000000000000000ffffffffffffffff5c00000045007300700072006500730073006f001600000012000000140000000d00000012000000120000001200
000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff000000
0000250000000c00000008000000250000000c000000080000805600000030000000120100008e0000001b020000ca000000050000001201ca001b02ca001b02
8e0012018e001201ca00250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c00
00000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000000f0100008b0000001e02
0000cd000000050000001201ca001b02ca001b028e0012018e001201ca00250000000c00000008000080280000000c00000008000000250000000c0000000500
0080280000000c0000000600000078000000100000000000000000000000160000000c00000018000000520000007001000006000000dfffffff000000000000
000000000000bc020000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200287c
f90d0492b707287cf90d000000000300000000000000000000000000000000000000000000000000000000000000f8fafd0d18000000000000000492b7070492
b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200f8fa
fd0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000287cf90d0492b707287cf90d000000000492b707287cf90d28ed12000000
0000191223600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c00000000000000120000000c000000010000005400
0000a0000000160100009700000016020000bc00000001000000e7670741f186074116010000b60000000e0000004c000000000000000000000000000000ffff
ffffffffffff6800000044006f00750062006c00650045007300700072006500730073006f001700000014000000140000001400000009000000120000001600
000012000000140000000d00000012000000120000001200000014000000120000000c00000001000000250000000c0000000d0000800e000000140000000000
000010000000140000000400000003010800050000000b0200000000050000000c02c2035c0708000000fa02050000000000ffffff00040000002d0100000700
0000fc020100000000000000040000002d0101001c000000fb029cff00000000000090010000000000000020417269616c000000000000000000000000000000
000000000000000000000000040000002d0102001c000000fb021000070000000000bc02000000000102022253797374656d0000000000000000000000000000
000000000000000000000000040000002d01030004000000f0010200040000000201020007000000fc020000ffffff000000040000002d010200040000002d01
00000e0000002403050007001903e8001903e800dd020700dd0207001903040000002d010000040000002d01010004000000f0010200050000000102ffffff00
08000000fa0200000300000000000000040000002d01020004000000020101000e0000002503050007001903e8001903e800dd020700dd020700190304000000
2d01000004000000f0010200040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000
0000000000000000000000000000000000000000040000002d01020005000000090200000000040000000201010015000000320a05032d000900000043616665
4c6174746572180012000b001200140012000b000b00120004000000020101001c000000fb021000070000000000bc02000000000102022253797374656d0000
000000000000000000000000000000000000000000000000040000002d010400040000000201020007000000fc020000ffffff000000040000002d0105000400
00002d0100000e00000024030500290119031e0219031e02dd022901dd0229011903040000002d010000040000002d01010004000000f0010500050000000102
ffffff0008000000fa0200000300000000000000040000002d01050004000000020101000e00000025030500290119031e0219031e02dd022901dd0229011903
040000002d01000004000000f0010500040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000
000000000000000000000000000000000000000000000000040000002d0105000500000009020000000004000000020101001c000000320a05032d010e000000
436166654c617474654465636166180012000b001200140012000b000b00120017001200120012000b000400000002010100040000002d010400040000000201
020007000000fc020000ffffff000000040000002d010600040000002d0100000e0000002403050050021903cf031903cf03dd025002dd025002190304000000
2d010000040000002d01010004000000f0010600050000000102ffffff0008000000fa0200000300000000000000040000002d01060004000000020101000e00
00002503050050021903cf031903cf03dd025002dd0250021903040000002d01000004000000f0010600040000002d010100040000002e0118001c000000fb02
dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010600050000000902
00000000040000000201010027000000320a0503540215000000436166654c6174746544656361665768697070656473180012000b001200140012000b000b00
120017001200120012000b001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000
040000002d010700040000002d0100000e0000002403050042008f03c4018f03c40153034200530342008f03040000002d010000040000002d01010004000000
f0010700050000000102ffffff0008000000fa0200000300000000000000040000002d01070004000000020101000e0000002503050042008f03c4018f03c401
53034200530342008f03040000002d01000004000000f0010700040000002d010100040000002e0118001c000000fb02dfff000000000000bc02000000000000
0020417269616c000000000000000000000000000000000000000000000000000000040000002d01070005000000090200000000040000000201010028000000
320a7b03460016000000436166654c617474654578747261457370726573736f180012000b001200140012000b000b001200160012000b000d00120016001200
14000d0012001200120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010800040000002d01
00000e0000002403050001028f030d048f030d0453030102530301028f03040000002d010000040000002d01010004000000f0010800050000000102ffffff00
08000000fa0200000300000000000000040000002d01080004000000020101000e0000002503050001028f030d048f030d0453030102530301028f0304000000
2d01000004000000f0010800040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000
0000000000000000000000000000000000000000040000002d01080005000000090200000000040000000201010033000000320a7b0305021d00000043616665
4c617474654578747261457370726573736f5768697070656464180012000b001200140012000b000b001200160012000b000d0012001600120014000d001200
1200120014001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d01
0900040000002d0100000e000000240305005b0519033c0619033c06dd025b05dd025b051903040000002d010000040000002d01010004000000f00109000500
00000102ffffff0008000000fa0200000300000000000000040000002d01090004000000020101000e000000250305005b0519033c0619033c06dd025b05dd02
5b051903040000002d01000004000000f0010900040000002d010100040000002e0118001c000000fb02dfff000000000000bc02000000000000002041726961
6c000000000000000000000000000000000000000000000000000000040000002d01090005000000090200000000040000000201010019000000320a05036305
0c000000436166654c61747465576574180012000b001200140012000b000b0012001f0012000b000400000002010100040000002d0104000400000002010200
07000000fc020000ffffff000000040000002d010a00040000002d0100000e0000002403050045048f03a8058f03a80553034504530345048f03040000002d01
0000040000002d01010004000000f0010a00050000000102ffffff0008000000fa0200000300000000000000040000002d010a0004000000020101000e000000
2503050045048f03a8058f03a80553034504530345048f03040000002d01000004000000f0010a00040000002d010100040000002e0118001c000000fb02dfff
000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010a000500000009020000
0000040000000201010024000000320a7b03490413000000436166654c617474655765745768697070656473180012000b001200140012000b000b0012001f00
12000b001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00
040000002d0100000e000000240305000b041903320519033205dd020b04dd020b041903040000002d010000040000002d01010004000000f0010b0005000000
0102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305000b041903320519033205dd020b04dd020b04
1903040000002d01000004000000f0010b00040000002d01010004000000f0010200040000002e0118001c000000fb02dfff000000000000bc02000000000000
0020417269616c000000000000000000000000000000000000000000000000000000040000002d0102000500000009020000000004000000020101001f000000
320a05030f0410000000436166654c6174746557686970706564180012000b001200140012000b000b0012001f00140009001400140012001400040000000201
0100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050007002b02e8002b02
e800ef010700ef0107002b02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa02000003000000000000000400
00002d010b0004000000020101000e0000002503050007002b02e8002b02e800ef010700ef0107002b02040000002d01000004000000f0010b00040000002d01
010004000000f0010500040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000000000000000000000000000
00000000000000000000040000002d01050005000000090200000000040000000201010015000000320a1702200009000000436166654d6f6368615718001200
0b0012001d0014001200140012000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b0004000000
2d0100000e000000240305002e012b023f022b023f02ef012e01ef012e012b02040000002d010000040000002d01010004000000f0010b00050000000102ffff
ff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305002e012b023f022b023f02ef012e01ef012e012b020400
00002d01000004000000f0010b00040000002d01010004000000f0010600040000002e0118001c000000fb02dfff000000000000bc0200000000000000204172
69616c000000000000000000000000000000000000000000000000000000040000002d0106000500000009020000000004000000020101001c000000320a1702
32010e000000436166654d6f6368614465636166180012000b0012001d00140012001400120017001200120012000b000400000002010100040000002d010400
040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050091022b022b042b022b04ef019102ef019102
2b02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000
020101000e0000002503050091022b022b042b022b04ef019102ef0191022b02040000002d01000004000000f0010b00040000002d01010004000000f0010700
040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000
040000002d01070005000000090200000000040000000201010027000000320a1702950215000000436166654d6f6368614465636166576869707065646f1800
12000b0012001d00140012001400120017001200120012000b001f001400090014001400120014000400000002010100040000002d0104000400000002010200
07000000fc020000ffffff000000040000002d010b00040000002d0100000e000000240305004200a302df01a302df016702420067024200a302040000002d01
0000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000
250305004200a302df01a302df016702420067024200a302040000002d01000004000000f0010b00040000002d01010004000000f0010800040000002e011800
1c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010800
05000000090200000000040000000201010028000000320a8f02460016000000436166654d6f6368614578747261457370726573736f180012000b0012001d00
1400120014001200160012000b000d0012001600120014000d0012001200120014000400000002010100040000002d010400040000000201020007000000fc02
0000ffffff000000040000002d010b00040000002d0100000e000000240305001a02a3024204a302420467021a0267021a02a302040000002d01000004000000
2d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305001a02
a3024204a302420467021a0267021a02a302040000002d01000004000000f0010b00040000002d01010004000000f0010900040000002e0118001c000000fb02
dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010900050000000902
00000000040000000201010033000000320a8f021e021d000000436166654d6f6368614578747261457370726573736f5768697070656464180012000b001200
1d001400120014001200160012000b000d0012001600120014000d0012001200120014001f001400090014001400120014000400000002010100040000002d01
0400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e00000024030500cc052b02c0062b02c006ef01cc05ef01
cc052b02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b000400
0000020101000e00000025030500cc052b02c0062b02c006ef01cc05ef01cc052b02040000002d01000004000000f0010b00040000002d01010004000000f001
0a00040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000000000000000000000000000000000000000
0000040000002d010a0005000000090200000000040000000201010019000000320a1702d0050c000000436166654d6f636861576574180012000b0012001d00
14001200140012001f0012000b000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b0004000000
2d0100000e000000240305006904a302e705a302e7056702690467026904a302040000002d010000040000002d01010004000000f0010b00050000000102ffff
ff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305006904a302e705a302e7056702690467026904a3020400
00002d01000004000000f0010b00040000002d01010004000000f0010200040000002e0118001c000000fb02dfff000000000000bc0200000000000000204172
69616c000000000000000000000000000000000000000000000000000000040000002d01020005000000090200000000040000000201010024000000320a8f02
6d0413000000436166654d6f6368615765745768697070656473180012000b0012001d0014001200140012001f0012000b001f00140009001400140012001400
0400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e000000240305006904
2b02ab052b02ab05ef016904ef0169042b02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa02000003000000
00000000040000002d010b0004000000020101000e0000002503050069042b02ab052b02ab05ef016904ef0169042b02040000002d01000004000000f0010b00
040000002d01010004000000f0010500040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000000000000000
00000000000000000000000000000000040000002d0105000500000009020000000004000000020101001f000000320a17026d0410000000436166654d6f6368
6157686970706564180012000b0012001d0014001200140012001f001400090014001400120014000400000002010100040000002d0104000400000002010200
07000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050007004001e8004001e80004010700040107004001040000002d01
0000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000
2503050007004001e8004001e80004010700040107004001040000002d01000004000000f0010b00040000002d01010004000000f0010600040000002e011800
1c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010600
05000000090200000000040000000201010016000000320a2c011a000a00000043617070756363696e6f18001200140014001400120012000900140014000400
000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050011014001
2d0240012d0204011101040111014001040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa020000030000000000
0000040000002d010b0004000000020101000e00000025030500110140012d0240012d0204011101040111014001040000002d01000004000000f0010b000400
00002d01010004000000f0010700040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000000000000000
0000000000000000000000000000040000002d0107000500000009020000000004000000020101001e000000320a2c0115010f00000043617070756363696e6f
446563616664180012001400140014001200120009001400140017001200120012000b000400000002010100040000002d010400040000000201020007000000
fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050050024001f5034001f50304015002040150024001040000002d0100000400
00002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e00000025030500
50024001f5034001f50304015002040150024001040000002d01000004000000f0010b00040000002d01010004000000f0010800040000002e0118001c000000
fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01080005000000
090200000000040000000201010028000000320a2c0154021600000043617070756363696e6f4465636166576869707065641800120014001400140012001200
09001400140017001200120012000b001f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffff
ff000000040000002d010b00040000002d0100000e000000240305009c05400196064001960604019c0504019c054001040000002d010000040000002d010100
04000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305009c0540019606
4001960604019c0504019c054001040000002d01000004000000f0010b00040000002d01010004000000f0010900040000002e0118001c000000fb02dfff0000
00000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01090005000000090200000000
04000000020101001b000000320a2c01a0050d00000043617070756363696e6f44727961180012001400140014001200120009001400140017000d0013000400
000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e000000240305004200b601
ea01b601ea017a0142007a014200b601040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa020000030000000000
0000040000002d010b0004000000020101000e000000250305004200b601ea01b601ea017a0142007a014200b601040000002d01000004000000f0010b000400
00002d01010004000000f0010a00040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000000000000000
0000000000000000000000000000040000002d010a000500000009020000000004000000020101002a000000320aa20146001700000043617070756363696e6f
4578747261457370726573736f001800120014001400140012001200090014001400160012000b000d0012001600120014000d00120012001200140004000000
02010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e000000240305001b02b6014d04
b6014d047a011b027a011b02b601040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000
040000002d010b0004000000020101000e000000250305001b02b6014d04b6014d047a011b027a011b02b601040000002d01000004000000f0010b0004000000
2d01010004000000f0010200040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000
000000000000000000000000040000002d01020005000000090200000000040000000201010034000000320aa2011f021e00000043617070756363696e6f4578
747261457370726573736f576869707065641800120014001400140012001200090014001400160012000b000d0012001600120014000d001200120012001400
1f001400090014001400120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b0004000000
2d0100000e000000240305008304b6010706b60107067a0183047a018304b601040000002d010000040000002d01010004000000f0010b00050000000102ffff
ff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305008304b6010706b60107067a0183047a018304b6010400
00002d01000004000000f0010b00040000002d01010004000000f0010500040000002e0118001c000000fb02dfff000000000000bc0200000000000000204172
69616c000000000000000000000000000000000000000000000000000000040000002d01050005000000090200000000040000000201010025000000320aa201
87041400000043617070756363696e6f44727957686970706564180012001400140014001200120009001400140017000d0013001f0014000900140014001200
14000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e00000024030500
2904400176054001760504012904040129044001040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300
000000000000040000002d010b0004000000020101000e000000250305002904400176054001760504012904040129044001040000002d01000004000000f001
0b00040000002d01010004000000f0010600040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000
000000000000000000000000000000000000040000002d01060005000000090200000000040000000201010021000000320a2c012d0411000000436170707563
63696e6f576869707065647018001200140014001400120012000900140014001f001400090014001400120014000400000002010100040000002d0104000400
00000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050007005a00e8005a00e8001e0007001e0007005a00
040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b00040000000201
01000e0000002503050007005a00e8005a00e8001e0007001e0007005a00040000002d01000004000000f0010b00040000002d01010004000000f00107000400
00002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000000000000000000000000000000000000000000000000400
00002d01070005000000090200000000040000000201010016000000320a46001c000a000000436f6666656553686f70180014000b000b001200120016001400
140014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403
05000700ca00e800ca00e8008e0007008e000700ca00040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa020000
0300000000000000040000002d010b0004000000020101000e000000250305000700ca00e800ca00e8008e0007008e000700ca00040000002d01000004000000
f0010b00040000002d01010004000000f0010800040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000
0000000000000000000000000000000000000000040000002d01080005000000090200000000040000000201010013000000320ab6002e000800000045737072
6573736f1600120014000d0012001200120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d01
0b00040000002d0100000e000000240305001201ca001b02ca001b028e0012018e001201ca00040000002d010000040000002d01010004000000f0010b000500
00000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e000000250305001201ca001b02ca001b028e0012018e00
1201ca00040000002d01000004000000f0010b00040000002d01010004000000f0010900040000002e0118001c000000fb02dfff000000000000bc0200000000
00000020417269616c000000000000000000000000000000000000000000000000000000040000002d0109000500000009020000000004000000020101001c00
0000320ab60016010e000000446f75626c65457370726573736f1700140014001400090012001600120014000d0012001200120014000400000002010100040000002d010400030000000000}}}}}{
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_165]#}{Here is one of the combinations, a simple implementation of a Cappuccino: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_211" \\o "A_211" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200310031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {class Cappuccino:
\par   def __init__(self):
\par     self.cost = 1
\par     self.description = "Cappucino"
\par   def getCost(self):
\par     return self.cost
\par   def getDescription(self):
\par     return self.description
\par 
\par 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_166]#
\par #[BT_167]#}{The key to using this method is to find the particular combination you want.  So, once you've found the drink you would like, here is how you would use it, as shown in the CoffeeShop class in the following code: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_212" \\o "A_212" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200310032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {
#: cX:decorator:nodecorators:CoffeeShop.py
\par # Coffee example with no decorators
\par 
\par class Espresso: pass
\par class DoubleEspresso: pass
\par class EspressoConPanna: pass
\par 
\par class Cappuccino:
\par   def __init__(self):
\par     self.cost = 1
\par     self.description = "Cappucino"
\par   def getCost(self):
\par     return self.cost
\par   def getDescription(self):
\par     return self.description
\par 
\par class CappuccinoDecaf: pass
\par class CappuccinoDecafWhipped: pass
\par class CappuccinoDry: pass
\par class CappuccinoDryWhipped: pass
\par class CappuccinoExtraEspresso: pass
\par class CappuccinoExtraEspressoWhipped: pass
\par class CappuccinoWhipped: pass
\par 
\par class CafeMocha: pass
\par class CafeMochaDecaf: pass
\par class CafeMochaDecafWhipped:
\par   def __init__(self):
\par     self.cost = 1.25
\par     self.description = \\
\par       "Cafe Mocha decaf whipped cream"
\par   def getCost(self):
\par     return self.cost
\par   def getDescription(self):
\par     return self.description
\par 
\par class CafeMochaExtraEspresso: pass
\par class CafeMochaExtraEspressoWhipped: pass
\par class CafeMochaWet: pass
\par class CafeMochaWetWhipped: pass
\par class CafeMochaWhipped: pass
\par 
\par class CafeLatte: pass
\par class CafeLatteDecaf: pass
\par class CafeLatteDecafWhipped: pass
\par class CafeLatteExtraEspresso: pass
\par class CafeLatteExtraEspressoWhipped: pass
\par class CafeLatteWet: pass
\par class CafeLatteWetWhipped: pass
\par class CafeLatteWhipped: pass
\par 
\par cappuccino = Cappuccino()
\par print (cappuccino.getDescription() + ": $" + 
\par   `cappuccino.getCost()`)
\par 
\par cafeMocha = CafeMochaDecafWhipped()
\par print (cafeMocha.getDescription()
\par   + ": $" + `cafeMocha.getCost()`)
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_168]#
\par #[BT_169]#}{And here is the corresponding output: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_213" \\o "A_213" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200310033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {Cappucino: $1.0
Cafe Mocha decaf whipped cream: $1.25
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_170]#
\par #[BT_171]#}{You can see that creating the 
particular combination you want is easy, since you are just creating an instance of a class. However, there are a number of problems with this approach. Firstly, the combinations are fixed statically so that any combination a customer may wish to order ne
eds to be created up front. Secondly, the resulting menu is so huge that finding your particular combination is difficult and time consuming. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_214" \\
o "A_214" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200310034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420101}
The decorator approach{\*\bkmkend _Toc534420101}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_172]#}{
Another approach would be to break the drinks down into the various components such as espresso and foamed milk, and then let the customer combine the components to describe a particular coffee. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_215" \\o "A_215" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200310035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_173]#}{In order to do this programmatically, we use the Decorator pattern.  A Decorator adds responsibility to a component by wrapping it, but the Decorator conforms to the interface of the 
component it encloses, so the wrapping is transparent. Decorators can also be nested without the loss of this transparency. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_216" \\o "A_216" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200310036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard \qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_174]#}{{\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}
{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}\picscalex96\picscaley96\piccropl0\piccropr0\piccropt0\piccropb0
\picw13832\pich4948\picwgoal7842\pichgoal2805\wmetafile8\bliptag-154012702\blipupi299{\*\blipuid f6d1f3e2b20bd690bfdbbc052ed253fc}
0100090000036735000011001610000000001610000026060f002220574d46430100000000000100dda4000000000300000000200000502e0000504e00000100
00008c000000050000000d000000ca050000180200000000000000000000083600005413000020454d4600000100504e00002a0200000e0000000f0000006c00
0000000000000c090000d20c0000c400000016010000000000000000000000000000f8fd0200743d040056004900530049004f00000044007200610077006900
6e006700000000000000250000000c00000008000080250000000c000000050000805200000070010000010000009cffffff0000000000000000000000009001
0000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000c20000000000000000000000000000000000000000000d0000000000
000000000000000000000000000000000000000000000000000038ddfb0d6800000000000000409ffa0d409ffa0d30f112004590fb77701ff877ffffffff40f1
1200891000780000c200000000005c0000004c9ffa0dffffffff4cddfb0d07b634604cddfb0d00000000200000006cddfb0d38ddfb0dd4b534604c9ffa0d38dd
fb0d00000000000000006476000800000000250000000c00000001000000250000000c0000000e000080280000000c000000010000000a000000100000000000
00000000000009000000100000006206000049020000120000000c0000000200000027000000180000000100000000000000ffffff0000000000250000000c00
000001000000250000000c00000008000080560000003000000008000000d9010000e9000000150200000500000008001502e9001502e900d9010800d9010800
1502250000000c00000008000080250000000c00000005000080280000000c00000001000000190000000c000000ffffff00260000001c000000010000000000
0000030000000000000000000000250000000c00000001000000120000000c00000001000000570000003000000005000000d6010000ec000000180200000500
000008001502e9001502e900d9010800d90108001502250000000c00000008000080280000000c00000001000000250000000c00000005000080780000001000
00000000000000000000160000000c00000018000000520000007001000001000000dfffffff000000000000000000000000bc02000000000000000000204100
7200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d10700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200486fd1070492b707486fd10700000000030000000000
00000000000000000000000000000000000000000000000000006023fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff0000
1200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec12006023fa0df8ec12004590fb77801ff877ffffffff0000
12003d1100780000c20000000000486fd1070492b707486fd107000000000492b707486fd10728ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c00000001000000180000000c00000000000000120000000c00000001000000540000008400000029000000e2010000c60000000702
000001000000e7670741f18607412900000001020000090000004c000000000000000000000000000000ffffffffffffffff60000000430068006f0063006f00
6c006100740065000000180000001400000014000000120000001400000009000000120000000b00000012000000120000000c00000001000000250000000c00
00000d000080120000000c0000000200000027000000180000000200000000000000ffffff0000000000250000000c00000002000000250000000c0000000800
008056000000300000002b0000001d0000000c01000059000000050000002b0059000c0159000c011d002b001d002b005900250000000c000000080000802500
00000c00000005000080280000000c00000002000000190000000c000000ffffff00260000001c00000002000000000000000300000000000000000000002500
00000c00000002000000120000000c000000010000005700000030000000280000001a0000000f0100005c000000050000002b0059000c0159000c011d002b00
1d002b005900250000000c00000008000080280000000c00000002000000250000000c0000000500008078000000100000000000000000000000160000000c00
000018000000520000007001000002000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb0d00000000fceb12008806c200b0ec
12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200106dfb0d0492b707106dfb0d0000000003000000000000000000000000000000000000000000
00000000000000000000486fd10718000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c2000300
00000092b707ffffffff0010007801ec120035e4b70730ec1200486fd107f8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000106d
fb0d0492b707106dfb0d000000000492b707106dfb0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000200
0000180000000c00000000000000120000000c0000000100000054000000880000004000000026000000f70000004b00000001000000e7670741f18607414000
0000450000000a0000004c000000000000000000000000000000ffffffffffffffff6000000043006f006600660065006500530068006f007000180000001400
00000b0000000b000000120000001200000016000000140000001400000014000000120000000c00000001000000250000000c0000000d000080120000000c00
00000200000027000000180000000300000000000000ffffff0000000000250000000c00000003000000250000000c0000000800008056000000300000000101
0000d8010000e2010000140200000500000001011402e2011402e201d8010101d80101011402250000000c00000008000080250000000c000000050000802800
00000c00000003000000190000000c000000ffffff00260000001c0000000300000000000000030000000000000000000000250000000c000000030000001200
00000c000000010000005700000030000000fe000000d5010000e5010000170200000500000001011402e2011402e201d8010101d80101011402250000000c00
000008000080280000000c00000003000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001
000003000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffff
ffffc0ec1200e0a5fc771807c2006023fa0d0492b7076023fa0d000000000300000000000000000000000000000000000000000000000000000000000000106d
fb0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010
007801ec120035e4b70730ec1200106dfb0df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000006023fa0d0492b7076023fa0d0000
00000492b7076023fa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c0000000000
0000120000000c00000001000000540000006c00000045010000e10100009d0100000602000001000000e7670741f18607414501000000020000050000004c00
0000000000000000000000000000ffffffffffffffff58000000440065006300610066000000170000001200000012000000120000000b000000120000000c00
000001000000250000000c0000000d000080120000000c0000000200000027000000180000000400000000000000ffffff0000000000250000000c0000000400
0000250000000c000000080000805600000030000000a8020000f3000000890300002f01000005000000a8022f0189032f018903f300a802f300a8022f012500
00000c00000008000080250000000c00000005000080280000000c00000004000000190000000c000000ffffff00260000001c00000004000000000000000300
00000000000000000000250000000c00000004000000120000000c000000010000005700000030000000a5020000f00000008c0300003201000005000000a802
2f0189032f018903f300a802f300a8022f01250000000c00000008000080280000000c00000004000000250000000c0000000500008078000000100000000000
000000000000160000000c00000018000000520000007001000004000000dfffffff000000000000000000000000bc0200000100000000000020410072006900
61006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d1070000
0000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200486fd1070492b707486fd1070000000003000000000000000000
000000000000000000000000000000000000000000006023fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff000012008910
00780000c2000000c200030000000092b707ffffffff0010007801ec12006d7db80730ec12006023fa0df8ec12004590fb77801ff877ffffffff000012003d11
00780000c20000000000486fd1070492b707486fd107000000000492b707486fd10728ed120000000000191223600c000000c4ed12006af50078647600080000
0000250000000c00000004000000180000000c00000000000000120000000c000000010000005400000084000000cb020000fc00000068030000210100000100
0000e7670741f1860741cb0200001b010000090000004c000000000000000000000000000000ffffffffffffffff600000004400650063006f00720061007400
6f0072000000180000001200000012000000140000000d000000120000000b000000140000000d000000120000000c00000001000000250000000c0000000d00
0080120000000c0000000200000027000000180000000500000000000000ffffff0000000000250000000c00000005000000250000000c000000080000805600
000030000000fa010000d8010000db0200001402000005000000fa011402db021402db02d801fa01d801fa011402250000000c00000008000080250000000c00
000005000080280000000c00000005000000190000000c000000ffffff00260000001c0000000500000000000000030000000000000000000000250000000c00
000005000000120000000c000000010000005700000030000000f7010000d5010000de0200001702000005000000fa011402db021402db02d801fa01d801fa01
1402250000000c00000008000080280000000c00000005000000250000000c0000000500008078000000100000000000000000000000160000000c0000001800
0000520000007001000005000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590
fb77f022f877ffffffffc0ec1200e0a5fc771807c20018d1fb0d0492b70718d1fb0d000000000300000000000000000000000000000000000000000000000000
000000000000486fd10718000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092
b707ffffffff0010007801ec120035e4b70730ec1200486fd107f8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000018d1fb0d0492
b70718d1fb0d000000000492b70718d1fb0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c000000050000001800
00000c00000000000000120000000c00000001000000540000007c00000021020000e1010000b30200000602000001000000e7670741f1860741210200000002
0000080000004c000000000000000000000000000000ffffffffffffffff5c00000045007300700072006500730073006f001600000012000000140000000d00
000012000000120000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000600
000000000000ffffff0000000000250000000c00000006000000250000000c000000080000805600000030000000f4020000d8010000d5030000140200000500
0000f4021402d5031402d503d801f402d801f4021402250000000c00000008000080250000000c00000005000080280000000c00000006000000190000000c00
0000ffffff00260000001c0000000600000000000000030000000000000000000000250000000c00000006000000120000000c00000001000000570000003000
0000f1020000d5010000d80300001702000005000000f4021402d5031402d503d801f402d801f4021402250000000c00000008000080280000000c0000000600
0000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000006000000dfffffff000000000000
000000000000bc020000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200106d
fb0d0492b707106dfb0d00000000030000000000000000000000000000000000000000000000000000000000000018d1fb0d18000000000000000492b7070492
b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec120018d1
fb0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000106dfb0d0492b707106dfb0d000000000492b707106dfb0d28ed12000000
0000191223600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c00000000000000120000000c000000010000005400
00008800000005030000e1010000c20300000602000001000000e7670741f186074105030000000200000a0000004c000000000000000000000000000000ffff
ffffffffffff6000000046006f0061006d00650064004d0069006c006b001400000014000000120000001d00000012000000140000001d000000090000000900
000012000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000700000000000000ffffff000000
0000250000000c00000007000000250000000c00000008000080560000003000000054010000ed00000035020000290100000500000054012901350229013502
ed005401ed0054012901250000000c00000008000080250000000c00000005000080280000000c00000007000000190000000c000000ffffff00260000001c00
00000700000000000000030000000000000000000000250000000c00000007000000120000000c00000001000000570000003000000051010000ea0000003802
00002c0100000500000054012901350229013502ed005401ed0054012901250000000c00000008000080280000000c00000007000000250000000c0000000500
008078000000100000000000000000000000160000000c00000018000000520000007001000007000000dfffffff000000000000000000000000bc0200000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000d10700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2006896d1070492b7076896d1070000
00000300000000000000000000000000000000000000000000000000000000000000106dfb0d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec1200106dfb0df8ec12004590fb77801f
f877ffffffff000012003d1100780000c200000000006896d1070492b7076896d107000000000492b7076896d10728ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000007000000180000000c00000000000000120000000c000000010000005400000060000000a2010000f600
0000e60100001b01000001000000e7670741f1860741a201000015010000030000004c000000000000000000000000000000ffffffffffffffff540000004d00
7500670000001d0000001400000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800
000000000000ffffff0000000000250000000c00000008000000250000000c000000080000805600000030000000ed030000d9010000ce040000150200000500
0000ed031502ce041502ce04d901ed03d901ed031502250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c00
0000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000570000003000
0000ea030000d6010000d10400001802000005000000ed031502ce041502ce04d901ed03d901ed031502250000000c00000008000080280000000c0000000800
0000250000000c00000005000080280000000c0000000100000078000000100000000000000000000000160000000c0000001800000052000000700100000100
0000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000d10700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec
1200e0a5fc771807c200486fd1070492b707486fd1070000000003000000000000000000000000000000000000000000000000000000000000006896d1071800
0000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec
120035e4b70730ec12006896d107f8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000486fd1070492b707486fd107000000000492
b707486fd10728ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c000000000000001200
00000c000000010000005400000090000000f9030000e2010000c10400000702000001000000e7670741f1860741f9030000010200000b0000004c0000000000
00000000000000000000ffffffffffffffff6400000053007400650061006d00650064004d0069006c006b000000160000000b00000012000000120000001d00
000012000000140000001d000000090000000900000012000000120000000c00000001000000250000000c0000000d000080120000000c000000020000002700
0000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c000000080000805600000030000000e6040000d8010000c705
00001402000005000000e6041402c7051402c705d801e604d801e6041402250000000c00000008000080250000000c00000005000080280000000c0000000800
0000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100
00005700000030000000e3040000d5010000ca0500001702000005000000e6041402c7051402c705d801e604d801e6041402250000000c000000080000802800
00000c00000008000000250000000c00000005000080280000000c0000000200000078000000100000000000000000000000160000000c000000180000005200
00007001000002000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022
f877ffffffffc0ec1200e0a5fc771807c200106dfb0d0492b707106dfb0d00000000030000000000000000000000000000000000000000000000000000000000
0000486fd10718000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b7071610
000026060f002220574d464301000000000001000000000000000300000000200000500e0000504e0000ffffffff0010007801ec120035e4b70730ec1200486f
d107f8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000106dfb0d0492b707106dfb0d000000000492b707106dfb0d28ed12000000
0000191223600c000000c4ed12006af500786476000800000000250000000c00000002000000180000000c00000000000000120000000c000000010000005400
00007800000012050000e10100009b0500000602000001000000e7670741f18607411205000000020000070000004c000000000000000000000000000000ffff
ffffffffffff5c000000570068006900700070006500640000001f000000140000000900000014000000140000001200000014000000120000000c0000000100
0000250000000c0000000d00008078000000100000000000000000000000160000000c00000018000000520000007001000008000000dfffffff000000000000
00000000000090010000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20018d1
fb0d0492b70718d1fb0d000000000300000000000000000000000000000000000000000000000000000000000000106dfb0d18000000000000000492b7070492
b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec1200106d
fb0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000018d1fb0d0492b70718d1fb0d000000000492b70718d1fb0d28ed12000000
0000191223600c000000c4ed12006af500786476000800000000250000000c00000008000000180000000c00000000000000250000000c0000000d0000802800
00000c00000003000000260000001c0000000300000000000000020000000000000000000000250000000c00000003000000120000000c000000010000005700
00002c00000076000000520100001b030000db010000040000001903540119039201780092017800d901250000000c00000008000080280000000c0000000300
0000250000000c00000005000080260000001c0000000300000000000000030000000000000000000000250000000c00000003000000120000000c0000000100
0000120000000c0000000200000027000000180000000900000000000000ffffff0000000000250000000c00000009000000560000002c000000fe0200002c01
0000330300005701000004000000010354013003540119032f0101035401250000000c00000008000080280000000c00000003000000250000000c0000000500
0080280000000c00000009000000190000000c000000ffffff0078000000100000000000000000000000160000000c0000001800000052000000700100000900
0000dfffffff00000000000000000000000090010000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec
1200e0a5fc771807c200381efa0d0492b707381efa0d00000000030000000000000000000000000000000000000000000000000000000000000018d1fb0d1800
0000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec
12000dcab70730ec120018d1fb0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000381efa0d0492b707381efa0d000000000492
b707381efa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000009000000180000000c000000000000002500
00000c0000000d000080280000000c0000000400000078000000100000000000000000000000160000000c00000018000000520000007001000004000000dfff
ffff00000000000000000000000090010000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5
fc771807c200106dfb0d0492b707106dfb0d000000000300000000000000000000000000000000000000000000000000000000000000381efa0d180000000000
00000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dca
b70730ec1200381efa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000106dfb0d0492b707106dfb0d000000000492b707106d
fb0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000004000000180000000c00000000000000250000000c00
00000d000080260000001c0000000300000000000000020000000000000000000000250000000c00000003000000120000000c00000001000000570000002c00
000070010000520100001b030000da010000040000001903540119039201720192017201d801250000000c00000008000080280000000c000000030000002500
00000c00000005000080260000001c0000000300000000000000030000000000000000000000250000000c00000003000000120000000c000000010000001200
00000c0000000200000027000000180000000a00000000000000ffffff0000000000250000000c0000000a000000560000002c000000fe0200002c0100003303
00005701000004000000010354013003540119032f0101035401250000000c00000008000080280000000c00000003000000250000000c000000050000802800
00000c0000000a000000190000000c000000ffffff0078000000100000000000000000000000160000000c0000001800000052000000700100000a000000dfff
ffff00000000000000000000000090010000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5
fc771807c20018d1fb0d0492b70718d1fb0d000000000300000000000000000000000000000000000000000000000000000000000000106dfb0d180000000000
00000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dca
b70730ec1200106dfb0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000018d1fb0d0492b70718d1fb0d000000000492b70718d1
fb0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000a000000180000000c00000000000000250000000c00
00000d000080280000000c00000005000000260000001c0000000500000000000000030000000000000000000000250000000c00000005000000120000000c00
000001000000120000000c0000000200000027000000180000000300000000000000ffffff0000000000250000000c000000030000005600000030000000e301
00000d000000fa0200006b00000005000000e6016800f7026800f7021000e6011000e6016800250000000c00000008000080280000000c000000050000002500
00000c00000005000080280000000c00000003000000190000000c000000ffffff00280000000c00000006000000780000001000000000000000000000001600
00000c00000018000000520000007001000006000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c0000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb0d0000000034e412008806
c200e8e412004590fb77f022f877fffffffff8e41200e0a5fc771807c200106dfb0d0492b707106dfb0d00000000030000000000000068f6f80d01000000e0a3
fc77f7a3fc770000000000000000381efa0d1800000094e712000492b7070492b707e8e412004590fb77701ff877ffffffff00001200891000780000c2000000
c200030000000092b707ffffffff0010007801e512000dcab70768e41200381efa0d30e512004590fb77801ff877ffffffff000012003d1100780000c2000000
0000106dfb0d0492b707106dfb0d000000000492b707106dfb0d60e5120000000000191223600c000000fce512006af500786476000800000000250000000c00
000006000000180000000c00000000000000120000000c0000000100000054000000900000001f02000013000000bd0200003800000001000000e7670741f186
07411f020000320000000b0000004c000000000000000000000000000000ffffffffffffffff64000000ab0069006e007400650072006600610063006500bb00
000012000000070000001200000009000000110000000b0000000a00000011000000110000001100000012000000120000000c00000002000000520000007001
000003000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000d10700000000fceb12008806c200b0ec12004590fb77f022f877ffff
ffffc0ec1200e0a5fc771807c2006896d1070492b7076896d107000000000300000000000000381efa0d1800000094e712000492b7070492b707e8e41200381e
fa0d18000000ffffffff0492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010
007801ec120035e4b70730ec120018d1fb0df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000006896d1070492b7076896d1070000
00000492b70718d1fb0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000120000000c0000000100
000054000000a0000000ea0100003b000000f20200006000000001000000e7670741f1860741ea0100005a0000000e0000004c00000000000000000000000000
0000ffffffffffffffff680000004400720069006e006b0043006f006d0070006f006e0065006e007400170000000d0000000900000014000000120000001800
0000140000001d00000014000000140000001400000012000000140000000b000000120000000c00000002000000250000000c0000000d000080780000001000
00000000000000000000160000000c00000018000000520000007001000005000000dfffffff0000000000000000000000009001000000000000000000204100
7200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200106dfb0d0492b707106dfb0d00000000030000000000
00000000000000000000000000000000000000000000000000006896d10718000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff0000
1200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12006896d107f8ec12004590fb77801ff877ffffffff0000
12003d1100780000c20000000000106dfb0d0492b707106dfb0d000000000492b707106dfb0d28ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c00000005000000180000000c00000000000000250000000c0000000d000080280000000c00000007000000260000001c0000000700
000000000000030000000000000000000000250000000c00000007000000120000000c000000010000001b000000100000006f0200008d000000360000001000
00006f020000a0000000360000001000000074020000a00000001b0000001000000083020000a000000036000000100000009b020000a00000001b0000001000
0000aa020000a00000003600000010000000c2020000a00000001b00000010000000d1020000a00000003600000010000000e9020000a00000001b0000001000
0000f8020000a0000000360000001000000010030000a00000001b0000001000000019030000a6000000360000001000000019030000be0000001b0000001000
000019030000cd000000360000001000000019030000e5000000250000000c00000008000080280000000c00000007000000250000000c000000050000802600
00001c0000000700000000000000030000000000000000000000250000000c00000007000000120000000c00000001000000120000000c000000020000002700
0000180000000b00000000000000ffffff0000000000250000000c0000000b000000560000002c00000054020000650000008902000090000000040000005702
8d0086028d006f02680057028d00250000000c00000008000080280000000c00000007000000250000000c00000005000080280000000c0000000b0000001900
00000c000000ffffff0078000000100000000000000000000000160000000c0000001800000052000000700100000b000000dfffffff00000000000000000000
000090010000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20018d1fb0d0492
b70718d1fb0d000000000300000000000000000000000000000000000000000000000000000000000000106dfb0d18000000000000000492b7070492b707b0ec
12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec1200106dfb0df8ec
12004590fb77801ff877ffffffff000012003d1100780000c2000000000018d1fb0d0492b70718d1fb0d000000000492b70718d1fb0d28ed1200000000001912
23600c000000c4ed12006af500786476000800000000250000000c0000000b000000180000000c00000000000000250000000c0000000d000080280000000c00
00000100000078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff0000000000000000000000009001
0000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000d10700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2006896d1070492b7076896
d10700000000030000000000000000000000000000000000000000000000000000000000000018d1fb0d18000000000000000492b7070492b707b0ec12004590
fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120018d1fb0df8ec12004590
fb77801ff877ffffffff000012003d1100780000c200000000006896d1070492b7076896d107000000000492b7076896d10728ed120000000000191223600c00
0000c4ed12006af500786476000800000000250000000c00000001000000180000000c00000000000000250000000c0000000d000080260000001c0000000700
000000000000020000000000000000000000250000000c00000007000000120000000c00000001000000570000002c00000069020000520100001b030000da01
00000400000019035401190392016b0292016b02d801250000000c00000008000080280000000c00000007000000250000000c00000005000080260000001c00
00000700000000000000030000000000000000000000250000000c00000007000000120000000c00000001000000120000000c00000002000000270000001800
00000c00000000000000ffffff0000000000250000000c0000000c000000560000002c000000fe0200002c010000330300005701000004000000010354013003
540119032f0101035401250000000c00000008000080280000000c00000007000000250000000c00000005000080280000000c0000000c000000190000000c00
0000ffffff0078000000100000000000000000000000160000000c0000001800000052000000700100000c000000dfffffff0000000000000000000000009001
0000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200106dfb0d0492b707106d
fb0d0000000003000000000000000000000000000000000000000000000000000000000000006896d10718000000000000000492b7070492b707b0ec12004590
fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12006896d107f8ec12004590
fb77801ff877ffffffff000012003d1100780000c20000000000106dfb0d0492b707106dfb0d000000000492b707106dfb0d28ed120000000000191223600c00
0000c4ed12006af500786476000800000000250000000c0000000c000000180000000c00000000000000250000000c0000000d000080280000000c0000000200
000078000000100000000000000000000000160000000c00000018000000520000007001000002000000dfffffff000000000000000000000000900100000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20018d1fb0d0492b70718d1fb0d0000
00000300000000000000000000000000000000000000000000000000000000000000106dfb0d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec1200106dfb0df8ec12004590fb77801f
f877ffffffff000012003d1100780000c2000000000018d1fb0d0492b70718d1fb0d000000000492b70718d1fb0d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000002000000180000000c00000000000000250000000c0000000d000080280000000c000000080000002600
00001c0000000800000000000000020000000000000000000000250000000c00000008000000120000000c00000001000000570000002c000000170300005201
000066030000da010000040000001903540119039201640392016403d801250000000c00000008000080280000000c00000008000000250000000c0000000500
0080260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000120000000c0000000200
000027000000180000000700000000000000ffffff0000000000250000000c00000007000000560000002c000000fe0200002c01000033030000570100000400
0000010354013003540119032f0101035401250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000700
0000190000000c000000ffffff0078000000100000000000000000000000160000000c00000018000000520000007001000007000000dfffffff000000000000
00000000000090010000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000d10700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2006896
d1070492b7076896d10700000000030000000000000000000000000000000000000000000000000000000000000018d1fb0d18000000000000000492b7070492
b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120018d1
fb0df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000006896d1070492b7076896d107000000000492b7076896d10728ed12000000
0000191223600c000000c4ed12006af500786476000800000000250000000c00000007000000180000000c00000000000000250000000c0000000d0000802800
00000c0000000900000078000000100000000000000000000000160000000c00000018000000520000007001000009000000dfffffff00000000000000000000
000090010000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200106dfb0d0492
b707106dfb0d0000000003000000000000000000000000000000000000000000000000000000000000003e07000026060f00720e574d46430100000000000100
00000000000003000000500e000000000000504e00006896d10718000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff000012008910
00780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12006896d107f8ec12004590fb77801ff877ffffffff000012003d11
00780000c20000000000106dfb0d0492b707106dfb0d000000000492b707106dfb0d28ed120000000000191223600c000000c4ed12006af50078647600080000
0000250000000c00000009000000180000000c00000000000000250000000c0000000d000080280000000c00000004000000260000001c000000040000000000
0000030000000000000000000000250000000c00000004000000120000000c000000010000001b000000100000006f0200008d00000036000000100000006f02
0000a000000036000000100000006a020000a00000001b000000100000005b020000a0000000360000001000000043020000a00000001b000000100000003402
0000a000000036000000100000001c020000a00000001b000000100000000d020000a00000003600000010000000f5010000a00000001b00000010000000e601
0000a00000003600000010000000ce010000a00000001b00000010000000c4010000a50000003600000010000000c4010000bd0000001b00000010000000c401
0000cc0000003600000010000000c4010000e4000000250000000c00000008000080280000000c00000004000000250000000c00000005000080260000001c00
00000400000000000000030000000000000000000000250000000c00000004000000120000000c00000001000000120000000c00000002000000270000001800
00000800000000000000ffffff0000000000250000000c00000008000000560000002c000000540200006500000089020000900000000400000057028d008602
8d006f02680057028d00250000000c00000008000080280000000c00000004000000250000000c00000005000080280000000c00000008000000190000000c00
0000ffffff0078000000100000000000000000000000160000000c00000018000000520000007001000008000000dfffffff0000000000000000000000009001
0000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20018d1fb0d0492b70718d1
fb0d000000000300000000000000000000000000000000000000000000000000000000000000106dfb0d18000000000000000492b7070492b707b0ec12004590
fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec1200106dfb0df8ec12004590
fb77801ff877ffffffff000012003d1100780000c2000000000018d1fb0d0492b70718d1fb0d000000000492b70718d1fb0d28ed120000000000191223600c00
0000c4ed12006af500786476000800000000250000000c00000008000000180000000c00000000000000250000000c0000000d000080280000000c0000000a00
000078000000100000000000000000000000160000000c0000001800000052000000700100000a000000dfffffff000000000000000000000000900100000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000d10700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2006896d1070492b7076896d1070000
0000030000000000000000000000000000000000000000000000000000000000000018d1fb0d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120018d1fb0df8ec12004590fb77801f
f877ffffffff000012003d1100780000c200000000006896d1070492b7076896d107000000000492b7076896d10728ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c0000000a000000180000000c00000000000000250000000c0000000d000080260000001c000000040000000000
0000020000000000000000000000250000000c00000004000000120000000c00000001000000570000002c00000017030000520100005f040000db0100000400
000019035401190392015d0492015d04d901250000000c00000008000080280000000c00000004000000250000000c00000005000080260000001c0000000400
000000000000030000000000000000000000250000000c00000004000000120000000c00000001000000120000000c0000000200000027000000180000000d00
000000000000ffffff0000000000250000000c0000000d000000560000002c000000fe0200002c01000033030000570100000400000001035401300354011903
2f0101035401250000000c00000008000080280000000c00000004000000250000000c00000005000080280000000c0000000d000000190000000c000000ffff
ff0078000000100000000000000000000000160000000c0000001800000052000000700100000d000000dfffffff000000000000000000000000900100000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c200106dfb0d0492b707106dfb0d0000
000003000000000000000000000000000000000000000000000000000000000000006896d10718000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12006896d107f8ec12004590fb77801f
f877ffffffff000012003d1100780000c20000000000106dfb0d0492b707106dfb0d000000000492b707106dfb0d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c0000000d000000180000000c00000000000000250000000c0000000d000080280000000c000000030000002800
00000c0000000600000078000000100000000000000000000000160000000c00000018000000520000007001000006000000dfffffff00000000000000000000
000090010000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000fb0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20018d1fb0d0492
b70718d1fb0d000000000300000000000000000000000000000000000000000000000000000000000000106dfb0d18000000000000000492b7070492b707b0ec
12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec1200106dfb0df8ec
12004590fb77801ff877ffffffff000012003d1100780000c2000000000018d1fb0d0492b70718d1fb0d000000000492b70718d1fb0d28ed1200000000001912
23600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c00000000000000250000000c0000000d000080280000000c00
000005000000260000001c0000000500000000000000020000000000000000000000250000000c00000005000000120000000c00000001000000570000002c00
0000170300005201000059050000da010000040000001903540119039201570592015705d801250000000c00000008000080280000000c000000050000002500
00000c00000005000080260000001c0000000500000000000000030000000000000000000000250000000c00000005000000120000000c000000010000001200
00000c0000000200000027000000180000000300000000000000ffffff0000000000250000000c00000003000000560000002c000000fe0200002c0100003303
00005701000004000000010354013003540119032f0101035401250000000c00000008000080280000000c00000005000000250000000c000000050000802800
00000c00000003000000190000000c000000ffffff0078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfff
ffff00000000000000000000000090010000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000d10700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5
fc771807c2006896d1070492b7076896d10700000000030000000000000000000000000000000000000000000000000000000000000018d1fb0d180000000000
00000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dca
b70730ec120018d1fb0df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000006896d1070492b7076896d107000000000492b7076896
d10728ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c00000000000000250000000c00
00000d000080280000000c0000000b0000000e000000140000000000000010000000140000000400000003010800050000000b0200000000050000000c024802
620608000000fa02050000000000ffffff00040000002d01000007000000fc020100000000000000040000002d0101001c000000fb029cff0000000000009001
0000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d0102001c000000fb021000070000000000bc02
000000000102022253797374656d0000000000000000000000000000000000000000000000000000040000002d01030004000000f00102000400000002010200
07000000fc020000ffffff000000040000002d010200040000002d0100000e0000002403050008001502e9001502e900d9010800d90108001502040000002d01
0000040000002d01010004000000f0010200050000000102ffffff0008000000fa0200000300000000000000040000002d01020004000000020101000e000000
2503050008001502e9001502e900d9010800d90108001502040000002d01000004000000f0010200040000002d010100040000002e0118001c000000fb02dfff
000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d0102000500000009020000
0000040000000201010015000000320a010229000900000043686f636f6c6174656f18001400140012001400090012000b00120004000000020101001c000000
fb021000070000000000bc02000000000102022253797374656d0000000000000000000000000000000000000000000000000000040000002d01040004000000
0201020007000000fc020000ffffff000000040000002d010500040000002d0100000e000000240305002b0059000c0159000c011d002b001d002b0059000400
00002d010000040000002d01010004000000f0010500050000000102ffffff0008000000fa0200000300000000000000040000002d0105000400000002010100
0e000000250305002b0059000c0159000c011d002b001d002b005900040000002d01000004000000f0010500040000002d010100040000002e0118001c000000
fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01050005000000
090200000000040000000201010016000000320a450040000a000000436f6666656553686f70180014000b000b00120012001600140014001400040000000201
0100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010600040000002d0100000e0000002403050001011402e2011402
e201d8010101d80101011402040000002d010000040000002d01010004000000f0010600050000000102ffffff0008000000fa02000003000000000000000400
00002d01060004000000020101000e0000002503050001011402e2011402e201d8010101d80101011402040000002d01000004000000f0010600040000002d01
0100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000000000000000000000000000000000000000
0000040000002d0106000500000009020000000004000000020101000f000000320a000245010500000044656361666517001200120012000b00040000000201
0100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010700040000002d0100000e00000024030500a8022f0189032f01
8903f300a802f300a8022f01040000002d010000040000002d01010004000000f0010700050000000102ffffff0008000000fa02000003000000000000000400
00002d01070004000000020101000e00000025030500a8022f0189032f018903f300a802f300a8022f01040000002d01000004000000f0010700040000002d01
0100040000002e0118001c000000fb02dfff000000000000bc020100000000000020417269616c00000000000000000000000000000000000000000000000000
0000040000002d01070005000000090200000000040000000201010015000000320a1b01cb02090000004465636f7261746f727018001200120014000d001200
0b0014000d000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010800040000002d0100000e000000
24030500fa011402db021402db02d801fa01d801fa011402040000002d010000040000002d01010004000000f0010800050000000102ffffff0008000000fa02
00000300000000000000040000002d01080004000000020101000e00000025030500fa011402db021402db02d801fa01d801fa011402040000002d0100000400
0000f0010800040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000000000000000
0000000000000000000000000000040000002d01080005000000090200000000040000000201010013000000320a0002210208000000457370726573736f1600
120014000d0012001200120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d01090004000000
2d0100000e00000024030500f4021402d5031402d503d801f402d801f4021402040000002d010000040000002d01010004000000f0010900050000000102ffff
ff0008000000fa0200000300000000000000040000002d01090004000000020101000e00000025030500f4021402d5031402d503d801f402d801f40214020400
00002d01000004000000f0010900040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000
00000000000000000000000000000000000000000000040000002d01090005000000090200000000040000000201010016000000320a000205030a000000466f
616d65644d696c6b1400140012001d00120014001d000900090012000400000002010100040000002d010400040000000201020007000000fc020000ffffff00
0000040000002d010a00040000002d0100000e0000002403050054012901350229013502ed005401ed0054012901040000002d010000040000002d0101000400
0000f0010a00050000000102ffffff0008000000fa0200000300000000000000040000002d010a0004000000020101000e000000250305005401290135022901
3502ed005401ed0054012901040000002d01000004000000f0010a00040000002d010100040000002e0118001c000000fb02dfff000000000000bc0200000000
00000020417269616c000000000000000000000000000000000000000000000000000000040000002d010a000500000009020000000004000000020101000c00
0000320a1501a201030000004d7567001d00140014000400000002010100040000002d010400040000000201020007000000fc020000ffffff00000004000000
2d010b00040000002d0100000e00000024030500ed031502ce041502ce04d901ed03d901ed031502040000002d010000040000002d01010004000000f0010b00
050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e00000025030500ed031502ce041502ce04d901ed03
d901ed031502040000002d01000004000000f0010b00040000002d01010004000000f0010200040000002e0118001c000000fb02dfff000000000000bc020000
000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010200050000000902000000000400000002010100
18000000320a0102f9030b000000537465616d65644d696c6b6516000b00120012001d00120014001d000900090012000400000002010100040000002d010400
040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e00000024030500e6041402c7051402c705d801e604d801e604
1402040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000
020101000e00000025030500e6041402c7051402c705d801e604d801e6041402040000002d01000004000000f0010b00040000002d01010004000000f0010500
040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000
040000002d01050005000000090200000000040000000201010012000000320a0002120507000000576869707065646f1f001400090014001400120014000400
000002010100040000002d010400040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c00000000000000000000000000
0000000000000000000000000000040000002d010b0005000000090200000000040000002d01040004000000f001060008000000fa0200000200000000000000
040000002d01060004000000020101000c000000250304001903540119039201780092017800d901040000002d01000004000000f0010600040000002d010100
08000000fa0200000300000000000000040000002d0106000400000002010100040000000201020007000000fc020000ffffff000000040000002d010c000c00
000024030400010354013003540119032f0101035401040000002d01000004000000f0010600040000002d01010004000000f0010c00050000000102ffffff00
040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000
040000002d01060005000000090200000000040000002d01040004000000f0010700040000002e0118001c000000fb02dfff0000000000009001000000000000
0020417269616c000000000000000000000000000000000000000000000000000000040000002d01070005000000090200000000040000002d01040008000000
fa0200000200000000000000040000002d010c0004000000020101000c000000250304001903540119039201720192017201d801040000002d01000004000000
f0010c00040000002d01010008000000fa0200000300000000000000040000002d010c000400000002010100040000000201020007000000fc020000ffffff00
0000040000002d010d000c00000024030400010354013003540119032f0101035401040000002d01000004000000f0010c00040000002d01010004000000f001
0d00050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000
000000000000000000000000040000002d010c0005000000090200000000040000002d01040004000000f001080008000000fa02000003000000000000000400
00002d0108000400000002010100040000000201020007000000fc020000ffffff000000040000002d010d000e00000024030500e6016800f7026800f7021000
e6011000e6016800040000002d01000004000000f0010800040000002d01010004000000f0010d00050000000102ffffff0004000000f0010900040000002e01
18001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01
080005000000090200000000040000000201010018000000320a32001f020b000000ab696e74657266616365bb65120007001200090011000b000a0011001100
1100120004000000020102001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000000000000000000000000000000000000000
00000000040000002d01090004000000020101001c000000320a5a00ea010e0000004472696e6b436f6d706f6e656e7417000d00090014001200180014001d00
140014001400120014000b000400000002010200040000002d010400040000002e0118001c000000fb02dfff0000000000009001000000000000002041726961
6c000000000000000000000000000000000000000000000000000000040000002d010d0005000000090200000000040000002d01040004000000f0010a000800
0000fa0200000300000000000000040000002d010a0004000000020101000500000014028d006f02050000001302a0006f02050000001302a000740205000000
1402a0008302050000001302a0009b02050000001402a000aa02050000001302a000c202050000001402a000d102050000001302a000e902050000001402a000
f802050000001302a0001003050000001402a6001903050000001302be001903050000001402cd001903050000001302e5001903040000002d01000004000000
f0010a00040000002d01010008000000fa0200000300000000000000040000002d010a000400000002010100040000000201020007000000fc020000ffffff00
0000040000002d010e000c0000002403040057028d0086028d006f02680057028d00040000002d01000004000000f0010a00040000002d01010004000000f001
0e00050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000
000000000000000000000000040000002d010a0005000000090200000000040000002d01040004000000f0010200040000002e0118001c000000fb02dfff0000
0000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01020005000000090200000000
040000002d01040008000000fa0200000200000000000000040000002d010e0004000000020101000c0000002503040019035401190392016b0292016b02d801
040000002d01000004000000f0010e00040000002d01010008000000fa0200000300000000000000040000002d010e0004000000020101000400000002010200
07000000fc020000ffffff000000040000002d010f000c00000024030400010354013003540119032f0101035401040000002d01000004000000f0010e000400
00002d01010004000000f0010f00050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000
000000000000000000000000000000000000000000000000040000002d010e0005000000090200000000040000002d01040004000000f0010500040000002e01
18001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01
050005000000090200000000040000002d01040004000000f0010b0008000000fa0200000200000000000000040000002d010b0004000000020101000c000000
250304001903540119039201640392016403d801040000002d01000004000000f0010b00040000002d01010008000000fa020000030000000000000004000000
2d010b000400000002010100040000000201020007000000fc020000ffffff000000040000002d010f000c00000024030400010354013003540119032f010103
5401040000002d01000004000000f0010b00040000002d01010004000000f0010f00050000000102ffffff00040000002e0118001c000000fb02dfff00000000
000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010b00050000000902000000000400
00002d01040004000000f0010600040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c00000000000000000000000000
0000000000000000000000000000040000002d01060005000000090200000000040000002d01040004000000f001070008000000fa0200000300000000000000
040000002d01070004000000020101000500000014028d006f02050000001302a0006f02050000001302a0006a02050000001402a0005b02050000001302a000
4302050000001402a0003402050000001302a0001c02050000001402a0000d02050000001302a000f501050000001402a000e601050000001302a000ce010500
00001402a500c401050000001302bd00c401050000001402cc00c401050000001302e400c401040000002d01000004000000f0010700040000002d0101000800
0000fa0200000300000000000000040000002d0107000400000002010100040000000201020007000000fc020000ffffff000000040000002d010f000c000000
2403040057028d0086028d006f02680057028d00040000002d01000004000000f0010700040000002d01010004000000f0010f00050000000102ffffff000400
00002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000000000000000000000000000000000000000000000000400
00002d01070005000000090200000000040000002d01040004000000f0010c00040000002e0118001c000000fb02dfff00000000000090010000000000000020
417269616c000000000000000000000000000000000000000000000000000000040000002d010c0005000000090200000000040000002d01040008000000fa02
00000200000000000000040000002d010f0004000000020101000c0000002503040019035401190392015d0492015d04d901040000002d01000004000000f001
0f00040000002d01010008000000fa0200000300000000000000040000002d010f000400000002010100040000000201020007000000fc020000ffffff000000
040000002d0110000c00000024030400010354013003540119032f0101035401040000002d01000004000000f0010f00040000002d01010004000000f0011000
050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000000000000000000000000000
00000000000000000000040000002d010f0005000000090200000000040000002d01040004000000f001090004000000f0010800040000002e0118001c000000
fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01080005000000
090200000000040000002d01040004000000f0010d0008000000fa0200000200000000000000040000002d01090004000000020101000c000000250304001903
540119039201570592015705d801040000002d01000004000000f0010900040000002d01010008000000fa0200000300000000000000040000002d0109000400
000002010100040000000201020007000000fc020000ffffff000000040000002d010d000c00000024030400010354013003540119032f010103540104000000
2d01000004000000f0010900040000002d01010004000000f0010d00050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000
000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01090005000000090200000000040000002d01040004000000f0010a00030000000000}}{
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_175]#}{Methods
 invoked on the Decorator can in turn invoke methods in the component, and can of course perform processing before or after the invocation. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_217" \\
o "A_217" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200310037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_176]#}{So if we added }{\b getTotalCost()}{ and }{\b getDescription()}{ methods to the }{\b DrinkComponent}{ interface, an Espresso looks like this: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_218" \\o "A_218" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200310038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {class Espresso(Decorator):
\par   cost = 0.75f
\par   description = " espresso"
\par   public Espresso(DrinkComponent):
\par     Decorator.__init__(self, component)
\par 
\par   def getTotalCost(self):
\par     return self.component.getTotalCost() + cost
\par 
\par   def getDescription(self):
\par     return self.component.getDescription() +
\par       description
\par 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_177]#
\par #[BT_178]#}{You combine the components to create a drink as follows, as shown in the code below: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_219" \\o "A_219" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200310039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: cX:decorator:alldecora
tors:CoffeeShop.py
\par # Coffee example using decorators
\par 
\par class DrinkComponent:
\par   def getDescription(self):
\par     return self.__class__.__name__
\par   def getTotalCost(self):
\par     return self.__class__.cost
\par 
\par class Mug(DrinkComponent):
\par   cost = 0.0
\par 
\par class Decorator(DrinkComponent):
\par   def __init__(self, drinkComponent):
\par     self.component = drinkComponent
\par   def getTotalCost(self):
\par     return self.component.getTotalCost() + \\
\par       DrinkComponent.getTotalCost(self)
\par   def getDescription(self):
\par     return self.component.getDescription() + \\
\par       ' ' + DrinkComponent.getDescription(self)
\par 
\par class Espresso(Decorator):
\par   cost = 0.75
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par class Decaf(Decorator):
\par   cost = 0.0
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par class FoamedMilk(Decorator):
\par   cost = 0.25
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par class SteamedMilk(Decorator):
\par   cost = 0.25
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par class Whipped(Decorator):
\par   cost = 0.25
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par class Chocolate(Decorator):
\par   cost = 0.25
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par cappuccino = Espresso(FoamedMilk(Mug()))
\par print cappuccino.getDescription().strip() + \\
\par   ": $" + `cappuccino.getTotalCost()`
\par 
\par cafeMocha = Espresso(SteamedMilk(Chocolate(
\par   Whipped(Decaf(Mug())))))
\par 
\par print cafeMocha.getDescription().strip() + \\
\par   ": $" + `cafeMocha.getTotalCost()`
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_179]#
\par #[BT_180]#}{This approach would certainly provide the most flexibility and the smallest menu. You have a small number of components to choose from, but assembling the description of the coffee then becomes rather arduous. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_220" \\o "A_220" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200320030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_181]#}{If you want to describe a plain cappuccino, you create it with
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {plainCap = Espresso(FoamedMilk(Mug()))

\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_182]#}{Creating a decaf Caf\'e9
 Mocha with whipped cream requires an even longer description. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_221" \\o "A_221" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200320031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420102}
Compromise{\*\bkmkend _Toc534420102}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_183]#}{The previous approach tak
es too long to describe a coffee. There will also be certain combinations that you will describe regularly, and it would be convenient to have a quick way of describing them. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_222" \\o "A_222" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200320032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_184]#}{The 3rd approach is a mixture of the first 2 approaches, and combines flexibility with ease of use. This compromise is achieved by creating a reasonably sized menu of basic selections, which would often work exactly as they 
are, but if you wanted to decorate them (whipped cream, decaf etc.) then you would use decorators to make the modifications. This is the type of menu you are presented with in most coffee shops. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_223" \\o "A_223" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200320033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard \qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_185]#}{\pard\plain \qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\object\objemb\objw6733\objh2997{\*\objclass Visio.Drawing.6}{\*\objdata 010500000200000010000000566973696f2e44726177696e672e36000000000000000000002a0100
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000020000000100000000000000001000000200000001000000feffffff00000000000000006e000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff04000000feffffff93000000feffffff060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f000000100000001100000012000000130000001400000015000000160000001700000018000000190000001a0000001b0000001c0000001d0000001e00
00001f000000200000002100000022000000230000002400000025000000260000002700000028000000290000002a0000002b0000002c0000002d0000002e0000002f000000300000003100000032000000330000003400000035000000360000003700000038000000390000003a0000003b0000003c0000003d000000
3e0000003f000000400000004100000042000000430000004400000045000000460000004700000048000000490000004a0000004b0000004c0000004d0000004e0000004f000000500000005100000052000000530000005400000055000000560000005700000058000000590000005a0000005b0000005c0000005d00
00005e0000005f000000600000006100000062000000630000006400000065000000660000006700000068000000690000006a0000006b0000006c0000006d000000fefffffffdffffff700000007100000072000000730000007400000075000000760000007700000078000000790000007a0000007b0000007c000000
7d0000007e0000007f0000008000000052006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffff02000000131a020000000000c00000000000004600000000000000000000000040fb
6f921792c10103000000800300000000000001004f006c00650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000201ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
0000000000000000000000001400000000000000010043006f006d0070004f0062006a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120002010100000004000000ffffffff0000000000000000000000000000000000000000000000000000
0000000000000000000001000000710000000000000003004f0062006a0049006e0066006f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000201ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
000000000000000000000000030000000400000000000000feffffff02000000fefffffffefffffffeffffff060000000700000008000000090000000a0000000b0000000c0000000d000000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff010000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100feff030a0000ffffffff131a020000000000c0000000000000461800
00004d6963726f736f667420566973696f2044726177696e670011000000564953494f20362e30205368617065730010000000566973696f2e44726177696e672e3600f439b27100000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000feff0000040002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000feff000004000200000000000000000000000000000000000200
000002d5cdd59c2e1b10939708002b2cf9ae4400000005d5cdd59c2e1b10939708002b2cf9ae4c0100000801000007000000010000004000000000000080480000000e000000500000000f0000005c00000002000000680000000c000000740000000d000000ac00000002000000e404000013000000091c00001e000000
01000000000000001e00000001000000000000001e00000001000000000000000c1000000400000056006900730069006f0044006f00630075006d0065006e00740000000000000000000000000000000000000000000000000000000000000000000000000000001c0002000300000006000000ffffffff000000000000
000000000000000000000000000000000000000000000000000000000000050000005dd000000000000056006900730069006f0049006e0066006f0072006d006100740069006f006e00000000000000000000000000000000000000000000000000000000000000000022000200ffffffffffffffffffffffff00000000
0000000000000000000000000000000000000000000000000000000000000000040000001c000000000000000500530075006d006d0061007200790049006e0066006f0072006d006100740069006f006e000000000000000000000000000000000000000000000000000000280002010500000007000000ffffffff0000
000000000000000000000000000000000000000000000000000000000000000000006f0000001046000000000000050044006f00630075006d0065006e007400530075006d006d0061007200790049006e0066006f0072006d006100740069006f006e000000000000000000000038000200ffffffffffffffffffffffff
000000000000000000000000000000000000000000000000000000000000000000000000050000000802000000000000566973696f2028544d292044726177696e670d0a00000000000006005dd0000000840100140000008ce3ce29e7ce000076010000520000000000ed64eaf10318e9f2ffffff8300fff6f2fff3fbf0
0701f8f1008980eaf116048016002000190080ff00c0c0c000e6e6e6ff00cdcdcd00b3b3b3ef009a9a9a2100800066ff6666004d4d4d00337f3333001a1a1a000524ebf018dcff040a0524ebf018dcff040a5518ebf0fff2f0c2ebf038e8f340faf4070f190fe1faf6f1eaf119e3f8fd0cebf0010054640000ff20000041
7269616cea40021ce7f4154e03600002ff0200004d6f6e6f74ff79706520536f72749573400222e7f4104e057501574f696e6764a200860323e7f4f50d4e0300740253796d62076f6c003554ebf03fe8f3d03ff2ff0406daeaf120e8f359401a06000019012d00310f0000551aebf0fff2f026ebf01ce8f3a0faf4070feb
f0f6f1eaf14ae7f4043aebf044ebf00100543101e8f380f2f1450f570ff2f1e0fb2d01eaf168eae7f40eebf050ebf00200548518ebf038dffc8c018c01e6f501ae91020000032a0405ebf006aaebf007ebf008ebf009ebf00aaaebf00bebf00cebf00debf0937ae3f825c00255010101ba017edf010200620100fe091295
010f16020f1185b804eaf189fefc03307b14ae47e17a4b843fb60340e6f5bf01022a13911091023a161215001b195d12035c4916121304620211140573165506731607731608971186bc0402eaf155fc04b20ade18091e741a091225037316040f16a01287c004eaf101d9fc034213ebf03e2f50262b13502467e03f206d
20f2f0ef41da18a85d1350268013018b2c028b2c03488b27172f7f14066826801307712654b81574150973160a7311a0790801e0fc030b0fb90309147415721974158012297415a01fb21b003f123209120baa73160c73160d73160e73160faa731610731611731612731613527311a4c804eaf1cf243ffd6b027c2b12db
0102006100fe344255013a45023a45033a45043a4515053a45063a45073a40923fa43e53106074103442113a45123a4555133a45143a45153a45163a4595173a45183a4084cc04eaf11124174f2b12a3d004eaf146fc032941402359323b0913a041131347560247568503a041a7d404591520543f59bdf4d804eaf1b1f9
49f03f88134388132c3f015c0917952321e02ba502dc5c03dc54922504fc5c054afc5c06fc5c07fc577c47bedc040aeaf151fc0402f045bd5f0c1b981022464d015745a0646641bfe004eaf101d2f94fd26f2a15344f464f584f6a4f407c4fa43fb63fc83fda3fec37c0e404c2eaf1dcbb00c465bb014914c03fcab57dd0
c67ed8d87ebc78735502fe71e5fc76d46f1e8fe26ff46f067f00187f2a7f3c7f4e7f607110156c7f7e74525d1210eb76801311da8c12c7764a801313fa8c14d9768013151a9c3516da8c17da8c1820fd758013a9195a9709121a73161b7311b734e804eaf1f7fc03202049169d9f4649160808af9fcc9fec1720111640f1
90a5238717811d066304ac05871c07066208863645a05d12c2978013550904ac0a04ac0b871769b804c0bb01faf194047c05b309d6170000e594e3f8bcc16f5b1027003006fe7255c54212c759493f5b3f6d3482166af06b148332e923eda6448308aa42850942850a42850b42850c144280d4833088166abc049aafacaf
8ae3f895e3f8c8d6a7502fefb6214d3302c2f3bf8eb68eb6012844887e2f902fa22ffef841fa5002c43f011305648eb716638eb77e341015b41842a0416bc004a0bfb2bfe3f888e3f800f8493f5573112501bb05310f22df28d240c30136dde0fbc71584052d01289107005d11700dc1c9bb09ef0f011f131f251b412d34
1fd299521813b7c31923d01d08da1c13b72b299b382f6befe2f9682f007a2f32cf44cfb02f673f793298b196af08c0cfc0bfe5f653dcbf50ff00cf12c70074101fc97e3725019cb511dfbdff35df1047df28188405c3012491079d75e5c500c301e5f9bb05a7dfb9dfcbdfdddfefdf0001ef13ef25ef37efaa0905d1aec5
acff00091f0f1205152119cb0f60d9a1019be00073d56d55990b2c0b3e0f500f620f29237cf7f52b2355321cc771d21003ac3fd11fe316622f9eef71d2e31614bee41e2c021e2c031e2705d16cd1000ddf73d00f1fcfffe1ff58df050f170fa0290f831f951fa71f710e4783044fbf1be8b4814e6bfb130140de99fb00aa
e8413626b5173508ba1524ba05ca1b8ce215a23f8cf41f062f02182a8c262cef353d25ef354d25ef301092af15ff27ffc8aa33d6afe8a2e314b1bcf5a736637d46fec9eac00542e6c45ff903145126458fd23cc04492f0423dcd44145236da446d52d180e7449052c061c0615462b861b8610f00e9c105d16561602f722f
842f962fa82f00ba2fcc2fde2ff02f023f143f263fce43003e3f980f94f9643d88395c64e31f536f2101ba02c53f2f88f9e40290af324f00444f564f684f7a4f8c4f04d2b245f80c01012d5f3f5f515f3e1f501f621f741f02af5f559e61c65706b7da57b304f7f500c204cf0fe39b02d48e71195f061f447f00567f615f
e8c215518eb174d477d1dea9401551cb4294df6bd2a341b2792ebc5fc8ce5fe0547fb2037cb02e3f5532c283d9004995106a1824e6eb01628504db5617b40fc60fd80f53eb7140446f56635aff6993746fa4ed0272cc150382cc049761a48cd88371da80f0a27989f3f7f27fb2016101fe01bfa048d631da80d84269af67
7c7fb211004fa049a67fb2024fa09b6fad6f40bf6fd16af3542198f0638eb4c0fe670051974bb402b504d27fb1207f327f4c8f005e8f687f7a7f8c7f9e7fb07f7594e18f0101d27650e276094364fa5f533f653f00eeb9793c05d17e3135bf47bf59bf6bbf007dbf8fbfa1bfb3bfc5bfc27fec8fe67f12d8820e7f9f108a
0e9ef30c516bcf007dcf8fcfa1cfb3cfc5cfd7cfe9cffbcf00d7bfe9bffbbd820df7f2086f10b7eb80ffcc02000043616e6fff6e204c42502d3820fb4949dcff010400059cff00300243ef800501fb0009e9f2640001000f6f002c010127002c01eff07f004c6574746572000f204f0f0e025f0834016601ff7a00defd5f
44494e5522ebf030eff09f801ab89112540fe5f60602e3f803a80fd80fea0ffc0f0e1f201f00321f441f561f681f7a1f8c1f9e1fb01f00c21fd41fe61ff81f0a2f1c2f2e2f402f00522f642f762f882f9a2fac2efd36ebf0080011002000ff010077696e73706fff6f6c0043616e6f6eff204c42502d3820497f49004c50
54313adcfe0000180000000000556cebf034ebf02ce7f401f7f5ff2c68ec944f931240fff06d4fe2cd650040d2e3f8021f04eaf10bebf0b4e57fd2292f09000006ebf095412d02ac330035370022014100f9f6553ae9f204ebf005ebf006ebf0550debf00eebf013ebf015ebf05516ebf01bebf01cebf01debf0152eebf0
2febf030dcf0000000000000556cebf034ebf02ce7f40eebf0fd01fff12c68ec944f93ff1240f06d4fe2cd654b0040e3f8021f04eaf10bebf0fffcf5d2297d0900005531ebf0432d02ec3300ae37000506ebf041e9f20201552ae9f204ebf006ebf00febf05510ebf01eebf01febf02eebf0152febf030ebf031dcf00000
00000000556cebf034ebf02ce7f40aebf0fd01fff12c68ec944f93ff1240f06d4fe2cd654b0040e3f8021f04eaf10bebf0afb405d329fdf124ebf043aa2d02e4330024fef006ebf04100e9f20201552ae9f204ebf005ebf006ebf05513ebf016ebf01cebf020ebf0152eebf02febf030dcf0000000000000556cebf034eb
f02ce7f40aebf0fd01fff12c68ec944f93ff1240f06d4fe2cd654b0040e3f8021f04eaf10bebf05fb415d32974fef024ebf055432d02e4330098fef006ebf00141e9f202015fbe01000014ebf09eeff082e2f917dcff180f2a0f3c0fe7f440feebf0cc42cf293709000b0046ebf052440f780f8a0f9c0f00ae0fc00fd20f
e40ff60f081f1a1f2c1ff03e1f501f621f550234e0d229e5b45f004c63027612f0d229df2a0a00004a831700d30b299e91104b63029538ebf004ebf018f3f4f2f100550d000414eaf11e0d0415eaf105201a0416dcf10548ebf03cdcff040f160f280a0548ebf03cdcff040f160f280a0548ebf03cdcff040f160f280a05
48ebf03cdcff040f160f280a5fbe01000014ebf09eeff082e2f917dcff180f2a0f3c0fe7f445feebf01443cf29780b000b000debf052440f780f8a0f9c0f00ae0fc00fd20fe40ff60f081f1a1f2c1ff03e1f501f621f550284e0d22979855f067612f0d229927f1b0f00d3299f5f065546ebf0fff2f002ebf044e8f366fa
f40002f1f20e0fffffeaf1501f0df6f1e4f7370568e7f401ebf02d1c52025418ebf004dffc5501d45501e6f592e3f8f70602554956e8f3e03f970641e8f3c0a80675bf9704f09f05f03f03dcff90df0ff10f650feaf11006029706fe4a1a1201201c02a906291303b2067bfe0a06010662030059132f07620000291304bb
06291385057417657108590f6b0fe7f4835ce3f85a12005505ebf048011275b6e9f220f3f00000a8e9f2ff9eff01ef83ff01cffe04008f83ff250fffff55fe0f00fc0f00f80f00f00f0031e01b041a011601fe0f04003301fc0b000602efffff9bff01fff08fff01008eff82fff08eff020ff08dfff703f0ff56010ffff0
8c47ff04f01c0063001b018b4700000400690563045d03570352024e014a010c4a00660087ff00006d62e9f2f8fff5f1bfbfe8f3fbb43fe0fbb4bf44e17aff14ae47c1bf90c2f5bf285c8fb63f801700e1a77a843f1c04fbf4e4fbf4e91afbf4d80304cc3f9548ebf0fff2f002ebf4ebf04442ebf004ebf0f6f1f0f3110d
03eff44823090903eaf1013408410168e7f45af6f1203e025418ebf008dffca8f6f137073f039be3f8dd060255ed40e8f3c03f9f04d23f40d5f81102bfa705c4b00eb43f5d507d090f0010060106d506bbfe1aebf00302053e0401b50411071606010475f6f0607c5d01ebf0f03f05fe24f5016503fa0605110f0c140575
23006a1815e021100a06010762f1002a5e12086416096411a33e04eaf1256b9903fdf2f08f11fe9414e2f9f7010043060101603943ff6f70797269676874ff20a9203139393820ff566973696f20436fff72706f726174696fff6e2e2020416c6c20feb912732072657365726f7665642e66140060f100a96c3e04fa012c
3e025564011440dffcfa01fa01390d2301050189e3f8e91e990340000906026100fe2a5722015d25025d208a7d18f610b69b080000ba0601000e12001414190020fe0e12014e192011e4016903012205010ae3020301cb2603018b34089f01822f3e02992fab2f001a35e5212301ed29c40e0a3f1e13223f905a11e52105
01eaf132f22f91250f5206027241015e10feb23201b833070100fed5c0ebf048ebf06cebf02700f7870002e9f2ab07950aa504ebf0ff0c00e2f901fdf202fe080034000df01b29f5d518e2f906e7f446ebf0b41ecfd0290f0c0200ebf0d6007d23ebf04427d029ba4b00f5863f020aebf00410d029a3400d1a0156006502
146b00417a6f062b670125d029426f00f93d3f02f2f1dc26d0297f1a6f00ae7200d6005546ebf0fff2f003ebf044e8f366faf40002f1f20e0fffffeaf1d01f0de0fbf6f1eaf16802060000bd20ebf001005418ebf00850dffc55015501e6f501ebf092e3f86de006025540e8f3f03f9b04d7e83f3fe8f3c0ac06bf46ff0a
8542a15028a43fc2bf0604330fe30ff50fdffc013052e9f21006029b06fe1e1201a406d22d1302ad062d1303b606fe0ade0601066204005d130762ef0000fe0906011a610013fec08104eaf19095037f069b0429c0a3059e16d0a81ed8ba1e9e180b7355e011e5de16051f002f80033f3aff0f00006581048401211c5a07
d10d2225e6f583e3f85e1257005505ebf047e9f2c9750849865a0384010d8624682111052f00a72fb92fcb2fdd2fef2f013675eee9f220f3f00000e0e9f2ff9dff8200453ffe00e100050f170f290f37077fffffff91ff898886ff01fcaf88cc01c85002ff5609023ffcff860002ff570f510fe0630f750f870a9c0f8402
cff3fffd61ebf0526570726573ff656e747320612064ff657363726970746ff7722066070061207365ff74206f66206f626afb6563faf07769746820ff73696d696c617220ff7374727563747572ff652c206265686176fd690b016e642072656cff6174696f6e7368690f70732e0000bd62e3f8d8bf9a99fdf1d1f53ff4
f43ffcf4bfa4703d5f0ad7a3d8bfe8f3d60304f7ec3f3e1700703dd2bfff9fcfe7f3f97cf0bfff6e1df5e0d651ebbffdc036013e9fbf488a2b1f7ca4b8c23f5547ebf0fff2f009ebf044e8f302faf400f6f1f0f3110d0b052309e0fbae0903000068e7f406ebf0301eebf001005418ebf06001e2f9a855015501e6f501eb
f002ebf003aaebf004ebf005ebf09be3f810fe9000020055403e9fcfffe7f3f9e03f40dc3a7feac1ada3d63f41e8f35fe83f419a99c801e1bc05ddd8c505d13f5079090300f59c850102bd06744c0000eb600cebf08184012d0000fb40729401f200c06204b70080200e10a226ebf0a07d0debf0620000a319ebf05593ff
020b0519901116081b1fca2d190a3a1a819001f6f040806ebd0040fe71850103748c00140312111e1d591910301293113911c39003471eac1f92126f1190035a8613168501047588006053106eeaf1e03f05fc1305759311ca0828f689010294018401010400940105032f254123880141238c01412302eaf10742266923
880169238c0169234090016923940169235501692307662681086626f6f169236f11692339110788c8223322d827023911dd23ed2602480411dd230136025d11dd23c4890115032f26053926014326383251220038325b223832652238365f3379224c36005f338d22383297223832a1223832ab22003832b5223832bf22
3832c9223832d32219011536ce370356890138272e2690f13351222e225b2202550190010100aa221543b5211543f6f11543e3322e37a024364743512224325b2203114601aa1b46012546012f4601b911027506e106fef6f10207619d44d908a5406f1102092b10fe84808104eaf1bd01a800e2f9bf42590102ff026015
554d4c2042ff61636b67726f756eff64204164642d6f6eff0060092f434d443d7f31303031008079881129a08504eaf15ac84301bf44bf42ac2358b911030b04110f5a010baeb142006201af44015056085250560bb741b1420d5051a4890492eaf121c8490903fc3007725409a700fea38d04eaf17cc843fdc4f2f0c351
fec854ce4bda110200ff60135669735f4431ff31322e63686d2123db3230f85000fec7420160ff37436f7079726967ff6874203139393920fee950696f20436f7270ff6f726174696f6e2ebf2020416c6c200a6273ff20726573657276651f642e00febe9104eaf12f11b21f5102b521e0fb0138ebf065008104b5216761
5d040824e5f6b521546948840fa923550183e3f84a535555010148e9f2be61bf45ca64ab21d567135500ca64b521d5678055ca64f6f1d567b45500ca646f11d5673925ca643911d567780580ca645d11d567ab21c6680411d563c9c0105877649001fd11fd116f11001b0cc7743911001cd4740411e052da11065d110067
8904391160015d04078f20d074a374e6f50a50870054f6f1932542bf420e45841352740580522e5f8482b4522f6c843922590159017802137086848d7290017e14000015a0848ac572b4bc486b318382669b5101210000108b002f262e2703d926eb8214a252ec27031c850a1432fa838f42028167feb08113556f81c08f
1e9d3a52d0eb73fb82b08180551e3b9af03f40cc8344514e528613b081b4551f3b9a833440cb514e9cbb90b081436b5421e8c3519a42cd824a53602b947805c1573b9cbd936761d6839001f0050004118801093335a2ce3235a345a68e4324239c8d75437d9fcf80248902391160445744535d11445359aaf03f2d921c45
05ad998019c4bc9fd7a2b08142f685750cafcf80e3326026093822a047223822512238225b22047076024c8d7653660a0245051c9f709104829001285a07b911e2f996859a6f00ab00aae3f8f4c84341c351ff9fffd73f4198da04cf0f05905c00c351a260fd120003239b51ff0bffdf1025011923d0b310c131a26b0275
90006029c3037594003b60fe6281020472a3811611e4999053121759196f11936205fb0090fc1308600c45787b7465f34172726f775e95642f461d92038447eb820205b7412e9f42066101b04307b741bcb100bf45c8b5cb51d4b2d905e1bff3bf042200d7c310cd09272acf3ccf4ecf60cf72cf005e95114695c41146a5
cfb7cd1355cfcf00e1cff3cf05df17df29df3bdf4ddf5fdf0071df7ccd1b4695c41b46acdfb7cd805500d6dfe8dffadf0cef1eef30ef42ef54ef0066ef78ef7ccd254695c42546b3efb7c9816e5204736f856fa5bf8b0aa123000b00a99908b6bd5bc351effda381fee5500b446961677261af6d732e2e3c6037ff532dff
4c69737420746865fb20646304206173736fff6369617465642077f76974687b0069732043916c89003c60b14202fb91df420324e54ff74d340854b142046e56c0f2a42b01bf45bd380feffd12e253088f566965776903fe55770f63ff6f6e7461696e696eff67207368617065201d762c11206f66980faa0fbc0f02fd47
35d90feb0a1355370f490ed771fee5501253686f772052fb656c216273686970734e7e14016026fb127c017201290f20666f72681f7a1f8c1ffd471136a91fbb1a805559d11feffd627186e550015f5255fb913f27a65203086e567e2fb356b9bd5771a1a82bbf43fe88536017446973706cff61792053656d616e5f7469
63204580c0720c20f51415c2722ba200c06001472e00083e2f502ff84c320854a649320572df4162f080ad9040045f9427a601e5272b01e935992fab2f00bd2fcf2fe12fbe1770750538dc3f6fa3cd22e25318535b1230354f705404226a022dff53232b11202f20af6564697459146431346f1077443d2f6d3ff74d3872
2fbb1a8d75e1a83e4feffd8cb1e5500e2550ff726f7065727469654a69032636131c8a4ac14170365748ad4fbf4fc80d31e24fbb16712404009c7589b40f2110899c71df72080f1a0e500b7137814571627199118886c9b4be6fa398bc4167663961da82f5e5f0f5e5c885ed53feb96fa3a09dbc27ff0000e811c0e1a202
0440668963034966a3581b61df65276e4200f3c13f6f516f636f2afed0876fc8996fab6aaa7587c9b4d1b2ffe7453f376ebfe26ff46c6173ef26ff0a836411247b13327fab6a7495597e00d16d7a7f8c7f9e7f1779bc7fce7fad6808fd255975e5ece1e1670c861e8f19ff022bfdf053856c8563862875a76ec935102765
e5e6a78cad873fb88fca8f2bfd001d00009e678abca0aa6b35455975d0b321c79c8fae8ff36d0ac3cf719fe98f00fb8f0d9f0155597bd790d19fe39f288f0065710baf1daf2fafa76e55b5c06fefeb00e06ff26f047f32fa237f698fae679cc10056af01860bb7148f8daf388f33f9568f0068bfad681361f0a9c896389f
4a9ff59f0007af809f929fa49ff233f0a962a638cf404acfc2bfa1af80cf92cfa4cd2cddf400ef514931e8f0493162ddf8058241f7f56519f05254303f42322e009548ebf0fff2f002ebf4ebf0443aebf004ebf0030005eff4110d1103eff42309e4f701ebf0f6f13d056968e7f40501283e025418ebf04110dffc050105
01390d23019be3f8bd3a4100020055411103d7ef3f419a99b201d13f414ee8f3a03c40e6f5b90490c107ff50182d4454fb2109f4c2014100174202750a0000f760750cf40003e46202770006feec0201750bf401950df9072d420102f702f20204e2fd01070e1209122a13038011df000040fe164201047576f6f06020e8
f3e03f05461353057523005119224201063018e62018801243116801030206563e0401049512039b16056801db0203c206fe0942010761f2c31408cb10f30000020962e2c210853e04c705a400307b14bfae47e17a843fe9f2024ac20602670002e413d71202fe00f2d61305dd11d712066210004bfe9d420810a104e8f3
d8af085dfea90d0100154202740500b5600b0180b90040fe6e220171740b00782864010202700b01ae41010900c09228039e270142a9242406029b16cd279a1706c822089a17d72fe925019b161537e12daa17a41f3fe920a08d04eaf136ee130170e515e3174002d712006201d514150189360b89316c3e042301c82107
0100556401f800e1fa23013309ea410589e3f835ee13050100b852119c246e21f200c0893080ce521040801f4311c51200615501c41301cb108ae2183aee13d0b904431039074712004d1900002d0594120201bb178b4208344b1cc0084d4f0000f05a10654d9548ebf0fff2f002ebf4ebf0443aebf004ebf0030005eff4
110d1103eff42309e4f701ebf0f6f13d056968e7f40501283e025418ebf04110dffc05010501390d23019be3f8bd3a4100020055411103d7ef3f419a99b201d13f414ee8f3a03c40e6f5b90490c107ff50182d4454fb2109f4c2014100174202750a0000f760750cf40003e46202770006feec0201750bf401950df9072d
420102f702f20204e2fd01070e1209122a13038011df000040fe164201047576f6f06020e8f3e03f05461353057523005119224201063018e62018801243116801030207563e0401049512039b16056801db0203c206fe0942010761f2c31408cb10f30000020962e2c210853e04c705a400307b14bfae47e17a843fe9f2
024ac20602670002e413d71202fe00f2d61305dd11d712066210004bfe9d420810a104e8f3d8af085dfea90d0100154202740500b5600b0180b90040fe6e220171740b00782864010202700b01aef6f10900c09228039e270142a9242406029b16cd279a1706c822089a17d72fe925019b161537e12daa17a41f3fe920a0
8d04eaf136ee130170e515e3174002d712006201d514150189360b89316c3e042301c821070100556401f800e1fa23013309ea410589e3f835ee13050100b852119c246e21f200c0893080ce521040801f4311c51200615501c41301cb108ae2183aee13d0b904431039074712004d1900002d0594120201bb178b420834
4b1cc0084d4f0000f05a10654d9548ebf0fff2f002ebf4ebf0443aebf004ebf0030005eff4110d1103eff42309e4f701ebf0f6f13d056968e7f40501283e025418ebf04110dffc05010501390d23019be3f8bd3a4100020055411103d7ef3f419a99b201d13f414ee8f3a03c40e6f5b90490c107ff50182d4454fb2109f4
c2014100174202750a0000f760750cf40003e46202770006feec0201750bf401950df9072d420102f702f20204e2fd01070e1209122a13038011df000040fe164201047576f6f06020e8f3e03f05461353057523005119224201063018e62018801243116801030208563e0401049512039b16056801db0203c206fe0942
010761f2c31408cb10f30000020962e2c210853e04c705a400307b14bfae47e17a843fe9f2024ac20602670002e413d71202fe00f2d61305dd11d712066210004bfe9d420810a104e8f3d8af085dfea90d0100154202740500b5600b0180b90040fe6e220171740b00782864010202700b01ae23010900c09228039e2701
42a9242406029b16cd279a1706c822089a17d72fe925019b161537e12daa17a41f3fe920a08d04eaf136ee130170e515e3174002d712006201d514150189360b89316c3e042301c821070100556401f800e1fa23013309ea410589e3f835ee13050100b852119c246e21f200c0893080ce521040801f4311c51200615501
c41301cb108ae2183aee13d0b904431039074712004d1900002d0594120201bb178b4208344b1cc0084d4f0000f05a10654d9548ebf0fff2f002ebf4ebf0443aebf004ebf0030005eff4110d1103eff42309e4f701ebf0f6f13d056968e7f40501283e025418ebf04110dffc05010501390d23019be3f87d3a4100020055
41fe1102efd73f4199b102d13f41fff35961442bd8ac3ce940e6f5b9049cc107503394bfc29ec06d04c03e0317fe4202750a000060750cfef40003e462020006feaeec0201750bf4010df9072d52420102f702f20204fd01070e12fc09122a13038011000040dbfe1642010475f6f060206ee8f3e03f05461305752300ca
511922420106301820188012dc431168010302093e0401046a9512039b160568010203c2065dfe9b11020761c31408cb105ef30000020962c210853e04fcc702420255307b14ae47afe17a843fe9f202c2060292670002e413d71202fe00d61305fcdd11d71206621000fe9df2420810a104e8f3d83f419aeab205fda905
98b204010015aa4202740500600b0180ed10408dfe6e2201740b0078286401027302700b01eaf10900c0922815039e2701a9242406029b16cd27429a1706c8229a17d72fe925019b16201537e12daa171f3fe920a08d04eaf18536ee1301e515e3174002d71200ab6201d5140189360b89316c383e042301c82101005564
01f80050e1fa23013309410589e3f835ee13c705010052119c246e21f20075c0893080521040801f4311aec512006101c41301cb108a82e2183aee134824431039074712006e4d1900000594120201bb17e18b42083445ba0e4d4f0000f0005a10654d9548ebf0fff2f005ebf4ebf0441aebf004ebf00700f6f1f2f1110d
1103eff42309e4f701ebf0f6f13d05d568e7f406ebf0303e02541840ebf06401e2f959015901390902ebf0a823010501f6f19be3f887410002f7005541e8f3d83f416656b902b63faf04e8b705c6c005aab60850360b1f8902748c00607af6f120e8f3e03f0580d300b740fe1b890101752300604a031d15890102fa060d
13538901f30370f6f1f6f1f200c06277080080031040a233ebf0fba00debf0620000a326eeebf093754cfc00620a0053802e0f10ca06818c01090f1035900d131689010475fb0103175a951305191cfe388d0103f6f1ae410101030ac91501d21605550bd3160cd316108d0102d216ad04fa110206e506fe8b1000970207
611824082020d211024d096710fe873e04eaf1918902df55321cc7714a208c3fb0492f5b26e8f36c24e03f0310e0a2f2f0efd3043a220a22005b26fe2a0a2201962c02962c0396272c22a5043221858904eaf14d43247bbf14ae47e17a846c23016540e0fb0140019023740efc004cf0119f24740f1835d027848d04b2ea
f12b4323350d001a8d01014cc816ff1703a00204eaf149432351013a25382740021389010b4912b8a33152102b230062012a24018abc360f3221a44208c2114a3cfcd0f2f0e7f42730af1072eaf10a0255c019230020250320206c3e04e2590755640f760f880f0000896ae3f845e1340102120202491f9300400d13fa17
11e1120d4b01ca20208a3728604323d304000016d54601009612009c194300951348181afb41fa1200d211f6f10a8f221903db121f52018bdb28fc21ac0708c800df4f1b17f0a915045e3551330500415ecb055a5f6c5fbb5735517c35415b40dc40a55ff14fc95f3551450532cf4f4c3b05fe3200724101d210fefe3249
015b63bd3069574441011c5e07387c3539098c37000094e3f85e11944a3c8e20279525bc6c228b270786ce66fe6a8d047b6f8d6fe3f895e0e3f843124b336c243c7f0000210d335a72f3bf5d01e9f26276172008f4343a222c2206322117307b361a21006100dcf69548ebf0fff2f005ebf4ebf0441aebf004ebf00700f6
f1f2f1110d1103eff42309e4f701ebf0f6f13d05d568e7f406ebf0303e02541840ebf06401e2f959015901390902ebf0a823010501f6f19be3f87c410002f7005541e8f3d83f41ccf6b902d03faf04e83f4166e2cb02c6c005b600cb03b63f50aa360b1a8902748c0060f6f120bee8f3e03f05fe1f890101ad742300600a
ebf075151162df0200060380af0040fea515890102fa06271353890103f970f6f1f6f1f200c06204bb0080031040a233ebf0a07d0debf0620000a326ebf0f793754c1f110a00802e542910ca06818c010929109027138d1689010475fb010318951205381d1203187810000303f6f14101d701030bc81501d116050caad2
16108d0102d11604ef1102f506e506fe8a1000020761b20d24081520191102096610fee9873e04eaf191890255321c1bc7713f208c3f3e2f5026e8f3566124e03f0310e0f2f0efaf04542f22ff12005026feff12018b2ca5028b2c038b27212204272185f48904eaf14d38247b14ae47b7e17a8461230140e0fb018c4001
8523740efc00e511942474490f0d35c527848d04eaf12b3823cc350df3020301c716f41703a0140204eaf1493823012f252d274002851389010b481298315110202300ab62011f2401b1360f2721a40a4208383c3ffcf2f0e7f41c30ae105d72eaf10a02c00e23001525250315206c3e04590755640f760f8e880f000089
e3f8f1213f310143001b2e12481f2a10ef1711e0122a024b0115208a2c28603823af045b0000c54601009512009b19444300941301b119eb41ef1200d111caf6f10a842203da120f52018b20d0286b44c107cf4f9d17f0a815f44e0025513305315ecb054a5f5c5fab572551007135315bcc40955fe14fb95f2551450531
32bf4f3b05f33200724101191025fef332014b63b230694c444101e11c5e0771353909813700009450e3f85d113f3c8320278a25bc61221a802707be66fe6a8d046b6f7d6f82e3f895e3f84212403361242c7f00370021334a72f3bf5d01e9f22052760c20e9342f2221220627210c300070360f216100dcf69548ebf0ff
f2f004ebf4ebf04444ebf0f6f1050800f0f3110d03eff4a42309e4f7010204eaf102ebf0686ae7f406ebf0303e025418ebf0006401e2f95901590139094d0123010503d700009be3f8a8410002007b5541e8f3d83f41ccb902fbdc3faf04e83f419a99e2cc01c9c005b600cb03b93f50aa360b1a4a02744d00600b0120be
e8f3e03f05fe294a01014d742300600bebf014120a8d01fd7515116202000603802eaf0040fe154a0102fa063113b5554a0103ca06754c29110a5700802e3310814d01093310fb700de7f40a02c0a21dfaebf0a07211620000a310eeebf09341339112c33f901a3014164a010475fb010318a112290527120318248d0103
0b0141015701030cd41501dd16058b116b0302dd16048b110206e506bdfe6d10000207610f24082c1720221102098710fef112e6121623010a01f401030e08dd11f6f1a70a00873e04eaf1b24a02556f321cc7716b208c3f6a2fa47c265b233f04150310e0f2f0efc8af045b220122007c262c2202014ab72c03b7273b38
12711a237f119113ebf07c268a1332cc02e20090123113844a04eaf12b6423350df302330301d316f61703858d04eaf1fdc164247b14ae47e17aad8494230140e0fb01400136324a02700b015d01f200f2296e3339a405356e3590fe2a0f12963a5d177f160200a322119387100390fe3d2323223e021911fa33403352f6
360100460f43042921a04208c5466423015b25360c01220b74b942fc0422230062012124010a6f460f2921a49504eaf10e122d3b51fcf2f0e7f411220017250317200969d415ebf01c5e07450539094249a594e3f833944faf2027b625bcb49422ac27071e56fe6c4a04088aebf0343e02556401cf41e2f907104554800f
6553940589e3f837122d30ab010111220117250217208ab25828606423af040000ca56014500a11200a7190700a01301bd1924f051f11200dd1159010ab0223123061462018b1d387c31ac07c800d45f42a917f0b415f95e2a61330591376d08cb054f6f616357c73372190101f8223e2713010005a3318c112716abe474
410060721175f06104f3e4031412de3406e40490002c2411072a614505366bd1509a6fe65f906b6b63612a618b4532c45f3b050f524a027241012210fe9b7201a173907040b7516751eaf17c8a6f40755240913372199421d163fb01db622ce16260fd72eb62c051f462c0510474f6f024f362fd60905d7f62620e5b3811
2100610043469548ebf0fff2f005ebf4ebf0441aebf004ebf00900f6f1f2f1110d1103eff42309e4f701ebf0f6f13d056968e7f4f6f12c3e025418ebf02114dffcf6f145053d0502ebf02301ea05019be3f87441000200557d41e8f3e83f419a99b601abe13fab04f0b305c1bc05e0aeb305b13f50360b1a8902746a8c00
60f6f120be0505fef0026301742300fa0d5d010202bd06eb754c12108141012d0000ab40818c01093e1080ab0040aa091303101dd007101589010434cf064a1316890105751111ff04dde0071403030d3e0401055d0c8d040a0110890106e106bdfe461000020761bd14089ac5100a89010962bc10af11034101a5179512
0e08a51105010aef023b0304f11f0a00853e04eaf1fd8d890255327b14ae476fe17a843fe9f20240e6f5aa8c0102222336890270f6f130beebf0f200c0a223ebf0a0b913ebf03224a43fa3af11934e322690fe2a0b125b2a1769215e9b11620200a3d11193d7103590d01302a720fe848904eaf1e83d10a701350d00a511
02028032341040da149b1602a48d04eaf191262c23ff04e9f2fcf2f0e7f40ffa801272eaf10a02c0fea0100204eaf13a21a80001232521274002866d21020b5b226d216420d01300ab6201cf14017c316c3e04060e5d2401005564016401e2f99231909231800f0303f6f189e3f82b2404570100428d01029b1111a01c14
0b2b9f1203a5110bfa22fb17bf122500c51501c5105522025b22f6f1de642062100080ff0040a1691bebf05b220e6123801f3e102d922301fe8a2028602c23ab04db0000884601007f12007514f7011236057e13018519ae41db1299009b11f6f10a00ef27d24201018bc0284121a807c400924f8717061100b24fae41e8
413305f44ec7050d5f1f5f000017e8413c35f44b8f40585fa44f7c5fc4e841450532824f3b0529320072944101d110fe2932010e637d306984890441011c5e073c3539094c3700eb0094e3f833cc2f000010bf2700321cc7718260bc683a222322af12078166fe6a8d04282e6f406fe3f895e3f8536a673a236cee6febf0
21330d72f3bf602140e9f21576bc101f342322d11206d711a16b0204ab6fbd6fe3f888e3f807006a6a5f5001000048ebf0fcebf0df27002d0002e9f29bc797711529ebf0ff0c00e2f901fefdf4000029000df03f577c4f04e2f90ee7f446ebf0ff1c4ecf29b30f0000dd0beff0d60023ebf064537fcf29be1000004f3f02
fd0aebf0844dcf290d115700006c6106f46b00796f00deeff00044002bebf0d45257cf297a6f004d3f0247ebf0df0455cf29c76f005c09fc5001f2f13c74cf29231be700001dfef0ac03c483cff729401db8091c84cf295b5d1fb809d4899000212400bebb063496cf29a35400f9febb065c9ecf299c2600f7000503aa05
749fcf29f5a108007d15168caecf291f1e2d00001715125546ebf0fff2f003ebf044e8f366faf40002f1f20e0fffffeaf1d01f0de0fbf6f1eaf16802060000bd20ebf001005418ebf00850dffc55015501e6f501ebf092e3f86de006025540e8f3f03f9b06f53fe8f3c0ac06bf460a85bf42a15028a43fbf0604b0330fe3
0ff50fdffc0130e9f2105406029b06fe1e1201241c02ad06da2d1303b606fe0a06010662fb04005d1307620000fe7d0906011a6100fec0810422eaf19095037f069b04c0a3059e1665d0a81ed8ba1e9e187355e011e1e5de16051f002f80033aff0f27000065810484011c5a07d10de42225e6f583e3f85e120055052aeb
f047e9f2c97508865a038401091e8624682111052fa72fb92fcb2f00dd2fef2f0136757ce9f220f3f000006ee9f27fadff257ffffffe0300f5fc0300f80300f000000fe5e01300f00b040a01fe7f83fbff010300dfff010f8ef7ff02f03100820f8dfff703f0ff3a010fff08897b88833c01ff8a00844201e83a04370132
028f2f00ffffac01fffd5cebf0496e64696361ff746573206120636cdf6173736966f5f1696fdf6e2072656c07027368ff6970206265747765fb656efbf06d6f726520ff67656e6572616c20f7616e64210573706563fe030120656c656d656e07742e0000ed62e9f2fdfff5f1cfbffceaf5f33ffcf5fef5f42cd882ff2d
d882ddbfe49d3f5f334f50db3f1c0cbff4ff00060b5547ebf0fff2f00bebf048e8f31544ebf004ebf00ce9f2f2f1110d1103eff42309e4f701ebf0f6f1eaf1e2230168e7f4f6f101010100548518ebf02cdffcf6f145053d0502544a04050105ebf006ebf00aebf05507ebf008ebf009ebf09be3f87de0410002005540fe
1102abdf3fc307fcc505fdc503bfbade04cfdd05cfbf50360b1cda890275a000607509006003ffe462020006804100b70040fe08120175f6f0602b750d151c1789010213120e1245043a18032f122a1250141b8901db04758c006020b6043f05a6681805752300781e424a01024c9801410101049801eaf1079702a24101
070e0fd41aa41203aa16054ab41601be1601d41f16291589016906f9061e130e890107613629f9084325a0010209620000d3fe104a0298010febf0f200006322b3126d28ff1263217124f5128d23e9853e04eaf1fd890255324e7f1be8b4814e7b3f3c034d40e6f502fe8a01a722278a12ff601447656e657261ff6c697a
6174696f6eff204172726f77007b6a41018b201132890272306e22b7c0a223ebf0a013ebf0325d111932913fa3632193b6264790fe26251206364011a0301095001a10a3a001935f20303404c8383f5f204d340255306d210206485f201e133232085e3f703b86890480eaf10f31c000a725a525d0365922029f620100fe
9d4a04eaf1a2a2b023401623ee00c403e7044ecf0f3f010f246426ae122747a912426d231aa51b31482242ff1601654720eb128d234642eb176f48840204eaf160a321c000350d92288c010105464210ff1209013a43dc420384439c012c43faf2460107310202601555ff4d4c204261636b67ff726f756e64204164ff64
2d6f6e0060092fff434d443d31303031970080792011a49504eaf13e86b02308028c01b733d601d222045eab02020361015823081a1014582570550d6f51a09904eaf1c52124ae41c63901d037592201e5315922550bb8560db8560ee531bea104caeaf119c03402a801e0fb013892ebf09ca504eaf1f1f634d603cfef3f
4194992461b9bf40f71cc7712c60bc3f409fa3f4493560ee002c63ac3365bfa53ff90a40454244104c101081a241012d20101e13e65203646262cf0a00802e6f667e320072cec213c0fe1e33330423c0411d33af62c33f031e136322e1470b04166f131f911a6223eb12dc424d05ce6205757910d869bfa904c0eaf13232
af4b287f4000632100a3049d04eaf17cb023df01df01c401c401f8350b1f1027106037436f70ff7972696768742031ff3939392056697369ff6f20436f72706f72feea222e2020416c6c20fe8072732072657365727f7665642e00fe1d8902fb60138b705f44313132ff2e63686d212332300ecc7000fe654d4606136104
a2459c3909c637000083e3f859220029559c01faf3c9b438115e034101c8d5603c828b526c8d0822410100815564010903e4f79005c6264a04891c668cc331010f8ab4389354c52696c5260100ce620074199600fe7ace62018f19008005fefb2070ec36ab85d60ec48f0000f0e16084dc8f2b91690204da7fec7fe3f894
78e3f8bf34e0fb102700302c650a3d0280ebf07195048c017911610488ef5d4b573b0799e3f8ed91c001971e2462993f409802a30a71ddfe28d6013f0319999a2462a92c9c3ca7042247eaf109bd166aa37d2f6f2160520f056100feed91a725aa44196600f00614af24af741c2e9fdf679702dc42148228dc420190a670
9904ba9fcc9faa360caae3f84ebd03413ca3b979bf7fbf91b605050100df01aa4100630133310833802240408e91b53f05e4b4b63230c0b9036be472b813c05f2009a26401e9a03d21e530134d340100906c821432810201c1b613fe8760cc4c00f24f010128c6b3160902b022c23bc731cff31809037e3202c8e6b2ac00
7d330384c3b95508605c60205922046205715405acc18a6052066655075f216cb1a725122279bb3fe0cfc1b7a4b764afbfc1bf82d3bc13e2bff4bf06c8632770a202207ec470a36124ff167cc40389d399ca20632115c8a5cfb7cf5f2167a104ac01806401610408ef0c772681e6f54a8102430054a80122c122c1a7222f
46e400b73207310731330216d116d1a2426d21006d21b412050105018b529c019c01de520863216321ef52b4a4283d8135e079140936c3023c73023cb2bbe3a4e1b73506e65354e8df01eaf1c0e31583a2c104a4e1330557b1eaf0e502616723cc42a029f7ff12cc42b312cc4208c845f0d105c6eaffe4a2456e32e35018
7f2d4454fb21f9bfc0e388464261afab003d01336d234fd10bbba22542360100a3640193f5728d23c0aef5069080593c2011a8010100e044a4e1b415d67472005409a53fd6010100d92209135a00607581e060040648d503e44b13622816d3a4e18b5500b0eb2110c1ef2110a4e1de55a062b5e601f008049163e5301e13
a4e1ef55f9f531a00ba4090aae50607552f01e05010127016312300e78f1fad18ee107318041b405ed8ae56499818581e152f1a9827d98ca507b5a71d186d2c5b673087f56696577732e2eb270fd4e7573444c69737420ff7468652064696167ff72616d7320636f6eff7461696e696e67207f736861706520767b11f720
6f66901069732042ff696e6172792041734f736f63699773715402fee1120652030c5f1e5d352f54cbd4a3c511055f214311a7255f501f621de20016b871015f715401a2c6d712bbd2210315f70c2f1e23b735b95077fa81e83b2bae50ae5021b673174469ff73706c6179205365ff6d616e7469632045e6f120727390d4
b596f00114fc333356f200c060012e009108d11fe31f1f5c32052ef222050a933580d560401f22ed35e0f02f2f10412f532f0736d052038426832fa146709e28753ff8830f03601853aa1286c9254f7098717e136e60777123fe7a11206f72206564691574a81464ca246f1044d01f163f221e5d38052f172a3a55a8d73f
621dfc5d81b9700e2550726f709f65727469657e1316720113601c234a5a4170cf47464f584f12f41d317b4f17262caf54ae51f2210041b0f2212c7ff8831b41b385e2e4c92f06db222e009548ebf0fff2f003ebf4ebf0440aebf004020205eff4110df6f11f0d52e4f701ebf0330502ebf068e7f45a0b012c3e025418eb
f014dffc400b010b0139094d01f6f105019be3f8fd924100020055419a99dead01b9bf4198ad04401cfbc771be00bc3f409ff4ad49c700cf3fbd0f50360b2eba4a02707c050900c0f60701ffc0800b0000407a3356101080411010fef00201f60fb4081f1a11394a0104754d0060da2419622b10a217ebf0a00dbeebf062
0100a30aebf093366310900546180575f6f056186901621f741e10420102063e046b0104be1203c416051a4a015702754c54108141012d1516f5194a0103e412620a0080d8f0001714be110206e106fe09964a0107611f240827207511024d099c10fe843e04eaf14f4a021555350d003322023921de11d2189500c41601
6b2201c416c3170309864a04eaf1234a234125542a4001c26127a4420814104c2705010000a1fcf2f026164b0127250530250ddf620400fea0eb2600000136ac244125b22841013322a9113223d5014c36094c316972260000211c5e071f353909b22994e3f8e12a1ee6f510270032be05582611224d07bf36fe6c4a044d
01203e024555640108dffce535390989e3f8a9272836ff2401202301272502aa27250327208a3e2860a833401ce6f5c6060100164a025212ed31ca5403fe7d42018b128844f03f1105bd130e08be12011107d5d2ebf048ebf07eebf0c300f72d0002e9f2b6a1062ee580ebf0ff0c00e2f901001dfefef30080000df03d7f
ab4f04e2f907e7f446ebf0e4df3ecf291f3138000100ef00d60023ebf07401d0bf2926320000653f020abeebf06cffcf298b5d005b3e610654f1cf29e65d004f00ef0044002bebf05c02d0ab29e75d002e3f0247ebf0945f03d02915339e000850017ef2f1ec1cd029a93b0a00004f025546ebf0fff2f002ebf044e8f366
faf40002f1f20e0fffffeaf1501f0de0fbf6f1eaf168e7f403ebf0bd24ebf001005418ebf00c50dffc55015501e6f501420492e3f86dd706025549e8f3f03f9f04d7e83f3fe8f3c0b006bf46ff0a8542a15028a43f40c3067809e00ff20f041f800230e9f25510060102b106fe221203ba067bfe0a0601076200003113c9
009f06311301a806411306624f0300feb78104eaf18f990367202040e6f58b1de0bf8b140fe4bf08088b1f9d1f840022124904c316311305a61631130ade1c950bee17c042089099035b0001ac8302b114c03f342dd0452ed854572e3b28557c22e57b26034505fc942f0e1b003eff0f00002965810484011c5a0704a52e
781772eaf183e3f84212005505ebf00147a22275c0e9f220f3f00000b2e9f2ffa5ff8200353ffe00d100050f170f21057f3201ffffffb9ff898886ff01fcaf88cc01c84002ff4609023ffcff860002ff470f410ef45a0f840ccf7204cfffff9401fffd6aebf0526570726573ff656e747320746865ff20757365206f6620
ff6120747970652074ff6f20646573637269f9620d00fef06578746572ff6e616c6c792d7669ff7369626c65206265bf686176696f72040363ff6c6173732c20636f2f6d706f6ef8f0203800f8f01f6974792e00006d62e3f8d8bfe8f3c83ff4f4fe0304c8bfa4703d0ad7ffa3d8bf48e17a14aeb747c93f14043f471d03
bfff83c16030180cf0bfff78a23782277aebbffb0006340168bf2076211ff76117c23f5547ebf0fff2f007ebf044e8f306faf40005e9f2f2f1110d0b052309a8e0fbf6f1eaf168e7f406ebf0301eebf001005418ebf06001e2f9a855015501e6f501ebf002ebf003aaebf00406049be3f894880002ff0055400683c16030
ff18e03f40f0446f045f4ff4d63f41e8f3e8bc05ddd8c50ec83f5079090300f566850102bd06744c0000eb6008ebf08184012d0000fb40720901f200c06208b70080200e10a226ebf0a07d0debf0620000a319ebf0b193ff025501081690818c0109ba0e1080bd0040fe4385010351748c000312111e1d2319103012ac5d
1155019003501316850104e5758800601d10eaf1e03f05c6981305755d11a4188311020696e106fe0a8501072b10d413082adb1609db11c48901020901840103010409034301f9150b2388010b23008c010b2390010b2309010b2355010b2300f6f10b2304110b234c100a24d5110b23a10b42025501fd127a2702110fff
b1ff04117f23a32602888901030af916050326010d26d0221b22d022002522d0222f22d0223922d0224322d022004d22d0225722d0226122d0226b22d02206752201848104eaf1bd01a800e2f9fc4332590102026015554dff4c204261636b6772ff6f756e6420416464ff2d6f6e0060092f43ff4d443d31303031000b80
795211a08504eaf1e101a800d10143344332a736206a2202002b6201d31401c43608c4318311ab030b04110f5a010bd5120b92db11a48904eaf1214c39612100f300fc3007d5120d62090053fea38d04eaf17c4c33fdf2f0e23d41fe4244523b4b32016037ff436f707972696768ff7420313939392056ff6973696f2043
6f72ff706f726174696f6e7f2e2020416c6c206742ff7320726573657276df65642e00fe76110200fb601372405f44313132ff2e63686d212332306eb34000febe060600002f11b2a331020411e0fb0138ebf0658081048c01a4115d04ce4d880504598314e3f8be3355550148e9f220519735282c5404113753c994381e
5a038801489911991178021c7b54ce4267890480752160015d04a15f73235655e6f55f22850254f6f17405433213df549732092eec542e422ff954090259015901c07802900190010f423525d51100b4b040386651ce50a41400401541018ce532c230020050133061973539163d6af03f4c631a89029127550100e633c5
12f042786260622e45c543426599534b64be344c006062bd4b5411e83d411145cd6560d21030617805913d3d6bf46adb112489022125f0210504118801ab2345720130610f43b70000c53d6946a04b64a600846c867f987faa7fbc7fce7fe07ff27f80048f0b839d696e7060622b62ebf04d40127f4f60ef5135738923f9
16037b26a468821c42029d6ad2106e2c26000300345a077e51390d4505800f07030a5501a9e3f8c1374b3d411876e7f4fd129d43085669657773eb2e2e9940455c433b4c69ff7374207468652064ff69616772616d7320ff636f6e7461696e69ff6e67207368617065bb20761491206f66299069ff7320496e7465726627
6163659940d51202017163324903693f7b3d358c34d51204db161105db11dc814335bae98ffb8d7e51fea0401253686f772052fb656c7e4273686970739300fe99815f402ae7922a91721eed9920666f72509f629f749f227d3b36959fa79a973559bd9ffb8d0c7521a040015fc63501712fa7d5121103db166eaff936b9
3747550198abfc43330243601744697370ff6c61792053656d61ff6e74696320457272ab6f72f89014c932723b72003fc060012e00082eaf40af327c3c3262ae39b205725901161023801f5211dc32367701dc812e450089af9bafadafbfafd1afaa970325f5a834ccbfe8f3229d431853439220b5434f70f09218920d10
5e41231391bd201ba0656469744194644221b46f67c42daf5dbf7b3d3862a910ab920dc7dc817805a82ecffb8d6001fea0400e2550726f70658f72746965179322115f401c047acab1c17026d79dcfafcf7b3f63af1aa8952c3626000039b15d0039b180350fe8f372c17805b96420bf32b22e0b007152040c34545d0459
01e2f9000be10be1bc8fce8bf6f104116121d511ca752199e3f8864c33bd0498bc0abd04d2bc05f0bc0511473ae19912ad009f19a0bcad1401b519e810c215f505aa60c5120394e693d866e108433572efe9f2b88aef9cefaeefc0ee21d0d2efe4eff6ea9735870cf40b8389e7bc0589e7bf2dff3ffc0b83ef14ac15c4ee
116ffb137dfff6eafa3500a4ff1dfcc5ffd7ffe9ff62f9070f190f70f8e82e453e054541ffffd7b3f541d82cf75706690f9f13e003df880f0078629f04b705ae0673f5f2ee25c50bf508e00cf806f8073f031f151ff3fd23c0804b1eb20aaa60f5eb09753e053d41ffc3ffc7e70ff90f710d1541ffff81cfbc1f341f461f
581fcfd53e0be1001a2f2c2f710faef3562f682f7a2ff2ee08ce450bff2482c823ff680f47fff2fe01e06bffb10ff6ea59753e0f513c5f0f00d82f830f9639a10fb33ff8e831853f3500132c891f9b1f462f254fd11fe31ff5eb00b6553f35ad2c894f9b4fe02fbf4fd14f00e34f94d79548ebf0fff2f005ebf4ebf04442
ebf0040202f6f1f2f1110d03eff4442309e4f701ebf0f6f13d0568e7f43506ebf0303e025418ebf0640110e2f959015901390902ebf023010501eaf6f19be3f8894100020055bd41e8f3d83f4166b902b6953faf04e8b705c6c005b60850aa360b1f8902748c0060f6f120dee8f3e03f0580d30040fead1b890101752300
60031d15d2890102fa060d135389010370fcf6f1f6f1f200c0620800dd80031040a233ebf0a00dbeebf0620000a326ebf093fb754cfc00620a00802e540f10ca06818c01090f10900d138d1689010475fb010317951305d6191cfe10890106e506fe0a528901076710d11308d81609d81165388d0103f6f1410101035901
2afa12010026051107080126c2119b0302002604873e04eaf191be890255321cc7714c208c613f4b2f5d26e8f36e24e03f031045e0f2f0efd3043c22c212025d262ac11303982c00982c019827d212a504d811858904eaf14d45247bbf14ae47e17a846e23016540e0fb014001b223740efc004c1e21c124740f1a35d227
848d04b2eaf12b4523350d001a8d01014cf6162d2703a00204eaf149452351013c253a2740021389010b4912e8a5315210d1130fd816006201aad01401c831a442083a493ffcd0f2f0e7f42930af1072eaf10a0228b6346611d11303d8116c3e0459074155640f760f880fa600e3f845e334b9018a118b006100fe844201
6c8a4003110202491f00400d132a2827110f228a3928604523d3045b0000d94601009612009c198043009513181aff4128225802f6f10a3291220309222352018bdd28fe2110ac07c800e34f1b17f0a915085e3951003305455ecb055e5f705fbf5739517e3580455be040a95ff54fcd5f395145053298d34f3b05004200
724101d210fe920042015f63c930695b4441011c705e077e3539098e37000094e3f8285e114c3c902027b725bc6e228d270507d266fe19303f3684416100e5f6216a02047f6f916fe3f895e3f84312784d336e245c7f000021337a7203f3bf5d01e9f28276cf10f6343c2202d21206d8119548ebf0fff2f004ebf4ebf044
9cebf0f6f1030005eff4110d0348eff42309e4f70102043d0568e7f43506ebf0303e025418ebf0640110e2f959015901390902060203030b01f59be3f84c410002005541bee8f3d83f419a99ba01d1953faf04e8b705c9c005b606b9ab3f50360b1a8902748c0060fa0b0120e8f3e03f05fe1f5689010174230060590175
1511bf620200060380af00404bfe15890102fa0627132b8901ed03ca06754c1f110a0080952e2910818c010929102713164689010475fb0103186d12051d126a031810890106e506fe0a8901ab0762a61508af1609af1124720601030b014101010308ce15b501d7160599110302d71604e1873e04eaf1fb11ac00321cc7
8d710f208c3f0e2f2026ff133f1404150310e0f2f0efaf04ff129912a90220269813035b2c005b2c01d25b27858904eaf1c108247b14dfae47e17a84382301402ae0fb014001368902700b015d01dff200c0a223ebf0a0135cebf0a824a43fa3991193a826a790fe2a0f12d12a17df210d54ebf02210a3a91193af1090a8
134904af11f4010358028c01010e082a3532013b36011107848d04eaf16642120055350df3020301cd1656f01703a0420846082301ff15e4360ca9120faf1199120b74425cfc04a813006201a71401f23111a49504713fe9f2fcf2f0e7f4ec344aa61503af116c3e04590755640f5c760f880f000089e3f81e0d44b90162
118b006100fe9f42012aa54502a5408afc18600823af045b0000cd4601006d120073194496006c13018919f341eb1200d711ca0b010a542203e0121752018b409628b721ac07c800d74f7517f0801500fc4e2d513305395ecb05525f645fb357002d514505395bd4409d5fe94fc15f2d5152044532c74f3b050f764272ce
34a5fe4d62015363f330693c360043001c5e0745053909bb3994e3f829330d4f5320277a25bc382250270d07c666fe0e6a389f416100bc36d5f6ebf048ebf0a2ebf07500f72d0002e9f2fa816609a544ebf0ff0c00e2f901fdf400ff0044000df0db7c4fd504e2f909e7f4462301bdcfff29443e00001d0100ef00d60023
ebf004c0cfbf29613f00004f3f020abeebf0c4bccf29b05d00707e6106fcb0cf2920401a01fa24012bebf0a4becf2921ea81004c3f0247ebf094bfcf9b296d810031075001f2f174afe3cf299e9c00f5fef0d6fcdcfff1f214edcf29934a070000bbbb02df1c02000028ebf0e80154dcffe2f904ebf01ae7f43febf0ff74
f2d129e90a0000dd6eebf05200c9ebf054fe7fce29570b000021ebf057420044ebf09c2700ac3d00e9632f02570f1eebf00c1bd0bf292d0f000086ebf05300580f8c0f9e0fb00fc20fd40fe60ff80f000a1f1c1f2e1f401f521f641f761f6902ff5c3bcf2935300000f9ea77026a018cfecf29a8f93d48009716c4bbcf29
4e0f4d0000aa770fcc1fde1f11061514ebf016ebf015e4100520ebf014dcff0406f515ebf0fff2f002010000e150e8f3faf4f1f2dcff0000f041bf0f0f340fe4f7f6f1eaf146e7f47503ebf044ebf00100546501004d02f1f2790f0b038a0de0fb6101eaf1dd686d060000207102541842ebf008420dbd04e6f5520192e3
f8fd835e0255462c68ec94ff4f93124046f06d4fffe2cd650040468fc7bfe3f1783cbe3f1815bfff460a8542a15028a4813f2a165204421f541f661fe607ff3f03000400009bec04eaf16591001340e6f59c1df03fae1d38a3180105eb02cf03105e01e3026e52010104164e010475c0001960c401e9f205fee112b002eb
124d05f11205756100fb1965ec040af11170c50758dffcf111f111e70958c001610186100005ebf006ebf05507cc0409ebf00aebf00bebf0550cebf00debf00eebf00febf0aae11111ebf012ebf013ebf01440ebf4ff01e6f588210310520147fa06003c15c4248821cf27e305c424ac21cf2744b005c4241ccc2a7021c0
2825cc2a447421c0282ecc2a7821c02837cc2a407c21c028c011cf27cf05c42449cc2a448421c02852cc2a8821c0285bcc2a448c21c0286fcc2a9021c02872cc2a449421c02876cc2a9821c0287acc2a449c21c02887cc2ae111c0288bcc2a04a421c0288dcc2aa821c0289511cf2744ac21c02895cc2ab021c02897cc2a
54eef1c02864cc26c9e0088af7f087020050f111942194215201113139ebf05a518821113aebf06751c6ac21113bebf074512231113e18ebf081513f31113febf08e515c313111c011c01179311141ebf0a851c6c0111142ebf0b551b331114388ebf0c251d0311165016501ed31111134ebf0dc512c5111c401c4010a41
231145ebf0f6512741115901590162444111cf21cf2161411148ebf0c41d617e4111b331b3319b41114a18ebf03761b841114bebf04461951163114cebf05161f241114debf0005e610f51a945716f836f956fa76fb96f00e7f4cf2152018421650c18435201b02100f2f174217c0f8807e4f7c135b80570210128c5078c
45e6f570213035602d8911f8e6f5f65199119b712952b3ffb0004040f822e16acfdabcf03fa851ebf0e83f57419a99a571c99975d8a275bbb93fd21a0300848a182b880013761aeaf11a082227417021010d02f77603a0e008cb01c82152045c52021f860800a4ad0817da798ac133fe9b0201c3012d25cf013800c507fc
16e7f4cf01cf09642f7a23782102b82f55c0011d61d32f03106101ca8700f62c7021ca87133c7421ca87303c782100ca874d3c7c21ca876a3c8421ca87873c10cf01ca833e73e8f35cc5033c1fe6f5dbe83fa473e13f0a7fffff04978f762f675e048c21cb01c80420af28f9373651e6f5795e02548421f69100f6915202
98219821e30278217821b002485c315c3130322f85a44d323092a4006a32ac21ac2187325975c132eef1eef1c2de32b48a189c214da0fc1428400655810101c9a1e305d5ab5383e9a3184d358e514da0e8fd9b04e5a294a2ff020060267b333145ff38424131362d3345ff41382d344437462dff414641342d414244ff33
463738334337418f467d00fec9a18735d5abf0713fe5a7c135d5a98019c4e4a800de35f7afe7a1365130356c84f2915425826a321be6b4873222312231cf021dc000c4c132b5514d35e111c8000b7fff1e1ed99753418ed47fe243608386f871f7940090211d61c80495a1e2f990211845938f84f49f842999e3f895a103
109a74982fbc413433b4c1c399759876405187eaf196c1ae95a2cea473a9bacfb0cccee305a2c5d493e73fb2cebf0007df93c4b00528def6cd49dfd5c53035382c51a6c15581ffffd7a27eaa53401e04cfc7f172fd52fb7df17201ebdf03010396c14d35a2c5b6d6c8dcced7e08e50cfcb6a35a2c521b1ffffc720bddfcf
dfd5c5873528dbe177ef89ef00d5c5cf05e5cfb774fecfcdcdc1356bdf0000fc8cdfd5c5de3568ee36ef48ef94c370fb35abee85ff97ff00006e7fc8106c8f7e8f63cf75cea94fc8223103100055815405050d4101ae954d0f5f0fe008007c0f8e0f60d8ab0fbd0f2898da0fec08802b8341014d35091fec0f6298381fff
01614c1f8636671f4a1e392180213a7f084c7f1a0f0da2aa4fc888a16ce7bcd0099800fbb378055a80cfc4fc11ae95000825b6dc1f2f312ef6254a2f5c2f6e2f00fc1163d58c2f9e2fb02f3fc36b731d6100e364e0132b81f4697ec1d49f167d250500f06532750ea194b11aa41909b8a16d75308639757f37f5dc2fa03c
9b51c8e9fd90cf3750182d4454fb5321099b5143509dee8826a3ca9cb378d52f01006cdac40ea1248230b25517815ec96b359239250589044f4e1c918adac80051a6c79d5315c4003261f185944bce381f630ea10c3f1e3f01ff82c13b3f473f593f6b3f7d3f8f3f00a13fb33fc53fd73fe93ffb3f0d4f1f4f00314f434f
554f674f794f8b4f9d4faf4f20c14fd3440091de4ff04fff15010d5f00195f2b5f3d5f4f5f615f735f855f975f00a95fbb5fcd5fdf5ff15f036f156f276f00396f4b6f5d6f6f6f816f936fd3441d9104b06fc26fff50a1df6feb6ffd6f0f7fc0217f337f457fd329bde204f139dc9f63b3bf54a873783e9398fe85786a63
00dcc1cf0701c0987faa7f00f5102ed57fe77ff97f200b8f1d8f2f8f418f538f553d9fd443087ec13501868c08203ec4a1b18fbd8f000fb72d01dd85c11fd31fc59c2505189fa48297747de80dbe0cb850d59ba088dac8c2a135f001ddc5dbc717c2a4621dd81732f30509cfc7008460d8111132f34ec9ddc2694bbcbfa4
d9bf0250c70e1dd829f120c051c6a9912d01007ec14ac1b994d6bd7ec160e5210f330302e89f55b7a0fe9f10af22af82c81eb80098c363d5a6cf91cae4157fcf91ca1de5c4f4cf0c0642e118c6a106c0753dff6e64d1083e4080e73fecb7529a1d6fd641a3e10454af66afffaff183af8fafa1afb3af00c5afd7afe9affb
af0dbf1fbf31bf43bf0055bf67bf79bf8bbf9dbfafbfc1bfd3bf00e5bff7bf09cf1bcf2dcf3fcf51cf63cf0075cf23df99cfd2cfbdcfb5ffe1cf8bfff005dffdff29df3bdb0588ce5fffcad46044a870305c0fc91b9776d641bd1161df5cd000213dc09190df9cdf2e17c4d1dd8fef8f50019ffadf7d9fe12ae8b975c9e6
2f013f48ecace18425b8ef412303f14225fd1210fb436166654c6147747465cfe2f001d9811cc9d728e419d58575e9943bf823691ed9807f102700321cc771012083bc3fd582c4d14301c62542d45cff64082e47282044b07fb9d81183a16c0ea9910e7d03000034b697b1113af95dd1005dd14eff60f746f16aff6e1180
ff2e07002f06a5ffdef9b62cd2ff2c1c9823f9ff00fe2e1c0fac282c3b4af5a62fcd4a0ff1166e0f000af24e0d940fa60fabdf00ca08b593ced2c09ff20fd981041f213faa3a15f0b975a93a15e0b97599004c1d57ef69efa5e8601fc2efd4efe24f00f8ef0aff1cff2eff40ff682f64ff76ff00653fb42f825f4f43de2f
ac5f5248f3ffe0463fed563a3f935e430f54a8baff2bcae945cc468a6b7f10c1e8bbf78c479c3200de038d818a842da186d16563cd657e8100bb3fc73d2da1e005bcdfcedfe0df525afe264f5540f896d0d33bffd6d93f40f822e16a43dabcbe56404f421fd48303abe2d282452bb64f82421af1910376168e8401028776
037e4174958a4c048242af760881e2cf558ee406579fe52501d401657f44e00138cf6795e920b665e009535f5bd3435183385879a100f89086d19031418382454f84fe315a870074954f84b1315a87cf554f8400515a8704bc154f840f578a1d654f84d9615a870047554f848c115a8760254f84b5415a8304ce63fa435c
0d5379a1419f27e3554303e13f9a6f77a386d1fe31b131005110ca81d961b5418c1167f19486d1d94f5c365a7e630000c9385879f192815488351d617b1600564355cf522e0408a4bc122f15a41d6228512851475221132fa46022e3d5df721549a43e9261b47f48ca81dd9095e42840a1e103010159a19f7565ab9fe379
a31d658c0821dd90e8fda2e475a2275460ff267b313646344446ff43342d443946422dff344437342d393838ff342d384237313144ff3044334437417d0031fe59a1602565abf03f75a7df730e63ab8019c474a83e9587af77a190cd91bc15fc74ca611669b4ca8100c11b76b4d962b111b111b541001de090b48c113f62
1d654f0599283bff5cd8e64dbf092c1a1f5ac245bf7140547385d2640028513759fe31fe39278f41535dd1e001c40c51769599385828512c0798bc1741343344c1c34a4897ef24c300824532ce554c52cf64c69f7532c564930be73f42cebf97cf23c4cf55b8ce9086cdd9cf65c5bc1564d854a1e1ff33ffd7414e22e6f0
bf9fe98172ad00877f01038172017bdf01010326c11d6532c546d62d6ede565dcd38475532c5b1a1ffffc74ddf5fdf0865c56025b8cbe107ef19ef2be5e0050075cf221b95cf2ae615b5fbcf90ec1cdf002be53e95f8dec6dfd8df24c3c5953bee1c15ff27ff00007037a4ca6fdc6f84efbf7252aa385818a1fcd74cd098
04221b1e180558105fc4c1f18245cdf50046dce4fff6fe9f750f0f210f330fc1f100cf55510f630f750f90317e61f001903c0104666284694351649fc73f9d77ad1100e73907818ef41b891a45124d057fbec5aea10fa03c4058fc909417507f182d4454fb210995118aa5309d9c7826d85ab3089a0f01001b52a531ef37
4722fe3f551bf965675f01551d607d5f48379516a25fdb579318108e330f21d10fe30fff3aa1001f0c1f001e1f301f421f541f661f781f8a1f9c1f00ae1fc01fd21fe41ff61f082f1a2f2c2f003e2f502f622f742f862fa4249081a32f02b52fff6b61d22fde2ff02f023f143f00263f383f4a3f5c3f6e3f803f923fa43f
00b63fc83fda3fec3ffe3f104f224f344f00464f584f7644f595794fb92c47a1a44f00b04fc24fd44fe64ff84f0a5f9809a502fea90139dc63b3bf54a8f438580373984a586a6300dc0fc1cf07c05d5f6f5fa505d5fe009a5fac5fbe5fd05fe25ff45f066f186f4155027f4963ca8186f14b6c09e50e001ec1766f826fb9
879571a26586ff98ff208a7cfab5dd6f4777395de8d28ed18845509a7ba0c4788781bd7001c77514c577e5b2a4eb781742738ea6ebea830084ca688eb1bd708f89c7726900109caa9fa99ef59644a4d3b092866e7100957102a1bfa380729b9d2da1f0d5f6bf04a2b3ad7f557c80c37fd57fe77f447800e3885da3cd656b
af56aa688544af56aa40a4b5b9af644a8b81198f2b8fff3ff100488f548f668f788f8a8f9c8fae8fc08f00d28fe48ff68f089f1a9f2c9f3e9f509f00629f749f869f989faa9fbc9fce9fe09f00f29f04af16af28af3aafe8af5eaf97af0082af57dfa6af2ddfcaaf9fdfeeae5ac104c2d14b6c0717be857132bf3ebfc0d7
8066b1a26fb46fc66f9cbf427fa60ae80aa205c9ab0f3feabc4ec149055acfe825d3a5c126d512b2cb4361663f654d6f63686171c249014272711c6bb7a9f9a17517c9947ab8f923e8ee7270102700321c9bc77180f0bc3fa17266b142f870e875b16eb04aa5320d2eff39934085afec12d8e7512d206e71fcd300003400
7b7730f179b9c821c821f0cf02d7ecc1000cdfede122dfd0d7d1d647df80d9350c0074dfabec17039bdf7d0ebedf2b08ab0b60ecc5250f644a0bf103bf000b17be0071411cef28ef50bf91757a7370b2857fa071ef727183efa00fb9e5f02655a90ab9e5e0265599cbedf9bf0bcf47c800dfef64cf76cf612f9acfaccfbe
cfd0cf00e2cfe7ff06df18dfe40f330f013fce13005d0f2b3fd11895dfc50f6c36b90f123e05472160135ce452614f64a03128b100c13392459c313a1f461da0315fe55ebff070bf82bfd12aa51f5540fa20ff013ea96b074040f81f22e16adabc3d36bf1fc1ef92a073034dc200352b352f00321ab68a11037a42440102
e3460320fd113975092c00320b560823c273e52830c4852741c50153e1659b645fe101382b4737c912455fe9d22fbaf3c62101833a4818b1bd70cad14b619d53003522ab5415b35a3975ab5416b35a73e500ab5430c1b6577535ab543141b6579c3522ab5419b35ac6253c641bb35adff5203c64dd412a632a4385235c2b
43c331d89d6f8943d413e13ff63fffff00e035cf51ec5130c131414361dd416061c1678a1428b1582f384ada33000015c93a48798a12548b219c319c3190fae67f26c22573e22e647475322f0071749c32a721a721c622c331c331dff26085b53b52cf51cf5118b100b4fd28d81581397037c4284043c1010100b571fb45
c17b41c3d5739c3587f13970e3e8fd0544d172a62460267bff4233324632393642ff2d383736302d3432ff35462d383042352dff42424433324132317f353531357d00feb5718cdff5c17bf03fd1773b53bf7b800319c4d078b072e07ff274297175350058542641ec51ec510972606160614361182ff230f1dd41001dec
84606190f2fc9c359df431753ceef0b1ff7b43b835fa685f33079b9c71a0247d112a612e44a7210039497d117d19835fa123bcf15fe18b21c418b128b1993a48a72193e798bc17413433a091c3c91839cf80930000358e9ed41cae9fc096fb458e95c0630be73f9e9ebff39f7f9473e514ae90e29d35afc19575356490e4
43c1ff33ffd7c01ec4b6f0bf41c9dd42ad00e34f0103dd4201d7af01010382919c358e95a2a6ac3e5d36b99d38c6258e950d81ffffc7a9afbbaf08c195dff514abe163bf75bfc1955fe500d19fa1ebf19fc096718557afecbc78af000dc5938554be22bf34bf8093217597be1c71cf83cf000070b9f4264f384f844b9f61
72aaf6c8747158b7a8a09804a1eb9de8052bf0bb941dd1003529d500a2ac40df52defb456bdf7ddf8fdf1dd10073e5addfbfdfd1df2a617d31fb410f1c01048d76e435c621c06f461f253755410066196351eac477599915911d614f1aa5aefddfa03c40b4cc90f0e7507f182d4454fb2109f1e18a55409d243826dbba0f
e8f6df01009a2255416e17ad227d1fb1eb5545e62f01559c30fc2fc707f1e6213fdeb7efe8102863cf512def3fefff6e915cef68ef007aef8cef9eefb0efc2efd4efe6eff8ef000aff1cff2eff40ff52ff64ff76ff88ff009affacffbeffd0ffe2ff0004ec51ffff02110fffc7312e0f3a0f4c0f5e0f700f00820f940fa6
0fb80fca0fdc0fee0f001f00121f241f361f481f5a1f6c1f7e1f901f40a21fb41fd2142e51d11fe31fffa37100002f0c2f1e2f302f422f542f662ff4d9fcb76205e139dc63b3bf54e9a894285f4398a6286a63001fdcc1cf07c0b92fcb2f01e50031def62f083f1a3f2c3f3e3f503f623f82743f555e4f2863edc1e2c1a7
3c0900b73e5961d23fde3f03d76271fe35e2cf40f4cfe64c5695394fa347952de82e6e8a2d6850f64ba02058e351deb0010823552157f252a447589f31deb0ea761647ca0084264811dbb3eb59235201696c6c067f057e51767394e050ee5600ca4162715e711b83dc42f76d89714cb508529f6493095f55d8501f5f315f
435f00ddb83f68b9734fa5c77fb27ac455a07f80b27a0095158fc01add81755f875fff007e91a45fb05fc25fd45fe65ff85f0a6f001c6f2e6f406f526f646f766f886f9a6f00ac6fbe6fd06fe26ff46f067f187f2a7f003c7f4e7f607f727f847f967f448fba7f00f37fde7fb3af028f89af268ffbaf4a8e091a1bb4a73c
07b73ee1418e8f9a8f001cb7c281fe3f104f224ff88f9e4f02ea15e8fed5c907ef3f469caa91a9a5c0b69f81a301a182a58a5111a84361ff7070756363696e6f08cd92a9a154a11cc78705d950a57399e594d6882344ce54a01027006f321cc771ddc0bc3f50a2e2c28142ccb8d181ca8095fe54ff46adbd1e4491fbcc9f
6615733d1aca4158b300030034d7478dc1d589240124014caf005ea748a168af49c17eaf2cb72db6a3af00dca992dcd0af07cc74d3f7afdade1abf2088d808eb48a582dfc01a1b5c8fc281050bb73e0d6fbf81bfa98fea48d64380cc82e14fcdbf48d1dfbffddf15c5f02a8225a915c5e082259927cd559f00679fa3983b
cfc09fd29fbefff69f08af001aaf2caf3eaf44df62af74af41ef90df005e0f2bf3badf880f2ef8f1af22efc9060416ef6f0e478ac4bbb1ae31ab34fd010084818bc3ee15f90197efa3edfd01bbb5e0ba8fcc8fde8f2e0a02ff554010ff154d1cb737ef3f407fb87f0f02a6a2fd03cf0415cf27cb03a9925d0591ff5c035a
f110840566fc5d024e26087f92ab058c9494e2f79d9501afb165cb44bbb13880881793996f15bbb92f0f17d32301830897189a512ab01d69e4e0235d05ee24111ef62a8405ee241ff62aab05ee24109391f927b7e5ee2421f62af905ee240122f62a2305ee24d6418a373cd5ee2410c4c18a3387139c135c881328dd9817
dbe83f31f3e13f531fffff008dc1f52112312f31939169318631c4c182d64167e7e48481b5ff951a3713002b00c9971879e7e254e8f1f90120f90156c6dcf61f05ab022ea744b7e2012fb444f9020401040123028a553cd264e1857e2215e8449a5100b45a08d90f7943939428409f91010100f8418405045b9d931853f9
05e4c17c40e3e8fda0941452030460267bff4144433839434135ff2d323742302d3435ff36372d384139342dff36463839424631307f303442417d00fef8418c3cd5045bf03f14577e23025b800319c41358f342235f35546c41b7e5049b248311160864693163e264e18631008cc28dc1c4c11842f521cfe1edc2f905fe
fac4b2a72db6b6b049ff429ec50056ba9fe3038e711c04dae18a318b140401961900dae1dae9c62f1d0319d1bbb1e8f1ee21e2848199971804012ab798bc410b3433e361c326f8959fc3635d0580d16e31fcf16f03768405d1650343e7053fe16ebf367fc264ab05577e257de0787f0475b7e5d1659f91ffffd70c1dfe20
96f0bffc6df905dd7e091ee0ba06fc6d2305d1655051ffffc720ec7ffe7f04753cd5577be1728f848f000475bbb5147ffdbb347f0376b4559a7f00fb8cbb7f0475d655638e318f438fc363706445a68e809f929f00007016d410831f951f8e6faa02aa05a8b741678712eb7098fdbbf9b805b110fe642ca1005d0538a5e5
7c4faf61ae84057aaf8caf009eaf2ca1ab05bcafceafe0af8a31f5210484016cec04246641152301034fa3ef0082079961c3e9a621f994ba29f6e5eeedb8be1f5d750cbfa03c40c39c90feffb750182d4454fb21290900c199609d810826ea8a1eb80205bf01f7f29961cbe70a02daefc0bb049965430f55f900590f24e7
00c67e0f40ed87feb85ee312313cbf4ebfffda21006bbf77bf89bf9bbfadbfbfbfd1bfe3bf00f5bf07cf19cf2bcf3dcf4fcf61cf73cf0085cf97cfa9cfbbcfcdcfdfcff1cf0fd4082f310edf20dfff24113ddf49df5bdf006ddf7fdf91dfa3dfb5dfc7dfd9dfebdf00fddf0fef21ef33ef45ef57ef69ef7bef008def9fef
b1efc3efe1e447f3e2ef50be00e6410fff1bff2dff3fff51ff63ff75fff803b910b214b139dc63b3bfd354a8a3f86e1398b5f86a633f00dcc1cf07c0c8ffdaff0010b540ae050f170f290f3b0f4d0f5f0f04710f830f556d1f6c636931f191b60c010950beee21e10fed0f12a73d310d1580f19f03aff51c9965481fb217
a4fde8143d3e3c3850052ba02f28f221a0305101322530270132a456281725232c2d56569a00843518112523fa29023222697b3c494f144e9446e344ef2000fd26d9113811a1415e53eb12064d9d450818afa367182f55e7202e2f402f522f00ec884e38c8433815d64fc14a14a5af4f80c14a4365245fcfea2061842f96
2fff00c161b32fbf2fd12fe32ff52f073f193f002b3f3d3f4f3f613f733f853f973fa93f00bb3fcd3fdf3ff13f034f154f274f394f004b4f5d4f6f4f814f934fa54f535fc94f00025fed4fc27f115f987f355f0a8f595e09232a84b60c07825ef0119d5fa95f002b87d1510d1f1f1f311f076fad1f11ba15e80db5c916bf
3f556cb961b875d0c56f907310719175131d7b436fff6666656553686f7000dc62b87163718351d95414a95f758269e194e5585481569b63701027006f321cc771ec90bc3f5f72e2d15142db88e051d950ef4249ff56ea431b44ad2a15cfb1ce21c0d812678300000134e6178351e45933d133d15b7f6d77005771777f58
918d7f3b873c86b27feb7900a1acdf7f169c83a3068fe9ae298f97a8c017bb577591afcfeae5116e5f000b026c8e0d7e8f908fb85ff918e513db5240f01fdc8f57a1ee8f0cbf2495f091f515a92495e091f599369d646f766f00b2684a9fcf6fe16fcdcf057f177f297f003b7f4d7f53af717f837f50bf9faf6ddf003ac3
c9af97df3dc8008f31bfd8d625bf0a7ede470de025c784bd01ba040ce10093512de3fde508e1a6bfb2bd0ce1ca85e0c95fdb5fed5f3dda11cf5540a8df703d0ad7a34a60b005455beae0d0129f249f369b03b862d26cd52ba1cf6cd21af6b10387168fe401024ff60369c193d575cc046cd277f6088e62de859b64f1c7ac
652501be81653bd4ca813897e7a269207ee5ca893edf26a332d183a6e8a921402820ac11b60109036cd51704271f0a4093d5170496e12207de851704291f0a04a79517042a1f0a08e5170431f196074432d517042d1f0a4ba517042c1f060496e3abe35c97e32fe1091ff5e340c31be13f62efffff2fe1ac113b014096e1
7501920131f1e901cc0167f6b4709351c4cfa4ea46e30000c9a6e80579f6b254f7c108e108e16596ebc6242ed5de822ed014a7922fdd1408e20013d113d132d2769176914ba2f055a7f259151124a92100b469d80fa21336a2642840ae610101212193d5c02d2bac63412308e5f391a510e8fdf871e43d2212d460267b31
34ff3543463841392d35ff3442382d34454543ff2d383642452d3932ff35383044463646301f33427d00fe21214ba52d2be3f03f3d27a7f32b2b8019c4003c281c224c2f5e249511a795c4f492e1191631349201001b3e3431f18bb606e901001d5834cc01fc9208e509a4ff670209df27becd45ff90d5e22849ac0ced01
712fd4e9b196019ae413d1a5e9e9b100e9b9efff30d328a1ca81f7c1c5019351f199a6e813d1398798bc413405330c41c335c8a46fec336cd5fa3ec040cc1a4f2c4693d5fa352c13e73f020a4ebf5f4feb34de85804e4e4da14fe42d45a795643684ae61ffffd74c2cce2f66f0bfac6949f2004fff6b010349f201435f01
03ee310008e5fa350e5618eec9d6254d32d5fa350e7921ffffc7155f275f2d454ba502804be1cf5fe15f2d45ca853d4f0c9b005d4f2c46dd25c34f586ce44f7965ff2500c05e8e5fa05fec338d15036edd6fef6f0700007025a492efa4efb73fdd8221aa6278e011c4571450980c9b08980105c130274489716cd595750e
5cac7f00be7e93d5d77fe97ffb7f8971de85198f402b8f3d8f96011e0193d17bbc044be2004ce932d12c1fb2bf91d7c231d2b9cff1805674e3f905c5fdbdcdef8645698fa0eb3c40207c905c9750182d9f4454fb21095d91c2309d2090d81e014a677b88628f0106d2c23140dab732a2e9bf1d9bc23552df5508e00068df
33b75d968ddf4a675b98ce033b0104998fab8fff0301c88fd48fe68ff88f000a9f1c9f2e9f409f529f649f769f889f009a9fac9fbe9fd09fe29ff49f06af18af002aaf3caf4eaf6ca4f3056faf49ec33e1009aafa6afb8afcaafdcafeeaf00bf12bf0024bf36bf48bf5abf6cbf7ebf90bfa2bf00b4bfc6bfd8bfeabffcbf
0ecf20cf3ec40875013dcf4fcfff0f216ccf78cf8acf809ccfaecfc0cfd2cf608923127181393fdc63b3bf54a800d8cbe3fd9812d86a6300dcc1cf0307c025df37df6d859d7e62df74df4086df98dfaadfbcdfcedfe0df55caef10ce0392014e7113ec09ad8ec5013eef004aef6f7761f16ae54e7f607f52fcc23548a5ef
0ff701dde89a0e99085062fb11a08cf84f0185f0018ff58df75e02c5a4b3f81782f35626b36a00842292e81182f357098ff269d80c721f00711ebd160c244c005a0636f161f1ca1100872348f2631df511b855be3fd03375ff015544008bff9dffafff4968ab0825230061f5332f1e2a71750c2f1e2a6c35812f102cca49
31e1fff3ffffea31100f1c0f002e0f400f520f640f760f880f9a0fac0f00be0fd00fe20ff40f061f181f2a1f3c1f004e1f601f721f841f961fa81fba1fcc1f00de1ff01f022fb02f262f5f2f4a2f1f5f206e2ff54f922f675fb62e2c875413ec0107ad8e4df1fa2f063f88572e316aefa07cef8eef643f0aff6e8ae86a85
c902738f3fb23c16411555224fed436d41f8ee456d437f4644656361660839421551c0411c33377179bc45df39e594423823b06ec0401027006f321cc7714470bc3fbc42e22e314238683d313630e7f53dff0144728a4a91ce469f720867f1bd36f1c4530003003443f7f461413990a190a1b84f00ca47b441d44fb561ea
4f985799560f5f004859f97c3c5f736cdb73635f418e865f20ef786f8bb445e97f2cca2dc82f2e31050b7fae0ddb5fed5f153f56f842f38038324dff396faf714b6f648f8165f02aeec5a98165e0eec599936dc13f00d33f0f48a76f2c4f3e4f25af624f744f00864f984faa4fab7fce4fe04fa88ff77f00c5af9293218f
efaf95985d5f898f30b6147d8fd6ae4765b02e4ca41ae117e40064b1419387b15ac560b1fe8f0a9d4ba5c064b1263f383f4a3f95aa699f5540ff58d0d8299f260e407f40f822e16adabc01b648839f896f91a3031542c4a58ff99fdac4a27e4e910387e7b40100daa7c60135b50102bbc6038dcca8c6cfc60195a8c6e3c6
01974ca8c6f7c60164a8c60bd601c19110eba5cd9cc4a233d608eb3261f5f83494d4b90b43011b616593a427613800efb7ff3964b12761276996af7e738aa11183feb8060185f02fd084c5d3c4a520d3d46ba1ded7eba5d3d431dbda61f522d3d432dbdaff65d3d433dbda60b520d3d48471fbd78aa5d3d436dbdaa37522
d3d435dbd6eeb303c35cefb387b1d8c5ef4dc39893e13fbabfffff0087b1dad16ba114e131e14ee18471a5e10288e1674e94f0211caffcbaf02164b115c9feb8794e92544fa160b160b100c26643a686a53b6287b187b1ff62dad120dad160b26ba16ba18aa213b3f4a372644d35dab215cdf4060100b4c1a8d90f5ef3ff
3428400b41010100ddf1eba5e9fb0943fdf360b54b7161f0e3e8fdc9b4f9f26aa460267bff4241354233323039ff2d304238362d3438ff37302d393833342dff38454232363546437f444236427d00feddf18ca375e9fbf03ff9f7dab5e9f9800319c4f8f8d8f2080f1a0451f1ff656480d4eab116ed044ee1001bfa0430
8471f362f461a5e1001d141488e1f8547260b5617462c0d4d4f4ff7ba54e8286a8bd5c0ffc816f7187a44191fbd1f2b4006ba1fdb941914199abdf88a380712761884fa1d3d1f02199feb86ba19657982fbc413433c811c38d98014f00a813c4a5b61e989cd61fe816eba5b61516e8e3e73fc61ebf1b2fa7143b65003c2e
0a2d5d2fe915ff650bd196510b4167ffffd7849e8c36f0bf0949191a4e92bbcf0103f922bacf79c080aa1104667e10c62a70be21b609496a0c4e92a7cf0101cfcfe1cff3cf05df04b3c5703201763f883f9a3fac3fbe3fe015d7aa118aa5b6153501ffffc720d12fe32fb225a3753c2be15f4f714f00b2252765f91f696b
192fb126dab57f2f00e84ca02fb225bb05504e4a3f5c3fa8137049f5934e6d5f7f5f0000707d7410eabffcbf731f2592aaf258dad1544712d02098696b6568057d10e314196100c4a52565ca2c3c6f4e6eeba5676f796f408b6f19615595a96fbb6fcd6f6e98d81080df92df066f891ea9f2580e11baa00069d18775387d
7471c4a5807f927fe8a800af7fc17f5298de7ff07f1b980d8f1f8880c4a3747160b53c8f1f8f87a86b8fff01617f8f95e69a8fac8efbd1dad1eba100fbd193b4fd538ff5a8b58aa1e8efc6bd0058755475e2b58af13871e6544c7964b1e01dc56e9925cf4225f96fa03c40fab05c90b79750182d4454a7fb2109b8915870
9de8a82688d74a0b78f26f015ea258718af124206ca77219b2a7359faaaf5560b0c0af0047b7b896e5afda47b6988ae34303f68f00089ebfd1239f2f9f419f539f659f779f00899f9b9fad9fbf9fd19fe39ff59f07af0019af2baf3daf4faf61af73af85af97af20a9af89e414e1c6afd8afff2971f5af0001bf13bf25bf
37bf49bf5bbf6dbf7fbf0091bfa3bfb5bfc7bfd9bfebbffdbf0fcf0021cf33cf45cf57cf69cf7bcf89e40af10498cfaacfffcbf1c7cfd3cfe5cff7cfc009df1bdf2ddff069fd62017139dc9f63b3bf54a85bd826f398fe6dd86a6300dcc1cf0701c080df92dffd652d6ebddfcfdfe1df20f3df05ef17ef29ef3bef5525ff
511308f801de516eec09089e545199efa5ef00ff577721c5e5de5ff05fd1fc587500ffa46af75cdde8f50ef40850bdfba088e7f8aa01e0f001eaf5e8f7b902a4620e0817d7433879e317008474281111d743b209eaf269331ca704c11f02b4070e0e081151a700b50691f17721004841c2a3a3f2be1d48414845547f2f33
02d0ff559f00e6fff8ff0a0f67f80618008023e3658e2f792a0165672f792a313504dc2fe38a34390f4b0f6b0197516b0f00770f890f9b0fad0fbf0fd10fe30ff50f00071f191f2b1f3d1f4f1f611f731f851f00971fa91fbb1fcd1fdf1ff11f032f152f00272f392f4b2f5d2f0b3f812fba2fa52f407a5fc92f505fed2f
c25f113e356574022a3c07089ea8f1553f613f6187893140c5efd7efe9efbf3f65fffe6ae80c7505c9037f3f0d4c714170557d4f4853f4c841495512d54b4465636f1f7261746f72944270511b51a0c9819134ac3917553a49949d3823fc0b7e0580102700321cc74d71a370bc3f17528931420288fc9831913029729b84
3a6bff394b9ca5b647514a037df591f11f632033a1f4c9819c3900c181c185175f618392812f5f1071455f00f357f4566a5fa359588c975fce6c3a8300be5fa08ee15f4e88ce8b0f55488fb5aa2936233f89310b246e0d366f486f00703fb1f89df39332a8ff946f0e81a66f54c38fdc65f0b3d5a9dc65e0b3d50199ee6d
1c4f2e4f6a48027f874f994f0084afbd4fcf4fe14ff34f055f0a8f295f003b5f079f568f24bff193808f4ebff498a0b85fe88f8fb6dc8f35be47c4b037007f6431312e34c3b14b31e4b3b5c5bfb1005d9f699dc3b18265813f933fa53ff4aafec89f55403cbb83706f7f77f33f40b0055ba1c091d0ca6fdc6fee6b037042
23b52bb458af23b21a6eb1038d46c401050206d60320a14ab52cac23b22ed64108464271b55344a8a764450176610965f2a48261384ec75a4935c5826908f5af0083e9a1835dc86101e0f07bd1102a31c0d323b5ced439d6da4ab5ced4113ad6da71b5ced43bd6da98b5ced4113cd6dabfb5ced43dd6dae9a5ced410aa71
4de70285ced43ed6d64dc362c3c15c4ec3e6b1c0efec33f793e13f0619cfffffe6b17bd1f2d10fe12ce11049e166e1a0e1aa71676eb44b317baf5c5bcafdb30000c95dc8796eb20154aea1bfb1bfb11d76a2a6e5a571b204510598b22f94f4bfb2caa1caa1e9a22113aef40282a8355ed215c8f46101cb00b420b80f59f3
5a4428400666410101d8f14ab5e4fb6443f8f318bfb5aa715cf0e8fd6744f4f2c9a4ff60267b3131453044ff4533442d38303437ff2d343434312d4231ff35352d3031343230ff454644423745337d6300fed8f10285e4fbf03ff4f71c5ed3e2fb8019c4f3f8d3f2030f2015044cf198b57bd449c116e80449e183001bf5
0466e152725371a0e100c11d0f14aa72b471bfb5c0741220ff28f5a24f8147ae9f7f754c2aaa2b7471e2a400a0912a3151c4caa15cc9a091a099a6df40e3a302818261aea1ced14b31995dc87ccaa1f15798bc413433c31101c3ec985c4fa31323b5b11ef79cd11fb0e3164ab5b115e3e3e73fc11ebf00162fa21471b537
2e052d582fe41598b53964ee546641ffffd7e39ee736d3f0bf644900d20006df01031a00d201fa2f0103a511bfb5b11580c526cfbe80b6dc1de9a5b1153001ff83ffc7cc2fde2fe4150285372be100863f983fe4158265f41fc46b142fe3160094057a2f0f4c9b2f3045b605773e453fc0573fa31344f5ba3e944fa64f00
004170ff7449cf5bcf6e1f14b2aa19584897f17b37cb2098c46bc06805781000de14405123b54c55c52c635f755e4ab5008e5fa05fb25f405171b5d05fe25ff45f0887e17bd3309e04e5b203c9e9a1e3ef00699f48b77911899986d10d549ad9bc9570b49d84cf3d25206fa03c40d74cfd90137750182d4454fb53210914
7179109d47b826fe3a043268196f01bda279119197e972a09f08d46b791509bf55bfb01fbfea8714768044bf0147127885e3f2d1506f626fff00bad17f6f8b6f9d6faf6fc16fd36fe56f00f76f097f1b7f2d7f3f7f517f637f757f00877f997fab7fbd7fcf7fe17ff37f058f1023840fe1228f348fffeab1518f5d8f006f
8f818f938fa58fb78fc98fdb8fed8f00ff8f119f239f359f479f599f6b9f7d9f008f9fa19fb39fc59fd79ff5942ce1f49f0206afffc6f123af2faf41af53af65afe077af89af1769dae2286139dc634fb3bf54a8b7a882c398c9a8ff6a6300dcc1cf07c000dcafeeaf2465545e19bf2bbf3dbf4fbf1061bf73bf85bf97bf
5581cf85e349e1040551cabc09646ed3f1f5bf01cf2657001de121c5055f175f2ddc79155ccfc6c752b8ade851ee50e85019dba043d84406e13cd00146d544d715e2a46ad8b11739d30d066a4a008449c8110839d30ee946d2698fec29ff28fe74f600961403e011e6edc14cc181f13e03ffc2401afdacf16f35751f2113
2cdf55fbd00042df54df66df004862e8dcf34cc5eaff00d5fae7d5c3ffd5fa2315380fe39a00110498dfaadfffa111c7dfd3dfe5dff7df0009ef1bef2def3fef51ef63ef75ef87ef0099efabefbdefcfefe1eff3ef05ff17ff0029ff3bff4dff5fff71ff83ff95ffa7ff00b9ff670fddff160f010fd62f250fac2f48490f
1e3f6d0e3e3e34cabc07646e0004d1b10fbd0f3f37e50121cf33cf45cfa81b1fc1cf256ae82165c92a6f3f00691ccd11cc25d91fa4232421a52504d18e3428447279f012cc2177211c50ea0728597325961994f90823674efe7720102700321cc77126f940bc3f7322e50142ef38f401feed000ea341b14e70a9ff4eb814
4549b92e123973edc17b33000034fac7a94100f809478147816f2f81276b218b2f6c4100a12f4f375036c62fff29ae5cf32f2a4c0090531a3ff65e3d3fa458246b6b259e5f58e39a0051820f000b803e0d923f00a43fcc0f0dd8f9c3ef0204dff03f6451a8024f196f3845f0a5a5a93845e002a5a5994a4d781f8a1fc618
5e4fe31f00f51fda7f192f2b2f3d2f4f2f612f605f00852f972f5d6fac5f7a8f4773d65fa48f404a78143f3e6fe586326f8b8e472f3400de31d1b1ceb41991a701303311a5159100b36fbf6d1991de35dd0fef0f011f4a8afe1e7f55407a84a3cc7affebf33f40f822e16a43dabcb686387f404f468303cc12d279852bae
7f79821a07710391169c9401025ca6037671a085827c04798284a608a212f235af14fe77c0152501d231654884de3138a497b619208b95de394b8f33533f8183b398bdd1004d34cab116b3798524b40a512fb7a0850224b4432cbaf23524b4d1b12fb7d3652024b468c12fb7159524b4462cba3f850024b4a3b1a3b75855
24b43891a3b3a39362b8935ca4933238af9ce83f4d731be13f6f9fffff9cc111a10a512065b144912a71bcb1f6b5670774a701b8d17fb19a53930000c9b39879020772540481159115917946f8763b8512f2322eddc4d3622feac4159220818420813f821304d458520415b4a2152c1ed4bdd100b476880fafc3b6141b28
40c21101012ed1a0853adb60c0134ed315950051b2c0e8fd7e94fc4ad21f8460267b433132ff39303942312d4137ff37412d344245452dff384431372d363935ff30413134363846318f347d00fe2ed158553adbf0713f4ad7b4a338db8019c449d88029d259df6bd4a2c1d365d1a49f91160c3ee42a71001b4be4bcb1a8
42a941063891001d65e4a3b20a5115951654ffd00795a354560e4effaa08b6818bae15e001713c84f661a3b1a7942081b299f66100f669fcaf3d833551de31048124b1a701f199b39820814d3798bc4134053319f1c34278b81ff9e3798507fec04d7c27ff39f6a08507f539c3e73f0217febf6cfff8e4f2358dfe5bfdae
ffe43af5d365644a34c211ffffd74c397e8f86f0bfc01956a2005caf6b010356a201500f0103fbe100159507f51b06259ed68632fd3f8507f50e86d1ffffc7220f340f3af55855028dfbe1dc0fee0f3af5de354aff204b006aff39f6ead5d0ff651cf1ff86150ce500cd0e9b0fad0ff9e39ac5101eea1ffc1f0700007032
549f9fb19fc4efdac221aa6f28edc1d107210098204b1c480105cee034f496217985a2251b0cb92f00cb2ea085e42ff62f083f9621f235263f40383f4a3fa3b18131a081886c043b920059993f8139cfbf6f9e87cfe1df69dca1806324f0a912750a7dda9f93f5763fa0e93c13c6813490694750182d9f4454fb210913c1
cfe09d229d8826541a88386f3f011382cfe140e7673f52f66f2a4bcfe55f8f55159000758f406713c89c8f591568486ee348b104a63fb83fffe7e1d53fe13ff33f054f00174f294f3b4f4d4f5f4f714f834f954f00a74fb94fcb4fdd4fef4f015f135f255f80375f495f5b5f795465b1785f8a5fff004091a75fb35fc55f
d75fe95ffb5f0d6f001f6f316f436f556f676f796f8b6f9d6f00af6fc16fd36fe56ff76f097f1b7f2d7f104b7444914a7f5c7fff1cd1797f857f00977fa97fbb7fcd7fdf7f6d397a327e317f39dc63b3bf54a80d88fad893981f886a6300dcc107cf07c0328f448f7a35aa2e6f8f80818f938fa58fb78fc98fdb8fed8f55
20d79f6ee349e179e1209c085e7e29d1004b9f579f77e76ea177955b2f6d2f83ac90cfe5b29f1ca70e8de8a7bea6b850226faba099a85cb192a0019ca59aa78a6bb2a4c0a8178fa363d6c01a0045849f98118fa364b99ca269e5bc007fcf7ececac619d459b067b643a16ea100d7c194d355a270cd02d1c505cbefdde302
82af5551b098afaaafbcaf5618b8b80032d36ea540df2bda7e2519df2bda79e5e08edf67b675e17e2581e4304addff8f38df0942a202531f5472d5ab6f70e156e1eeaf0200bffff7e11dbf29bf3bbf4dbf5fbf0071bf83bf95bfa7bfb9bfcbbfddbfefbf0001cf13cf25cf37cf49cf5bcf6dcf7fcf0091cfa3cfb5cfc7cf
d9cfebcffdcf0fdf00bddf33df6cdf57df4f0f7bdf250f9fdff8970fc3dfd5db64ac065f2bff077d478c6f8de2fe97d064a0209147f8df5ee107005e7e5aa12aef36efb8075ee1779f899f509b9f94ef17af7b3ae87735c9803f013fe2ec46f1450552ff1d039df11e05fc0221adf845737072657323736f69f24501f0f1
1c63e77e2994ecf50ff99472e823032ef0f010bf2700321cc7719a20bcc13fecf25ee1dd016ea5dcd4eb7bffe09de613014293383f50020d7ab80943a117130700003450a74a2171e99d519d5100e8fffaf7e4f1040f08211a0fc807c906003f0f78094f3c6c0fc61c3133930f973e00b60f4538c53be4f53f3f397a2091
081f0b000a5e7e0d2e1f401f45ef63a8004fa368e25aaf8c1f05319e1fba3fd41555f0fb75a9d415e0fb7599e61d00f1ef03ff3ff8fa1f5cff6eff7b5f92ff00a4ffb6ffc8ffdaff013ffeff100ffe3f004d3f1b6fe843773f456feb488d0fdf3ff08666d33f2c6edd0f54eb51f9ff7f480fb1429e2b435f53858ea3eb04
114977140027912494ba6120e1fe6367757441544f00604dba617a1556ef68ef7aefeb5abf4fff5540373f90058d9dbf004040b0055bbb70d0ff3f40f707192a3b4c49e9cb17c374d9dd1fe8520345f2d21a652b4f5f1a621aa8410364166074010220860317514165235c041a624886081bf26ea528f49f5739f525016e
1165e9547a113868772ff9204f757a19ec5fd423e05183777813b14292a04a2644da831a65e8844bf08a444165e8844cf08a6ea5e8844df08a445525e8844ef08a7445e8844ff08a04e055e88451f08af925e8840851f3830467737c735c68730071da9fd543ee431be13f337fffff0071ef810c91402991469163918091
08519d9167a8447020e1725f757a17730000c977780579a84254a551744174411526995624dc558e122ea1a455222faea4744208c151c151e05213c8a4f9227de578825915e2a413b100b417680f73a3362ff428403bf10101f2a14165c0feab39f312b37445a12176a0e8fdf83cf40eb2c05460267b3841ff4335303336
392d35ff4343302d34364231ff2d393734422d4235ff31313137384344301f36357d00fef2a1f925feabe3f03f0eb77883fcab8019c4000db8eda21dbf2fb466a1552595846371191602c46391001b0fc480914922044a2108521d29c49d91d8627445dcd4ff1821536efa5a5443ffa9710803925d35b14170dd54637f75
7fb58f6762aa78c894b1a1ae71f4d77598bc14d57f0520bf803bf49fc11a65abc5f5d77dc4cf00d6cc4165edcfffcf11df9fc18e152fdf0441df53df71d3249741f3816cc4c1510077c997419749c08fde53d6217a11a55184969120e19978c8c151ae71c473992fbc41343328e1c3e34831ff0008e31a6516eeee4c36ef
48e6416516e509f6c57527edbf7bef07e48e159cee006aedbdefcfe55525208175dfd217306683f0bf41e91a8221f2248d1a8201065fff01030ae1744516e579d6c66e00776641ede05516e5b3c3d31033ff45fff808e3f92516e5f8c5925f2c03f9e2ebfffdffcfe57a1559efbc1b0079efcee6aeb5dfef740c00ffcfe5
d0b500dcfeaaffbcff08e35ea51f0ef90f0b1f101f43ef814161294c04ff621d79e05100fd9f604f3f67ded18049a0816cc4b489c0b345ab4d9e7fa2e5dc78e234a03cf43e412d69902d2750182d444f54fb21093e41ded09d3e68112617ea7fd979de01b452ded1884720e022974fee1bded5006f557440166f00e1372e
263b6f9b672c281f430c916a1f027c1fffabd1991fa51fb71fc91fdb1f00ed1fff1f112f232f352f472f592f6b2f007d2f8f2fa12fb32fc52fd72fe92ffb2f400d3f1f3f3d3429913c3f4e3fff0471006b3f773f893f9b3fad3fbf3fd13fe33f00f53f074f194f2b4f3d4f4f4f614f734f00854f974fa94fbb4fcd4fdf4f
f14f0f540846910e5f205fffe0a13d5f495f5b5f806d5f7f5f915fa35fb55983d2bb01393fdc63b3bf54a8d1589c73fd98e3586a6300dcc1cf0307c0f65f086f83d5b3ce336f456f40576f696f7b6f8d6f9f6fb16f559b7f10b1d3639164c1e46c097e1e96910f7f001b7f85c732813b7564cf76cf478cded510767fe077
d256e174e96b9e6a9827c222d7d7a05d88209123000160855e878a2f92a4848817200327b6cf0a00458463781120032899608269a99c0043af42ae8ea6dda41d902b96078132810060c158b3198234ad60c1d4f5dadf3bc312468f5515905c8f556c97798fd9a900769ef6a3328504bfefaa87c5ddafefaa403dc552bffd
4a1ac1b28fc48fff231100e18fed8fff8f119f239f359f479f599f006b9f7d9f8f9fa19fb39fc59fd79fe99f00fb9f0daf1faf31af43af55af67af79af008baf9dafafafc1afd3af81bff7af30bf001bbff0df3fbfc6df63bf38ef87be83c10491f1a0bc077e1e1e81cbbfd7bf8ff700f3b9437f557f677f3dcf116e60c5
2f06002fff83cce7c1b565f3cf5f833ed16085fd164bdb4578747261457f7370726573736f0ad284b56191d11c04c722c98dd5b0c994f213c82381fe91d010270032171cc7711d00bc55108fd0ffb1045ad56131341487cdf112c9613161310089df9bd785d1a5df86f1bbdf69e7c70800e2df1be7af0c0def44fc910334
edf50f4056efa409251b85d59f0f15c642e8b8fc0ec107c069f290ed9271ff1843ac9f6d09bbbc4bee72a0b15199bfffb10b9aee010dacefbeefe6bf2788138309c21e8fa00aff65011cff1a1fd505f01765a90ad505e017659964fd92cfa4cfe0c80078fffdcf0fdffe2f33df45df57df69df007bdf610f9fdfb1df648f
ad0f9e3f6b2300d70fc83f6e282eefa93a044b331cac3f170000473e4052f5e4eb61e864003d41c1b15e432b553311d71fe31d3d41c0f8e5f7bf09cf1bcf6e3a422f5540ffd0a0de52627f0740af40b0055b1b50d0db35e8925d2ed85bff6b3203e6c29d352bb4d22f9d321a2b210395c0440105028056039a21c435a62c
9d32a8564108bcc23285c9c42237dac501ece109656c34f8e138c847d0c9af45f8e9886f3f3403633183d748d78152205300a9143a639d3548642e315367c435486410685153673285486456506a34e548641157506a3315486458506a63354864115a506a59054864595066c743dc43c15cc84360413a7f2653eb73e13f
06934fffff60414f612e316851a66110c361e0611a71fd61672b24c1b1f52f5cd54a77430000c9d748792b22015428313311331193f61c365f353282092e018434e22f0e8433124431443142633213288459021ec5d85215428496d78100b49a380fd373d0c4280d40dcc101015281c4355e8bdac330728333152401d670
e8fda2446e82fe433460267b45343433ff334543312d373434ff392d343941412d39ff3733382d41444333ff3443463644443731c77d00fe528159055e8bf03f386e87d8535c8b8019c46d884d82007d8f8f84c67134e5f554c341a4f1a4f106c361001b6f94e061ccf2cdf11a7183001d8994fd617c1233158914d8ff16
987571fa464cb1ffd02b3420e92fbb710060341a21a0b1cb444431d6491a211a2980206f61333601f8e128314861c1b19938d74844311e4798bc41c3803da001c36628d2cf1da39d352bae712c4bafb05da6c4352ba55d73e73f3baebf0090af1ca40cf5b1ae7fadd2af5ea534e539641b44dcc1ffffd75d2eb336d3f0bf
dac97a5200805f01031a7a520174bf01031fa133152ba5803fb6494efa3656ad63352ba5aa81ff83ffc746bf58bf5ea55905b1abe10000cf12cf5ea5f8e56eaf3af487af56ad000e95f4af89cc15bf67c53095f1bebfbfc0d1bf1da3be7534ce0edf20df000041703304c34fd54fe89f0bf2aa93d8481181f5b745b09889
cb3c5805f2900058a4bad19d35c6d53fbcdddfefdec4350008ef1aef2cefbad10cf54aef5cef6eef1001714f61c431ac1c045f427d496331005d7fe31fc237f3910329006187d414696036252e2dfe4fb7a59aefa03c691dfd908df750182d4454fb5321094211f3909dc138261b4a043c5893ef013732f3910b2740021a
2f084efbf395833f553310993f2047421680be3f1e478cf8ff632e31caefdcefff000ba1f9ef05ff17ff29ff3bff4dff5fff0071ff83ff95ffa7ffb9ffcbffddffefff00010f130f250f370f490f5b0f6d0f7f0f109d0468519c0fae0fff6441cb0fd70f00e90ffb0f0d1f1f1f311f431f551f671f00791f8b1f9d1faf1f
c11fd31fe51ff71f00092f1b2f2d2f3f2f512f6f24a6616e2f02802fff40819d2fa92fbb2fcd2fdf2fe0f12f033f91e94052d0c139dc634fb3bf54a83138fc43984338ff6a6300dcc1cf07c000563f683f7a35cede933fa53fb73fc93f10db3fed3fff3f114f55fb4f9203c361049d91444c08deee4d816f4f7b4f9b9700
92519b457fdf91dfa75cf395d64f405752323de8cb6eca6850935ba0bd58448061b65001c055be578f62a4e458b117b3538786e4ca0084c3481108b3538869c05269097ca37fa27eee760010a47d608b6667519251fb71b883795240947d2681e9b5ef9f9b93a65f55756000bc5fce5fe05f3d58dc6856839255648f004f
8a98653d8f4f8a9d95b28f8b669991fc9865a594d12e9924a3b9ffc94bbbb875a8127043993a44417a91126f246fff1ba100416f4d6f5f6f716f836f956fa76fb96f00cb6fdd6fef6f017f137f257f377f497f005b7f6d7f7f7f917fa37fb57fc77fd97f00eb7ffd7f0f8f218f338fe18f578f908f007b8f73bf9f8f49bf
c38fbbbfe78ff98bfff0ebac77f6f44347ffa9486e2a35e8a1f3124441591c9f829107deee7e514e9f005a9f6c9782919b4fad4fbf4fb89f3b5f2a9feae87735c9a4ef3f06ac6aa18069b576af41b3c1a142b57e51d1a8572365748da269b114b11c8797a5999410b533a99496982327de14b010bf2700321cc771b9d0bc
c13f10b2829101c192550094b212ff423e589f814c85943f1508666e67b867513bc307000034745769d19599c101c101000cbf1eb708b128bf6a213ebfecb7edb60063bf9cb96eec90bfeacc50e3b7bfb6ee40dabf64e8e4eb08b55eef5d2a5a29cf0a82910a40ce0d52cf64cf699f87580073538c927e5fb0cf24e1c2cf
d9eff8c555f07735a9f8c5e07735990add0015af27af63a81edf80af92af9a0fb6af00c8afdaafecaffeaf20ef22bf34bf1dff006cef3a1f070396ef641f0a08b1bffeeff0a516f2ef4b1e01cf54179950ffa1f0b5a44aa04351bf9333ab0f1447da105b009bc44b414844d91144911d238b2593f10073ff7ffdd9119ec5
7a9f8c9f9e9f0a1afedeff554058d0d8299fff260e4040503f5e1847a08ed0e6cff8cf0adb0369a2d239152b6e0f39121ac7f10397167f2401023f360336016015420c0439126736083fa292554ca4be075da5250192c16508149ec138872753a9206e259ec90b1ff3d3ff01839628376142b6505c45f4f933391507445d
0f4a44601507445e0f4a925507445f0f4a44a5950744600f4a93f50744610f4a44ff050744630f4a18e50744620f460086239b230e418a201f21f94fe5230d031be13f522fffff1f210e412b41404841654182419f41d941bc4167c7f4704491910f942a36230000c996280579c7f254c40193f193f139d6b80624fb05b2
c22ec054a5922fcd5493f208e001e001ff0213e75418e2a195973259150164376100b436180f92533653a428405fa1010111616015c01d6b5da3316393f5c0d19550e8fdf861242d62df0460267b3731ff4641393137362d34ff3546332d34383243ff2d393846432d3533ff41423335373332331f36467d00fe116118e5
1d6be3f03f2d6797331b6b8019c4002c680c623c6f4e648551a595b4348221191621748241001b2e749f4168d20c69d1d941001d4874bc41f71293f5fe0094e3d19595cb19f5ff4d84fa66f513ee46034a71d904b6f12f418a24e001952900b6f1b6f9df3fda03f5d19ec1c401b541e24491999628e001eab798bc410b34
33fc71c3020855afdc73391580ea7e0d0c0a8f1c866015ea751c53e7053ffa7ebf4f8fdb74b2c5708e3e8dc8918f1d85a59564e7b45fa1ffff99d7f9fee096f0bf5da9393200d63f3f0103393201339f010300ea8193f5ea75fe86e51e9616158dff051cea756961ffffc7059f179f1d850418e5708be1bf9fd19f1d859e
c52d8f00e0cb4d8f25a6cd65b38f48acd48f26a500ef65b09e7e9f909fdc737d55f39ecdaf0edfaf000070f2d4822f942fa77f42a6f2aa52b8d051b497049098e0cb02dcc805b170178479b1391585b5fe8c009cbfaebe6015c7bfd9bfebbf79b1b2c54009cf1bcf2dcf2f41ef4346fe041e22003c29ff011c5f7fff5e17
b2719ff9bf318046b4d339d2f5cafdbd2f768559cfa0eb3c4010bc904cd750182d9f4454fb21094dd1b2709d225d182637aa6bc852cf01d302b27140a7f7ffd2b6ff0ddbb2751f1f5593f000351f00f74dd65a1f3aa74bd846f32b410489cf9bcffff331b8cfc4cfd6cfe8cf00facf0cdf1edf30df42df54df66df78df00
8adf9cdfaedfc0dfd2dfe4dff6df08ef801aef2cef3eef5ce448415bef6defff0023218aef96efa8efbaefccefdeeff0ef0002ff14ff26ff38ff4aff5cff6eff80ff0092ffa4ffb6ffc8ffdaffecfffeff100f102e0465412d0f3f0fffff515c0f680f007a0f8c0f9e0fb00fc20f50c95dc261c17f39dc63b3bf54a8f008
fabb239802186a6300dcc107cf07c0151f271f5dc58dbe521f80641f761f881f9a1fac1fbe1fd01f5520ba2f012382413eb1032c099dceb541002e2f3a2f5fb7be515a253ebf50bf663c90b275952fff27f10de88a4e89485022523ba07c383f417530017f357d378a4e42a4a3381772334666a3aa004584822811723347
497f3269c84c00625f615ead56fc543c404a462631be5100ba5177633832535de551a895ae7f5a7302653f5534407b3f8d3f9f3f39a89b48001563ab85236f0e6a61b5fc5f0e6a5c7520716f1c0a3971d13fe33ffff7a1004f000c4f1e4f304f424f544f664f784f8a4f009c4fae4fc04fd24fe44ff64f085f1a5f002c5f
3e5f505f625f745f865f985faa5f00bc5fce5fe05ff25fa06f166f4f6f3a6f400f9f5e6fe58f826f579fa66e62779402032c079dce3d31ea6ff66f78971e71405a2f6c2f7e2f547ffa2f5ecae85ac505c963cf3fa27c06810595128fdd83f05d81de852d716d88576869704770656429820591b0811c23772861b9ac85cf
7994327823a0aeb0807f102700321cc77136b093bc3fac821e714228a8c3a4a7ff5acf837342fc488a7ff7c85f893880fc26310eb4930000343337e6a1317980e10080e1a88fba87a481c48fa5a1da8f8897008996ff8f3899ebbc2c9f63accdb3539f8033ce769fe1b861cba485dbbf1c0a6314b86f1e710bb99e0dcb9f
dd9f057f004638323328723d3f29afa1b13baf56cfaa71a5f0de05a971a5e0de05990083adb17fc37fff7897af1c8f2e8f17ef00528f648f768f888f9a8f9dbfbe8fd08f009acfe9bfb7ef84d313cfe1ef87d84d9f507bcf22f66fcfc8ee4757f064d1c208012e2d7379f115e7c452f1f0cfacf3002d7788e1e06156f117
a100a572b728728081bf93bb52f190e588e57ce15bd9a7fe8394c887b417166207ff404164e4f7d69bd3ffe43f414222914824ff12fbbf41b25c2e97afcbe5e2bf4c04eb5405d2b9bfa4dce87102027533d060dd75f63060048072a040fe367f020375e6c06075e0608e05851a44d10279f1fbf379f188e1075500ad0203
b30601bd0601b3dfad55ce780100c6d40116a09cfcdae8a12572bd5eafd7ebffe7bf415119f35f96ff31cfbf4010325476ff98babc3f409ff449563b10cf3f3114ac3915bf83aac857f0ed2104f50a88e0869158d0ffd8299f260e4041bdff128fa28146ee3f40ff373f90058d9d0040af41166cc19310d6233029c62372
702e4ff472b0a31701009d80e060407a3392019d120118a31fb51f800270496bb7f517e21f4103f51f072e2d71b10301b202412290bc064f24cc0201b2034122d6060161030681f1a53db1eedf0000cd1180cb031703ab26d6021702b202170203f9854ff81db4324e1be8b4b7814e7b3db2000199760215fedbe6bf79e8
268e285139f3ad422d7265fea8e6aff8af367483327800f631ace04231bf61207565972670b305ba3179fcacf2df3ffdbe33bf26acffffff79f14231c9078c26708288e11ffd34423146b25935c3a4b0ffb605001d363247a07f5660010d08e4f135e10452f541ed6e75e85de3287268ef7aef028ceda932784e31ace0fb
71aa45ef790056f19741b6e5a34fb54fdae8d24fe44800b6e3974104f5015fe44f5638305f425f084ff85f5f715e676fb441e10eef307a1041e156f1e93149eb5417a1cd11cd1182b6e22f0564dde25de15de104f231041f6459320f2c6452f23d75774273459095b22d712d7117a2b4dae88d2354e9e8c531f775015ce4
60267bff3941453532374534ff2d433335382d3439ff46352d394632412dff31314546314630457f324143437d00fe63612004f52f61f450ef767f620163615935fec16450182d4454fb2103f93ffb73636152f5c1648996f367fc17a505767453433b37bd21bffb7351e117a152f12c5ee782910037d952f152f57f498c
f104f19cefc5d0a10fb2e9f5215eff80421629d275badde060ef758005fec17201e17504f0cb79d9e9a67e4226939fc96432d9bfbf7fd17f55063682e53feb7304f5a6754d0e128f0085d1d57f778327f94c8e0a8f6f8f2e8f417139460aaf1cacdde57f45998578055c34fd033074ca5f13758341ba8ffed37d6fdbf97e
6abcc80090802191b6e52d952016b085489f589ffe6a933e26f941e346dc84cd8f3984708234ee8f009f697caaa08578086137f17ca57ba5bf4daf05030501147439a2b6e546ac5eaf97a72071a89031423104f1c5cc0578f296f9007741cf3ffccf45d7dde11cd507af19af5c697c5bdf5541a09aa59891a400311ff526
3a16a4dcded1b6e5eadfb5e30035e1b6e541ef46b72db363e238bf4abf92847f558340b2ef5593bf73f36f0008c4ccc1c9c4fbf56ec364919efff9af009ee70bc51cd58cf196332ed2bef7cdc7f8593983495cbf55401aa99bff3f3ce5014040087affb451a047fe3f40ceffab89674523ed3f407f832dd8822dd8d232d5
55dd3bd5c2a3db03b3ba7bc1bfcab6e26ac80272140690d601764c1406a4d6017a1406b8d60127f51d0126f60101911406e0d6e002e0dde5ed040114b5e308e60800a4001e38960176d6dc53c9957250423504f1202dbf12ca2139dde1793f55ff9190330084e1dde58534e681903fb8e159e070c174d4ef56f1e8ee2300
d83fa3cf03ffff70c1ff91f7e1e681b151ed31207df1bd5f0ecaccf5e4595ff153e0f104734549c2136df4a5e2fb555932086500fd62156577423c65dc5264758531626a82c16bf0f262d563fd656f6f816a43ff433734443337332dff363939342d343041ef412d39351b00304343ff39344334424142337146b264dc55
c16a46a040d16744b9f2be6e204d04e93159351e56e300a5e191c191c1ff914d324e31e6810c42fcfd6519442c3ddac464f5ffaa419947c6831dc713340be68177410cc7e75ce15841000fc9d201d201facf8d474d6560e1e4b1d0853121f1219919635533d49dbc5b40444a12cc3f0c74f051152011774dc19099391e3d
d3b2511f631e24a5e53915cd35d54a1dbf9e1f1e9480ed35bf1e8d1de01f6c1559353915cc4247dbd29d171b26641dfd6504011000492aae7e951664198ad299d799dfabdf28bddfcfdfe1df018ad201c52fd72f80e92ffb2f0d3fead7909177453915ca8235d2cd542f662f6c1587c37a17da3f40a70d74dae5ae3fc03f
006c1560e57c1f50d4951f641ddc55022f00374c232f6c1558059f3e992fab2f1f937044f5e23ebc4fce4f00006eb25402b5513456e78e510fc92955f90f0b1b01a930c83c51947099557001c866897400745149c5805f925fa2e8af5fc15fb66800de5ff05849c37451f6c50d6ff05ffa68063c6fff61506f96366b6f4e
6eb8e1080df1d5a1caac066fc28dc9ebafabcf005a53f6c515b1cbcfddcfefcf08125c55000edf3f15962833d7807c9628a5bcf4d10049c500ec46c836c21fe1a5e52be44f69206617b3b215b5c0bf48c369bc7c29ff00558ed8b1a5e5e4bff81367f1020306c220478d63f5545f0b172fcf55d5a045cf0057c831c76b31
a5e551c5897e099315b500179f029af6c5f08f029a8025659fb46a08ca011911caac07d96e60e1f46f007f04d8371c7d2456e7f50937c5f6cd0adf20717c4fd533df5cafa5bc87e5886cc1de04e0321cc771b5a08c3fb0b4afc6a6e883ece4e03f55e0e01ade90effb3401ff1910108f228ffad8b923748bab696e7465ff
7266616365bb0a44ff72696e6b436f6d701f6f6e656e743382f8bb5bef8418cfb98294cf882bb104e021ab10eb2700c6a4bcece201ff1f01018fb223b904e06781b387b1bfc3b000838f958fa78fb98fcb8f2ee4e48f929f00089f419f2c9f90ce78a5579f6dcac8cb00849f73ce8ad1e4d33a5365b44b792fc58ad97995
48c8642ce7ece46cdf00370021338ad2f3bfe106e106db0100f4f501f704b40203ee89d53f13feb9f102086042faf06b7d2428df3adf48c888415cc62fe50101a7019735b304442aff3bc91e4b6944ad4e3f00d12b21cb44ada12f311021f1c96c37732f3115d5948021de9f0079e3377733c144f56cb120752d5f3f5f40
48c88021091533c567f149a9a5c873ff415a8de2c8f74a01ff40417518ea528721fff73f404c2693c964ff32c9bf418c6fbd39af4d2ce3bf19f4b921f5d359bfac7c67e1020219f680fb30fb40fef2710203750d00b7006075e64060045bf31a82f711022f31c8e32f31fa9378f203a87ef62e32fa9201bb7f55d878019c
90302ec408009c688855a5d8ff21b04c7057a0bf41ff8336e591bda8cbbfff401032547698babcdf3f409ff4490600cf3f4afcf4ac0405bf91aa02d09df718fdeae3341aa99b3f3ce5ff014040587459a19affecfb3f419b712952ffb3b000404192bc7aaf047456f2d7a029b4d270b8107519106e07010080e64040137a
335df16802026e0f800f62b1030170c4918021a001c106ad0fcb0820ca0f8a04377196f347d2030c12a1f6c30103fba13d25bcb10bbf0000c12e93f6333d56167df28d320385fc7d28d2b4327b14ae47e12b7a8477d30279c7fe2fc22951440c409636263918fa15d31f0136732165f2d8dadfecdf50748348c8a34102cb
70734be42a7573c765b07ef570b94dfc79e2df3fa6d16c20bf79ef13ffff56113721c9fcac65b033c1891fa8243721001fe134652be439ffa89705e04eb6479e7f13e597f94508406781006365738d255123c508c367b213cf25cf0037cd745fa06f985f493f5b3fce5f7f3f00913f046fb53f6939346fe53f586f094f02
1b4f6726547381408f6fba738101d18494217b8b546cb15011501161c22f20b0446b8208c1ee4302d031ca440242010fd74431424775b8121e35fe9237716437716cb2b46888381354e8a6d5fa05810107c460267b3435ff3244374246452d39ff3636442d34333632ff2d413638432d4143ff35423336463036331f3043
7d00fe0e51d335da412c9f402064f03f2a52010e510245fe6c5450182d4454fb21c1f97b520c5331456c54efa4c0bcf89e576cb5b056d8d1f2f33143a3bf0583fcb16cb1b8112c09c7c005d170b93141223f3dcfd6880101f10f5dc9a371e7f1b0b9bec98f57a797bfefa42c31e26102fb00756b806020c994417f17490a
be3f05fe6c62eb0175d33060f9758005fefc84c9516edb348c62f86df3d7bf6a6f7c6fb6ef8558c7558de37f60d2c95165164f9f5bd0793dc6b36fc563673fcd17ddb63eecd26fe468c03145f76e23f5107f227f745505fea0ab9173835fbf71bf253a9930685c06a56dfcd7dc53754f28532c33bf6ffe7e6d4c3a004cb7
04b0007870cc7161c5d875ebf60875f37f038ffe158306029894f7c0c484257fe464702d24997fab7f146caa183068b34104f19a99fa8132f0f98f0e02950505017384e48261c5f18c013f3a9f4c961c984ee13721d3314eec01055f1263e9b8117a2fea9fd137bc71800aa5d33116af4accc78b2e3149af550341a00395
1fa5fcff30af92acfba10061c507bf60c37e11bc758a1f9c1ad18300af121fb9e72dfcb159bb0ec2c18fd38fc22f6f552e305dcf0bd8060500000242e17647ef59e755b167ef87bf8bef409defafefc1efd3efe5eff7a6a701f4fff9bb15ba0320f53ffe10f641762c438ae95489fd21f728c4ed33ff2a3461f2020d75e3
906075c4d070f561ff73f82055b1d7b355b18cf98fc60199c6abfff8bdffcfff15a7d0c9dbf513c334ebf2ff040f160f280f000af82e303f0f5101f696d0d33b37d6d93f5d0d0270c4d19c050480d6d60f037fdf91dfe40ff60fb60f10d9df031b8ec21422020c1298c62be400a8c2161943e72c1f75af501355b15a1300
87e6b2c26e1387e67d1f98afa11fb31f80c51fd71fe91ffb1f0d2f1f2fcac37700382f4a278fc55c2f6e2fabf955b168f1f0942fa62a68f1b72f0054ab9eff5c6a40580644ae953fc39bb4dd2c51db2fed2f00ff2f113f146f353f324f444f6b3f7f0f00910fa13fb50fc53fd90feb0ffb3f0f1f00211f314f451f554f67
4f794f8b4f9d4f00af4fc14fd34fe54ff74f095f1b5f2d59ff3844414338454343ff2d433233422d3446ff33462d393944432dbf3333354439434250380346385d5f6f5f815f935fa55f6166fcc05fb05540838152732201bfe15c6211f45fe2ba62151b6d04110014bf416f11c3f8a5616f16828e677b7f00946f843c08
7fa53f988fc9310415823511752acdbd6babf3ef787f8a74eb6f002e48e63f4b4f0a4f917fbc8ffdafc77f82833d3a0c34a61f728ff63fae47983f83068860fbc9388ff7cbf8588f2c5f0d8bd8b0a51b9a03addda94fa38fcd4fdf4fd98f2d9f004899099631671c9f1d6f386f71695e9c0068f1719f203055b172b9969f
a89fba9f20cc9fde9ff09f02af14af3f27af16d7003ebe54af66af78af8aafc4efaeafc0af00d2afe4aff85f08bf1abf2cbf3ebf50b2017a56bf68b7868176bfb88f9abfacbfe0bebfd0bfe2bff4bf06ce0a65cedfbe72a804401fc780df3f95f9b319e63f31c75a9301d661954acf5ccf6ecf80cc868108930886819dc9
c09601ca96bccfcecfe0cffe4677281ac7d008d8d1813f04df16df28df3adf4cdf5ed5fa7f20013ea96b07406edf1113aad8b1a6e7df03b0afc2afccdf0007eff0df0abf14ecca952be554bcd9920047e974b75defa67f81e386818be3b8b600e3929fe3b8b6aeefc97fd2efe4eff6ef4008ff1aff2cff3eff50fffb937b
69ff007bf7c0958dff9fffdcc9868199c1c5fff8d7fa99c1e8ff0054b20107ff0f478a0b4585a6171fddb22bd1030c0f1e0f300f00420f453f660f631f751f9c0fb0dfc2df00d20fe6dff60f0aef1cef2c1f40ef52ef00621f76ef861f981faa1fbc1fce1fe01f80f21f042f162f282f3a2f4c2f5e2946ff303430373936
352dff304243382d343043ff372d414444362d39ff3832303935394234073737308e2fa02fb22fc42fd62ffce82ffa2ec08554e1668201b0123c1ac1253f139a84df9ad7458f00723f843f963f7fe6574fc33fd53f8d4f00d70f0b4f704f5997171f614b371f18450093e5591e394f7c1f5d4fc24fed5f2e8f04f84fb40d
bd3d04d7efa35f271f8c177fe0c59f2fe78dbb695ff028ab895f5d2f6f2bf4d1e861073ad6d9871fd45ffe1f102f0a6f005e6f796f406f526f646f5c3f886f8e810099c1a26f3bb0eec1a389c76fd96feb6f00fd6f0f7f217f337f457f577f697f7b7f008d7f9f7fb17febbfd57fe77ff97f0b8f401f3f313f418f538f65
8f778c87878f009987b751a78fe95fcb8fdd8fef8f019ff8139f259f379e363f90058dff9d00404164e4f7d6ff9bd3e43f41432291ff4824120bc041b25cbf2e97cbe5e2bf8a64fb05bf9364d27c9f8e9fa09fb29bb751103963b751ce99f16601fb66ed9fff9ffc11af7747dfeff7fbfd7efff9bf415119f35f96c331cf
914f4faf61af73ae4158ffd0d8299f260e4041ffbd128fa28146ee3fff41a6703d0ad7a3d85f3f41166cc1d170d6a7a71125dba8e27618bf03e17ff37ffda3100cf130b53486208f01338f3dbfec660058b9858c0a7278b9a5878ebfd74fb2b300b7515563e9861472d0b3e986dfbffa407f4e1be8b4814e7b045301010b
570cc01e2416cf28cf3acf4ccf105ecf70cf82cf2d72889acfacc7f16500becfd0cf0da9b751ca91f6cf08daca91fe19df005436780240fdff323b418dd2b6c8910710ff953ddf4fdf61df73df760f0097df94efa6efcddfe1aff3af03ef17bf00e04630ef44bf54ef68bf7abf8aef9ebf00aeefc0efe99fe4eff6ef08ff
1aff2cffc03eff50ff62ff74ff86ff98f04438ff3944444338322d34ff3346312d34354642ff2d413536412d3935ff3446343335353044033738bfffd1f88af4e3fff5ff070ffc190f2b0ec4fa1625ac6f01c9430cc4b1560f446ac4b57d0d66b100765fa30fb50fc70fef08dd1ff60fe6dc7f422693c96432d9c41f160e
ef205574e2e54a1466b5e4d5008b6e50efd71fb1e74d1f90e848efadef406ceff31f1e3f5f5f292fe5ddc26ed4f008cfd42f58eff827f8a7c64b073789d59a2f597beee586ff96fffe77232493fca07123de000bff77e40c3f36ff48ff423f543f9f3f00783f8a3f940fcd0fc03cca91d33f6c8000b751d459f83f0a4f1c
4f2e45450f570f08a7dc6d4f7f48988b4f9d4faf4fc14f00cd8f94511f5f315f435f791f675f795f008b5f9d5faf552be1bb5fcd542be1d85f00e02ffc5f0e6f206f326f446f566f686effb93cbab4ed050840ff417518ea528721f7ff3f417c4e7ad4c582fff83f418c6fbd394d572ce3bf8134e88935d3ad6f00bf6fd1
6fe36b2be130332be1ff69e836c101f2361e7f307f427fa417d8ebff1240f061e63f41833f36e591bda8cbbe1f807ffc927fa47e401aa99b3f3cffe5014040587459a1ef9aecfb3fb57792bc7a0f047456f2d8773dc10f85d94622498f03d84fea4f2e836f5e882b5602175f012a5f6e8fe33689897c5c014240a9899c57
bf8f042fe383d1e501ad22e0f783e056e7320b9f1d957b14aeaf47e17a842c9302962600003d90bfa03431479f599f6b9f7d9f8f9f08a19fb39f24428ccb9fdd97e835ef9f0001af04792be1c16127af39aac1614aafff0054f4ffda8381d6ff8644a5cd27c9333f0375416eaf80af92afa4afa7dfc8af00c5bfd7bffeaf
d87fea7f34bf0e8fb6bb0066bf408f8abf648f768fc0bf9a8fe4bf00f6bffe8f1acf2ccf3ecf50cf62cf74cff086cf98cfaacfbccd37464539ff353841372d443646ff462d343430452d39bf3136462d3036db90373f373341343444f0cf02d881f030d213df25df37df49df5bdfc03fd1e08d2347bb74dc42610087df3b
3aac7dc0796d2fd4dfe6dff8dfe0a786b9ef25e782ede3a6db348ccf62f86dd7f5ef05bf20b63fef8558558de3ceefa912017e83353fbf70e187230afd6bbbbb850081be8b359abfacbf04f724ff711f562f045affdcadba65a4ff8f050f4fbf29077f7916d30876c3c6cbffe0504b92b57dcf8dcffee3af77220fb4b138
ddafbf6eb43d0f2dcf003fcf730f850fd00fa90fbb0f8bdfc4df00f10cc161041f63502be1cb29291f3b1f084d1f5f155d812441d7bb304edac5a30051db961fa81cae14654fd01fe21ff41f00ca5d086146c5146f266a5bd33962162f00282f3a2f4edf5e2f702f822f942fa625018daf2fc127dff1cf2f110ff32f053f
e0173f293f3b3f4d3f5f3efb560dff712bf103404164e4fff7d69bd3e43f41bafff29671e76a04c041ffb25c2e97cbe5e2bf16b204f4bfbb04d2a43fb63fc83f40da3bdff16103dff1f6391916012316f0154f274f394f9fe760c0fd24ffc1d7f2bf415119f30f5f9631cfb9ef774f894f9b4efebe47bd128fa28146eeff
3f413cbb83706f77bff33f41166cc1f910d622cf473703580a26405f03092f1b2f202553349158555c26482f015b2f655f0014168059ad2c3212a059cd27b65fffef00da53dff17d0311363c12f8531136076ffe22f04e1be8b4814e7b0223630133f7346046c43e6f506f626f20746f866f986faa6f55128ec26fd46700
1915e66ff86f3549dff1f2311e7f307afcf231417f00548a9c1b7bffd1e8bd45a78316480fb2e44a58657f777f897f9b7f00ad7fbf7fbc8fce8ff57f095f1b5f2b8f003f5fd156588f6c5f7c8f905fa25fb28f00c65fd68fe88f114f0c9f1e9f309f429f80549f669f789f8a9f9c9fae9fc09042ff344345353739432dff
364631412d343033ff462d423934332d45ff333842423639373607363438e79ff998b2940baf1daff82faf41af53ae643bb51215031dc46bacec517eaf6c0aec55a5ad0046c19effcbafddafefaf17b805cf1eb5000049c1d1b30e258fffbf11c722bf12887f422693c96432d9778f16368f2055ef82e572bf628bc38f80
828fe78f1bcf46df87ff51cf0d8d62e09674306ffccfd38f9287f5bfb40f6d8e07d1c2cf811b1695ae9ffcbe9f9fc33c2528452788001addef8734df5e9f709f6adf7cdfc7df00a0dfb2dfbcaff5afe8dcf231fbdf942000dff1fcf920ef32ef44ef3e056daf7faf08de4c95efa7e898b3efc5efd7efe9ef00f52fbcf147
ff59ff6bffa1bf8fffa1ff08b3ffc5ffd7f591e0fff2f7d6c1000f0008df240f360f480f5a0f6c0f7e0f900eff576beda5f9dafb3fff417518ea528721f7ff3f41749b2765fbbdffefbf418c6fbd394d572ce3bfa9d4dfb1d5d3d50f00e70ff90f0b1bd6c158d3d6c1271910e6c1011ae6461f581f6a1fccb720d6ff583c
507cdbbf41833f36e591bda8cbe6bfa81ffcba1fcc1e401aa99b3f3cffe5014040587459a1fb9aec9ed07a84a3cc7afdebf61092bc7a0474560df200250370bec1372501f6712f110200ff12ff7f236f862853f63fff005df85cffa02a1ae5b525a4fc29e2d12900c4f7e72f2ccf0b33d6c174d3080633e2f02933080638
3f4a307b14ae4757e17a84543302bec600653000e7405cd16f3f813f933fa53fb73fc93f04db3f4ce292f33f054710e5174f294f802c19d6c1e9014f4f614ae901724f00ff54dfe7d03b92bc86ff498ed831d594f0cb0161964fa84fba4fcc4fde4ff04fed5f00ff5f265f002f122f5c5f362fde5b8e5f00682fb25f8c2f
9e2fe85fc22f0c6f1e6f00263f426f546f666f786f8a6f9c6fae6ff8c06fd26fe46e3730343135ff35312d364338322dff343644432d424537ff352d3238333345383f414333383846187f2a7881f058723b7f4d7f5f7f717f837f803f37f5a5b65db49c7fae7f00c07fd81d9931852195cffc7f0e8f208ff0d59f448f56
8e0b56db348c62e7f86dd71d9f2d5f20b6ef9f8558558de3a38ff1a27600abdd6f5bafc38c8f9e89fd8db156675f80cc5f8b5f4c9f99bf7ecf829f045d7ce08d44273f2daf775fdc574450030f17defec0f39f78eb0d65a56ffcb56f26935ee3d0857ab501db2a6f965465af556f676f9bafadaf00f8afd1afe3afb37fec
7f19bce9012cbf008bf0d6c1f3c951bf63bf75bf35d5852101246977e3d0767aed43797bbebfd0bc00d6b48deff8bf0acf1ccff2fd30016e65003c0f4e0a837361023ecf50cf62cf767f2086cf98cfaacfbccfcec595d7cfe9c70007a1f7cf39af1bdf2ddf3fdf51df63dffc75df87de94b85bbe00d3ff0a404164e4f7d6
9bffd3e43f4120bee85bfff39ceabf41b25c2e5f97cbe5e2bfdaa4dae2a501d2ccdfdedff0df02eb07a189a307a1041ee941b6014bb63def4fef61efc787ff90f483295a50d4bfff415119f35f9631cff0e18f9fefb1efc3ee4158d0d8ff299f260e4041bd12ff8fa28146ee3f41d0ffa0de52627f074041d7166cc121c0
d6f7e5027011522bf832c668ff0331cf43cf76f3105c3180f584c670cf0183cf8dff3cb600a8f9d5cc5ab2c8f9f5c7deff279f02030007a1a5a339d664b2200339d62f0f4a907f4e1be8b4814e7b4b0301015b975c006e64660f780f8a0f9c0f10ae0fc00fd20f7db296ea0ffc0741b5000e1f201f5de907a11ae1461f58
1a1ae1fe691f00547cdb4e77f4ff8651468f5a243b71073d16bf8d1f9f1fb11fc31fc64f00e71fe42ff62f1d2f31ff43ff532f67ff00f9f6802f94ffa42fb8ffcaffda2feeff00fe2f103f39ef343f463f583f6a3f7c3fc08e3fa03fb23fc43fd63fe8303533ff3031453635442d43ff3237442d34383236ff2d41384645
2d4437ff37434530324145440344370f4f2148da34334f454f574ffc694f7b4e00713c614c3401b2934c9bd1a64f94aa05ff1bf7c69f80f34f055f175fcc6f3b5f4d5f3d25423f2693c96432d96e5f5e2f0b2055c422e5ed5ffc63dca5982f00e25bb82fca251405da2ee4a5f32f053f40e657436f6e7faf9f796f352d02
be14f0580f247fa82f60377d6d14450770d3beea6fa9bbeb25d63fe63ffef833a6bebb6dfc6cd800083fc7245c7f863f983f927fa47fef7f00c87fda7fe44f1d5f108c1ae1238fbcc00007a124a9488f5a8f6c8f66a5954fa74f08f71cbd8fcf8898db8fed8fff8f119f001ddfe4916f9f819f939fc95fb79fc99f08db9f
ed9fff959708af1aa7fe6128af00307f4caf5eaf70af82af94afa6afa066f9a5175406c6ccb2f87082dfe0e43f404cec22c93fff41e2bf2c63fecbe2c1bfd1742d50db73fcae1f71020200d1761ebf30befe618073fe614fb93686810140866ebf80bf92bff456e3779142d272c20e6fd0bfe2bfb4f7eab97dfc0fc6fb86
b6a5c47e06f52227c85b5cc8279699cf03269f389f007ecfb9cfa2cf809fc6cb4f82f9c9ca97000fdf546f33d3fe619c730ea6598251d3000ea660df72df84df96dfa8dfbadfccdf10dedff0df02ef7183981bef2de73685003fef51ef32b91b71efa177ef89eaefa1fe9aef0054f66a293664ffcf964a8f04be4c5d07ac
2f46beefd0efe2eff4eff71f0018ff150f270f4eff06cf18cf84ff3ccf00a8ff60cf43cfdeff96cfa8cf140fcccf00380f4a0f5c0f6e0f800f920fa40fb60fe0c80fda0fec0ffe0f1019303537df353930443429104635ff2d344235372d3935ff43312d37324541447f46363433434442401fc0521f641f761f881f9a1f
ac1f00ae0f9e30139ec41ce9c1d71f8b7a00e9c5fe1d8bc1bd6f242f9d8c452f663781e05b3f742f08ffeb2f2cff6235e41f36f0da9d721d358bc509fe00db7575ff87ff5437ce2f62ffc7ffd9ff4098f8743fc15fa66faa3f9c8d0393e4502ddf554f230fe2f7c51f52a91b4f00b2fff171ab0fbb0fcd0fe2fd48118d4f
005b0f6d0fc34fd54f205ff94f0b5fb91f00f21f415cefa1545fb1901b711b79795f008b5f9d5faf5f741f861fe55ff75f096f001b6f2d6f3f6ff39f636f756f876f9b2f00ad2fe7efcf6fe16ff364010000003800000038000000000000000055a2e9f204ebf005ebf006ebf0550debf00eebf00febf010ebf05513ebf0
15ebf016ebf01bebf0551cebf01debf01febf020ebf0552eebf02febf030ebf031ebf05534ebf038ebf039ebf03aebf0553bebf03eebf03febf040ebf05541ebf042ebf043ebf044ebf05545ebf046ebf047ebf048ebf05549ebf04aebf04bebf04cebf0014ddcf0000000000000556cebf034ebf02ce7f428ebf0fd01ff
f12c68ec944f93ff1240f06d4fe2cd654b0040e3f8021f04eaf10bebf0ff3c48cf2938bb0000f586ebf0432d025442cf2915be370006ebf041e9f202015532ebf014ebf012dffc01e7f4fd40ebf0b441cf29c4bb3700004debf052000548ebf03cdcff040f160f280a5532ebf014ebf012dffc01e7f4fd45ebf0fc41cf29
30bc3700000debf05200556cebf014ebf04ce3f801ebf0f504e7f415ebf05400cf29dfb14e000076eef0d300fdc9ebf0dc0bcf2927bb77000011ebf040003febf07df4250011bc00001febf0f7520044ebf0c40ccf29013d3b0655010524ebf018dcff040a0534ebf028dcff040f16085531ebf0fff2f007ebf028e8f335
1cebf00cdcff0003ebf0f6f1aae6f501ebf002ebf04f220844c22602553d01e8f3f2f1510fffff204a056609e0fb2901eaf168220801012f02005418ebf004790f87062aeaf1bce3f82b1602552c02de0fbea80d07060000c985081e822602512d01b70a19011901db0248002a04390f2800540f59131901671da90f508c
0f9e0fb00fe9f29be3f84516020151ee0ff01f022f142c0000000002000000554d4c204e6f726d616c0000000000f517ebf001ebf056697369ff6f457874656e64657f64446174613100f513ebf004ebf0554d4c50ff7265734f7074696f076e3100f516ebf003ebf0554d4c53ff757070726573734f3f7074696f6e0004
000000554d4c56657273696f6e0000000000000000000000000000000000010000005768697465206c696e65000000000002000000436c6173730002000000554d4c54656d706c61746500020000004458310002000000445931000000000000000000f518ebf003ebf0554d4c41ff75746f4c6f636b54ff657874456469
740000000000f513ebf002ebf0554d4c50ff7265734f7074696f076e3200030000004f7065726174696f6e730000000000f519ebf001ebf047656e65ff72616c697a617469ff6f6e204172726f7701000000000000000000020000004174747269627574657300030000004e616d650002000000506172616d6574657273
00f513ebf001ebf047656e65ff72616c697a617469076f6e00f512ebf002ebf044697363ff72696d696e61746f03720002000000496e7465726661636520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000554d4c53686170
655479706500f512ebf004ebf0554d4c4fff626a65637447554903440004000000554d4c4572726f720002000000426567696e416e676c65000000000000000000f517ebf001ebf047656e65ff72616c697a6174697f6f6e2e3130300000000000010000004775696465000000000001000000506167652d310001000000
436c6173732e31300001000000436c6173732e31390001000000436c6173732e32380001000000436f6e6e6563746f720001000000426c61636b2066696c6c0001000000436c6173732e33370001000000436c6173732e34360001000000436c6173732e35350001000000436c6173732e36340001000000436c6173732e
37330001000000436c6173732e38320001000000436c6173732e393100f517ebf001ebf047656e65ff72616c697a6174697f6f6e2e31313400f517ebf001ebf047656e65ff72616c697a6174697f6f6e2e31313800f517ebf001ebf047656e65ff72616c697a6174697f6f6e2e31323200f517ebf001ebf047656e65ff72
616c697a6174697f6f6e2e31333500f517ebf001ebf047656e65ff72616c697a6174697f6f6e2e31333900f517ebf001ebf047656e65ff72616c697a6174697f6f6e2e31343100f517ebf001ebf047656e65ff72616c697a6174697f6f6e2e31343500f517ebf001ebf047656e65ff72616c697a6174697f6f6e2e313439
00f517ebf001ebf047656e65ff72616c697a6174697f6f6e2e3135310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000486169726c696e650001000000554d4c20536861646f770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000df0615000018ebf0e214d2e0fbf30304eaf133ebf0b42d7fcf2965bd000004ebf07d451102642ecf29691b00550f1f
06dc1700781b0a9c2900557c1b001cebf0471102bc290051981b00f2f15803d42900b01b00d51b5506f42900cb2d0a0c2f57cf29da1b0a7c2900de1b0a553c9500e21b0a8c2900e61b0a55549500ea2d0a8c9500f91b0a55249500fd1b000a1f06ac95005f07be0000101f066c9500a5171710089d0795001f291ac45295
002717101e07d495002b4d1a5fe44f86292f17101d7907ef8786294c5f1baf8629f95017106607ecdf8629687c17103007e46f8729774d1a5f34e187297b17101f5506dfe48f88299a4d1af4bff788299e4d1aec0f89297da2a71aec2f8929b11710bd0963175f8929ba012b8ff78929c9951b9f8929e17a171017cf176f
8a29f8a71abf1ce88a2907bf1c09c4ef3a8b290b6d2ae4ff8cfb290f6d2aec6f8d2913de7f2b0f8e2917912b8f8e7b291b7f2bcf8e291f912beff69229236d2adccf977b2927eb2b9f9a292b6d2adf645b9b292f7f2bef9bfb29336d2afc459c2937be6d2a447e9c293b6d20113e1f062c8b9c294c6d204c275ffca59c29
636d200d3107cfef9c29706d20aa18f99cfb297f6d2a8c369d29839eeb2b7f9d29876d20540754efa99d29a39f3ba59d29a9a76d2008179ce330b16d2a6c2fae9d29b56d200b9d0707407dc07b3ad4a19d29cd7b3adfec5f9f29da2f4baf9deb29e76d200ef317b49d29fdf58d3a849fa32904c0be7c39e4dfa32911774a
44efb79d291e774adc0fa4fb292b774aec7fa52938dead4bafa52945774ad4bff7a52952d14bdfa5295f7c77405407dc0fa6297bf54bef1fa62997f54ae48fa6fb29b3f54ad4efa629cfeef54ca729ebf54b4fa7297b07c11a5a6fa72923615adfd49fa7293f615af4cf479d295b6150363893505f975adf94dd9d296397
5accdef79d2967975a74e29d297d6b975a84e39d296f975af58ced5073f15beb9d2977dedf5bec9d297b975a5ced979d297f975befae30cd5bf2bcc030cd5bf49d298b975bf9f79d298f975a04fa9d299593975ac48f6097bb5b8f609baa975ad48f609f975adc8f60a39ec96b6f9f29a7975be960abbe975af47f9f29af
975b8ff79f29b3975baf9f29b75eb76bcf9f29bb975ae4437095bf975aec4370c3ff6b4370c7ee975c9f29cbff6bdf9f293dcf477bff9f29d3ff6baf70e9d7975baf70dbff6b0fa029bddfff6b1fa029e3975b4ff7a029e7975b5fa029eb9eb76b6fa029ef477b2d80f3a4597b2d80f7ff6b2d80fbed6ca07b29ffff6ca0
2903c2de1aef8fa029078b8afc9fa07b290b8b8bafa0290f9d8b7abd80139d8bbfa029178b8a5fe4dfa0291b8b8aecf380491f8b8bf380239d8bf380278b8a9fd4efa0292be58b3b902f24f78b3b90338b8b3b90379d8b3b90bd3b9d8bffa0293f9d8b1ff7a12943f78b2fa12947a48b8bb9904b9d8bb9904f8b8b3ff7a1
29539d8b4fa129579e8b8b5fa1295b9d8b13a05f9ef78b6fa129639d8b37a067be8b8a6c7ca1296b9d8b7ff7a1296fe58b8fa129734e8b8ca129779d8b7fa07b9d8cf7a1297f8b8ac4afa1293d83e58bcfa129878b8bd9a0e98b9d8bd9a08f099ca129939ee58bffa129978b8b21b09bee879ca1299f9d8b0fa2293da3e5
8b1fa229a7f78b69b0e9ab8b8b69b0af999ca229b3eebd9ca229b7f39ca229bbee8b8ca229bf8b8adc9fa29329c3f78be7b0c78b8be7b0cbee9d8ca229cf2d9bbfa22949d3e58b2fc0d7f78b2fc0db8b8bba2fc0dfd38ca229e3efaca2bb29e7759ca229eb8b8a3ceffea229ef13bca229f374f78bbfc0f725bca229fb87
9cf7a229ff8b8aac0ba329bb03c3d87ba329070bdafc7a19d00b1ddb2fa3290f0bdadfdc3ea329131ddb3fa3fb29170bda5c48a3291b3e0bdad44fa3291f41db85d055230bdae485d0270bdaec85d0492b0bdb85d02f1ddb85d0330bda5f145aa329370bda24f1d03d3b77db5fa3293f41db15e049439bdb15e047addb15
e04b0bdbd215e04f1ddb15e0530bdb6fa3fb29570bda847fa3295bf40bdb93e05f9bdbcfa329639e9bdbffa329670bd07e387fa7a429740bd03007fcdbe083de0bdb8fa429870bdb9fa47b298b0bdbafa4298f1ddbefbfa4299341dbcfa4299d97a9eca4299baddb47f09fa40bdb47f0a31ddb47f0a71ddbdff7a429ab1d
dbefa429af9e77db0fa529b39bdbc5f0b774addbc5f0bb0bdca529bf1ddcf7a529c341db1fa529c724addb1f00cb0bdb1f00cf1ddb1f003dd341db3fa529d7addb6700e9db0bdb6700df53dca529e3eebfdca529e761eca529eb9e41db6fa529ef9bdbd300f374addbd300f773eca529fb1ddb52d300ff0bd62711018b60
028b60a9038b618b60058b60068b6007428b60088b601621ea310e410c8b60487e3156416841108b605a31128b602913edd18b60158b60168b606c312a3a21198b601a8b601b65218b60a51d8b601e8b60ce11208b60214a8b60228b6023ffd18b60258b6055268b60278b60288b60298b60a52a8b602b61318b602d8b60
2eaa8b602f8b60308b60318b6032548b6002d1348b60358b60368b6055378b60388b60398b603a8b60a93ba9c18b603d8b603e8b603faa8b60408b60418b60428b6043744f31231446c7320000488b6055498b604a8b604b8b604c8b60554d8b604e8b604f8b60508b6095518b60528b6053cd318b6055aa8b60568b6057
8b60588b60594a8b605a8b605b31618b605d8b60555e8b605f8b60608b60618b60a5628b606319318b60658b6066aa8b60678b60688b60698b606a528b606b03418b606d8b606e8b60556f8b60708b60718b60728b60a97367618b60758b60768b6077aa8b60788b60798b607a8b607b5415418b607d8b607e8b607f8b60
55808b60818b60828b60831f61aa8b60858b60868b60878b60882a8b60898b608a8b608ba9318b60558d8b608e8b608f8b60908b6095918b60928b6093b3518b6095aa8b60968b60978b60988b60994a8b609a8b609bf1318b609d8b60559e8b609f8b60a08b60a18b6055a28b60a38b60a48b60a58b6055a68b60a78b60
a88b60a98b60a5aa8b60ab03d18b60ad8b60aeaa8b60af8b60b08b60b18b60b2aa8b60b38b60b48b60b58b60b6aa8b60b78b60b88b60b98b60baaa8b60bb8b60bc8b60bd8b60be548b606540007740006150008b80ad000bd000c48b60c58b60c6aa8b60c78b60c88b60c98b60ca528b60cbc5518b60cd8b60ce8b6055cf
8b60d08b60d18b60d28b60a9d3c1f18b60d58b60d68b60d7aa8b60d88b60d98b60da8b60db54d3618b60dd8b60de8b60df8b6055e08b60e18b60e28b60e365b1aa8b60e58b60e68b60e78b60e82a8b60e98b60ea8b60ebcdc18b6055ed8b60ee8b60ef8b60f08b6005f18b60f2a1201512e9f215e3f801dcf0551ee9f201
ebf00bebf036ebf0553cebf03debf0d1ebf0d2dcf0000000000000556cebf034ebf02ce7f407ebf0fd01fff12c68ec944f93ff1240f06d4fe2cd654b0040e3f8021f04eaf10bebf0ffbc25d32987cd0000551aebf0432d02ac3300a137000506ebf041e9f20201000001000000030000000000556cebf034ebf02ce7f402
dcffe8ddfefef1fef50bebf0a441cfbf29f3cd00000aebf0414a2d029c3300fd3700fef141e9f2010110005f1c01000014ebf0fcdffc810edcff180f2a0f3c0f4e0fe7f440feebf03410d329a7cd000b004cebf052560f8a0f9c0fae0ff0c00fd20fe40f67029401cf2905ff71003675020548ebf03cdcff040f160f280a
0548ebf03cdcff040f160f280a5f1c01000014ebf0fcdffc810edcff180f2a0f3c0f4e0fe7f445feebf08410d3297bce000b000debf052560f8a0f9c0fae0ff0c00fd20fe40f6702dc01cf29018871060520ebf014dcff04060000bd995b057b8602ebf00100007af3f04ee0fb010003ebf00a0504ebf01509ebf067f3f0
22dcff340f460f18580ff9fee4f7180884038d0fe8f3ff28816f5ecdee10e2f140a6069d0fc106a078f90d5ef7fc6819cf29e6f515e7f47d16ebf0fce5ce293aebf0dd54ebf0520017ebf064e6a7ce298e17040a1394111097fa151618ebf09ce4ce29a0baebf076ebf0d20026ebf0a4afe7ce2916f3f021ebf042fb001a
ebf05c10cf2937d6f3f020073e111bebf008a057a107578700a94f121cebf0afe8fb980719012f4f121dfeebf02cd5bc29f84d00ab00b0071224ebf06c8f10a8f54e161527ebf0f4dabc29e35cbc081108114e11540dcfa329aeb7101813e90184c510b7aab7100b071231ebf0c4c510c26ab710a33d12ffebf00c1ee807
f7600032ebf03c2ecf297303c4f4f01a0056003cebf0ffcc13cf297dcd0000dd0aebf046003febf044154fcf2935ce28210811441f11af17cf299535204307123d1e43111fcf29d8352018134a215f8441cf29e13520062d2101000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000008100000082000000830000008400000085000000860000008700000088000000890000008a0000008b0000008c0000008d0000008e0000008f000000900000009100000092000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffeff0000040002000000000000000000000000000000000001000000e0859ff2f94f6810ab9108002b27b3d930000000e04500000800000001000000480000000400000050000000060000006800000005000000740000000300000080000000070000008c0000000200000098000000
11000000a400000002000000e40400001e0000000e00000041646d696e6973747261746f720000001e00000001000000000000001e00000001000000000000001e00000001000000000000001e00000001000000000000001e00000001000000000000004700000034450000ffffffff0e000000010000008c0000000000
0000000000007f0000007f0000000000000000000000c80d0000c80d000020454d46000001002c45000003000000010000000f0000006c00000000000000800400006003000040010000f000000000000000000000000000000000e2040080a9030056004900530049004f000000440072006100770069006e0067000000
000000004c0000008c44000000000000000000007f0000007f000000000000000000000080000000800000002000cc0000000000000000000000803f00000000000000000000803f0000000000000000ffffff000000000064000000280400008c0400000040000028000000800000008000000001000800000000000040
00000000000000000000000000000000000000000000000080000080000000808000800000008000800080800000c0c0c000c0dcc000f0caa600f0fbff00a4a0a000808080000000ff0000ff000000ffff00ff000000ff00ff00ffff0000ffffff0000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000001313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130000000000000000000000
000000000000000000001300000000000000000000000000000000000000000000130000000000000000000000000000000000000000000000130000000000000000000000000000000000000000000013000000000000000000000000000000000000000000131313131313131313131313131313001313131313131313
131313131313131313131300130013131313131313131313131313131313131313130013001313131313131313131313131313131313131313130013001313131313131313131313131313131313131313001300131313131313131313131313131313131313130013131313131313131313131313131300131313131313
131313131313131313131313130013001313131313131313131300131313131313131313001300131313131313131313131300131313131313131313001300131313131313131313131313131313131313131300130013131313131313130013001313131313131313001313131313131313131313131313130013131313
130000001300000000131313131313001300131313131313130000000013131313131313131300130000130013000000130013130000000013130013000000130013131313131313001313000013131313131313130013001313130013130000000000000013000013131300131313131313131313131313131313001313
131313001300130013000013131313131300130013131313131313001300130013131313131313130013000013000000000013001300001300001300130013130013001313131313131300000000001313131313131313001300131313000000001300130013001300001313130013131313131313131313131313131300
000000000000000000000000000000000000000013000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000130000000000000000000000000000000000000000001313131313131313131313131313
131313131313131313131300131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313001313131313131313131313131313131313131313131313001313131313131313131313131313131313131313130013131313131313131313131313131313131313131313
131313131313131313131313130013131313131313131313131313131313131313131313001313131313131313131313131313131313131313131300131313131313131313131313131313131313131313131300131313131313131313131313131313131313131313001313131313131313131313131313131313131313
131313131313131313131313131313001313131313131313131313131313131313131313131300131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313130013131313131313131313131313131313131313131300131313131313131313131313131313131313
131313131313131313131313131313131300131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313001313131313131313131313131313131313131313131313001313131313131313131313131313131313131313130013131313131313131313131313131313
131313131313131313131313131313131313130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130013131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313001313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130013131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313001313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130000
000013131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
001313001313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131300130013131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131300001313131313131313131313131313131313131313131313130000000000000000000000000000000000000000000013000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000130000000000000000000000000000000000000000001313000000
000000000000000000000000000000000000131313131313131313131313131313001313131313131313131313131313131313131313001300131313131313131313131313131313131313131300130013131313131313131313131313131313131313130013001313131313131313131313131313131313131300131300
131313131313131313131313131313131313130013131313131313131313131313131300131313131313131313131313131313131313131300130013131313131313001313131313131313131313130013001313131313131313131313131313131313131313001300131313131300130013131313131313131313130013
130013131313131313131313131313131313131313001313131313131313131313131313130013000000130000130000130000000000001313130013001313130013130000000000131300000000131313001300131313000000130013001300130000001313131300130013000000130000000000000000000000000013
001313001313000000130000000000001300000013131300131313131313131313131313131313001300130013000013000013130013001300131313001300131313001300130013000013000013131313131300130013131300130013001300130013000000131313130013001300130013001300000000130013000013
131300131300131300001313131313130013130013001313130013131313131313131313131313131300000000000000000000000000000000000000000000130000000000000000000000000000000000000000000013000000000000000000000000000000000000000000001300000000000000000000000000000000
000000000013130000000000000000000000000000000000000000001313131313131313131313131313131313131313131313131300131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313001313131313131313131313131313131313131313131300131313
131313131313131313131313131313131313130013131313131313131313131313131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313001313131313131313131313131313131313131313131300131313131313131313131313131313131313131313130013
131313131313131313131313131313131313131313001313131313131313131313131313131313131313131313131313131313131313131313001313131313131313131313131313131313131313131300131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313
001313131313131313131313131313131313131313131300131313131313131313131313131313131313131313131313131313131313131313131300131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313001313131313131313131313131313131313131313
131300131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313001313131313131313131313131313131313131313131300131313131313131313131313131313131313
131313130013131313131313131313131313131313131313131313001313131313131313131313131313131313131313131313131313131313131313131313000000000000000000001313131313130000000000000000000000000000000000001313131313130000000000000000000000000000000000000000000013
131313131300000000000000000000000000000000000013131313131300131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130013131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313001313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130013131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313001313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300
000000001313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131300131300131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131300001313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300000000000000000000000000000000000000000013131313131313131313131300000000
000000000000000000000000000000000000000013131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130013131313131313131313131313131313131313001313131313131313131313001313
131313131313131313131313131313131313131313130013131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313001313131313131313131313131313131300131300131313131313131313131300
131313131313131313131313131300131313131313131313001313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300130000000000001300130000000000000000130013131313131313131313
130000130000000013000000000000130000000000001300000000131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313130013001313000000130013001300131313001313001313131313131313
131313001313000000000000131313001313001313001300130013000013131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313001313131313131313131313131313131313131300131313131313
131313131300131313131313131313131313131313131313131313131313001313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131300000000000000000000000000000000000000000013131313
131313131313130013131313001300001300000000001300001300131313131300131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313001313131313130013130000130000130000131313131313130013131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131300000000000000000000000000000000000000000000000000001313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313130e000000140000000000000010000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000600000050616765730003000000010000001e000000080000004d61737465727300030000000400000000001e1000000500000008000000506167652d3100001600000047656e65
72616c697a6174696f6e204172726f77000006000000436c617373001000000047656e6572616c697a6174696f6e00000c000000496e74657266616365200000bc000000060000000000000038000000010000008c0000000000008094000000020000009c00000003000000a800000004000000b4000000030000000400
0000100000005f565049445f5052455649455753000003000000180000005f565049445f414c5445524e4154454e414d455300c2b93f02000000100000005f5049445f4c494e4b4241534500000002000000e404000013000000091c00004100000004000000000000001e00000001000000000000000c10000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001050000050000000d0000004d45544146494c455049435400632e00005aebffffcc8900000800632ea6140000
010009000003e244000011001610000000001610000026060f002220574d4643010000000000010020fc0000000004000000002000000444000004640000010000008c0000000400000004000000e3040000400200000000000000000000632e0000a614000020454d460000010004640000fa0200000e0000000f000000
6c000000000000000c090000d20c0000c400000016010000000000000000000000000000f8fd0200743d040056004900530049004f000000440072006100770069006e006700000000000000250000000c00000008000080250000000c000000050000805200000070010000010000009cffffff00000000000000000000
000090010000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000c20000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000006854ff0d6800000000000000409ffa0d409ffa0d30f112004590fb77701f
f877ffffffff40f11200891000780000c200000000005c0000004c9ffa0dffffffff7c54ff0d07b634607c54ff0d00000000200000009c54ff0d6854ff0dd4b534604c9ffa0d6854ff0d00000000000000006476000800000000250000000c00000001000000250000000c0000000e000080280000000c00000001000000
0a00000010000000000000000000000009000000100000007b05000071020000120000000c0000000200000027000000180000000100000000000000ffffff0000000000250000000c00000001000000250000000c0000000800008056000000300000000602000014010000e7020000500100000500000006025001e702
5001e70214010602140106025001250000000c00000008000080250000000c00000005000080280000000c00000001000000190000000c000000ffffff00260000001c0000000100000000000000030000000000000000000000250000000c00000001000000120000000c00000001000000570000003000000003020000
11010000ea020000530100000500000006025001e7025001e70214010602140106025001250000000c00000008000080280000000c00000001000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff00000000000000000000
0000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d50700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20080fcd507
0492b70780fcd5070000000003000000000000000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec12005018
fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000080fcd5070492b70780fcd507000000000492b70780fcd50728ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c00000000000000120000000c00000001000000
54000000840000002c0200001d010000c00200004201000001000000e7670741f18607412c0200003c010000090000004c000000000000000000000000000000ffffffffffffffff6000000043006100660065004c006100740074006500000018000000120000000b0000001200000014000000120000000b0000000b00
000012000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000200000000000000ffffff0000000000250000000c00000002000000250000000c0000000800008056000000300000000d00000014010000ee00000050010000050000000d005001ee005001
ee0014010d0014010d005001250000000c00000008000080250000000c00000005000080280000000c00000002000000190000000c000000ffffff00260000001c0000000200000000000000030000000000000000000000250000000c00000002000000120000000c0000000100000057000000300000000a0000001101
0000f100000053010000050000000d005001ee005001ee0014010d0014010d005001250000000c00000008000080280000000c00000002000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000002000000dfffffff000000000000000000000000
bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20080d0fc0d0492
b70780d0fc0d00000000030000000000000000000000000000000000000000000000000000000000000080fcd50718000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec120080fcd507
f8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000080d0fc0d0492b70780d0fc0d000000000492b70780d0fc0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000002000000180000000c00000000000000120000000c000000010000005400
000084000000250000001d010000d40000004201000001000000e7670741f1860741250000003c010000090000004c000000000000000000000000000000ffffffffffffffff6000000043006100660065004d006f00630068006100000018000000120000000b000000120000001d000000140000001200000014000000
12000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000300000000000000ffffff0000000000250000000c00000003000000250000000c0000000800008056000000300000000203000014010000e3030000500100000500000002035001e3035001e303
14010203140102035001250000000c00000008000080250000000c00000005000080280000000c00000003000000190000000c000000ffffff00260000001c0000000300000000000000030000000000000000000000250000000c00000003000000120000000c000000010000005700000030000000ff02000011010000
e6030000530100000500000002035001e3035001e30314010203140102035001250000000c00000008000080280000000c00000003000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfffffff000000000000000000000000bc02
0000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b707
5018fa0d00000000030000000000000000000000000000000000000000000000000000000000000080d0fc0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec120080d0fc0df8ec
12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c00000000000000120000000c0000000100000054000000
88000000150300001d010000cf0300004201000001000000e7670741f1860741150300003c0100000a0000004c000000000000000000000000000000ffffffffffffffff60000000430061007000700075006300630069006e006f0018000000120000001400000014000000140000001200000012000000090000001400
000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000400000000000000ffffff0000000000250000000c00000004000000250000000c000000080000805600000030000000b800000022000000990100005e00000005000000b8005e0099015e00
99012200b8002200b8005e00250000000c00000008000080250000000c00000005000080280000000c00000004000000190000000c000000ffffff00260000001c0000000400000000000000030000000000000000000000250000000c00000004000000120000000c000000010000005700000030000000b50000001f00
00009c0100006100000005000000b8005e0099015e0099012200b8002200b8005e00250000000c00000008000080280000000c00000004000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000004000000dfffffff000000000000000000000000
bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d50700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20080fcd5070492
b70780fcd5070000000003000000000000000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec12005018fa0d
f8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000080fcd5070492b70780fcd507000000000492b70780fcd50728ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000004000000180000000c00000000000000120000000c000000010000005400
000088000000cd0000002b000000840100005000000001000000e7670741f1860741cd0000004a0000000a0000004c000000000000000000000000000000ffffffffffffffff6000000043006f006600660065006500530068006f00700018000000140000000b0000000b00000012000000120000001600000014000000
1400000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000500000000000000ffffff0000000000250000000c00000005000000250000000c0000000800008056000000300000000700000001020000e80000003d0200000500000007003d02e800
3d02e80001020700010207003d02250000000c00000008000080250000000c00000005000080280000000c00000005000000190000000c000000ffffff00260000001c0000000500000000000000030000000000000000000000250000000c00000005000000120000000c00000001000000570000003000000004000000
fe010000eb000000400200000500000007003d02e8003d02e80001020700010207003d02250000000c00000008000080280000000c00000005000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000005000000dfffffff00000000000000000000
0000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20080d0fc0d
0492b70780d0fc0d00000000030000000000000000000000000000000000000000000000000000000000000080fcd50718000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec120080fc
d507f8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000080d0fc0d0492b70780d0fc0d000000000492b70780d0fc0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000005000000180000000c00000000000000120000000c00000001000000
540000006c0000004c0000000a020000a40000002f02000001000000e7670741f18607414c00000029020000050000004c000000000000000000000000000000ffffffffffffffff58000000440065006300610066000000170000001200000012000000120000000b000000120000000c00000001000000250000000c00
00000d000080120000000c0000000200000027000000180000000600000000000000ffffff0000000000250000000c00000006000000250000000c000000080000805600000030000000ff03000014010000e00400005001000005000000ff035001e0045001e0041401ff031401ff035001250000000c00000008000080
250000000c00000005000080280000000c00000006000000190000000c000000ffffff00260000001c0000000600000000000000030000000000000000000000250000000c00000006000000120000000c000000010000005700000030000000fc03000011010000e30400005301000005000000ff035001e0045001e004
1401ff031401ff035001250000000c00000008000080280000000c00000006000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000006000000dfffffff000000000000000000000000bc020000010000000000002041007200690061006c000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d000000000300000000000000000000000000
00000000000000000000000000000000000080d0fc0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12006d7db80730ec120080d0fc0df8ec12004590fb77801ff877ffffffff000012003d110078
0000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c00000000000000120000000c000000010000005400000084000000220400001d010000bf040000420100000100
0000e7670741f1860741220400003c010000090000004c000000000000000000000000000000ffffffffffffffff600000004400650063006f007200610074006f0072000000180000001200000012000000140000000d000000120000000b000000140000000d000000120000000c00000001000000250000000c000000
0d000080120000000c0000000200000027000000180000000700000000000000ffffff0000000000250000000c00000007000000250000000c0000000800008056000000300000000101000001020000e20100003d0200000500000001013d02e2013d02e20101020101010201013d02250000000c000000080000802500
00000c00000005000080280000000c00000007000000190000000c000000ffffff00260000001c0000000700000000000000030000000000000000000000250000000c00000007000000120000000c000000010000005700000030000000fe000000fe010000e5010000400200000500000001013d02e2013d02e2010102
0101010201013d02250000000c00000008000080280000000c00000007000000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000007000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d0000000003000000000000000000000000000000
000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000
c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000007000000180000000c00000000000000120000000c000000010000005400000060000000560100000a0200008c0100002f02000001000000
e7670741f18607415601000029020000030000004c000000000000000000000000000000ffffffffffffffff540000004400720079000000170000000d00000013000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff000000
0000250000000c00000008000000250000000c0000000800008056000000300000000901000014010000ea010000500100000500000009015001ea015001ea0114010901140109015001250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff0026000000
1c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000000601000011010000ed010000530100000500000009015001ea015001ea0114010901140109015001250000000c00000008000080280000000c00000008000000250000000c00
000005000080280000000c0000000100000078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fc0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088ebfc0d0492b70788ebfc0d00000000030000000000000000000000000000000000000000000000000000000000000088fdf90d180000000000
00000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088ebfc0d0492b70788ebfc0d000000000492b707
88ebfc0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c00000000000000120000000c00000001000000540000007c000000300100001d010000c20100004201000001000000e7670741f1860741300100003c010000080000004c0000000000
00000000000000000000ffffffffffffffff5c00000045007300700072006500730073006f001600000012000000140000000d00000012000000120000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff00
00000000250000000c00000008000000250000000c000000080000805600000030000000fd01000001020000ea0200003d02000005000000fd013d02ea023d02ea020102fd010102fd013d02250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff002600
00001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c000000010000005700000030000000fa010000fe010000ed0200004002000005000000fd013d02ea023d02ea020102fd010102fd013d02250000000c00000008000080280000000c0000000800000025000000
0c00000005000080280000000c0000000200000078000000100000000000000000000000160000000c00000018000000520000007001000002000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000000088ebfc0d18000000
000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12001610000026060f002220574d464301000000000001000000000000000400000000200000042400000464000035e4b70730ec120088ebfc0df8ec12004590
fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000002000000180000000c00000000000000120000000c00000001000000540000009c000000
010200000a020000e50200002f02000001000000e7670741f186074101020000290200000d0000004c000000000000000000000000000000ffffffffffffffff680000004500780074007200610045007300700072006500730073006f00000016000000120000000b0000000d0000001200000016000000120000001400
00000d00000012000000120000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000000503000001020000e6030000
3d0200000500000005033d02e6033d02e60301020503010205033d02250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100
0000570000003000000002030000fe010000e9030000400200000500000005033d02e6033d02e60301020503010205033d02250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000300000078000000100000000000000000000000160000000c00000018000000
520000007001000003000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d50700000000fceb12008806c200b0ec12004590
fb77f022f877ffffffffc0ec1200e0a5fc771807c20080fcd5070492b70780fcd5070000000003000000000000000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c20003000000
0092b707ffffffff0010007801ec120035e4b70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000080fcd5070492b70780fcd507000000000492b70780fcd50728ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000300
0000180000000c00000000000000120000000c000000010000005400000060000000580300000a020000930300002f02000001000000e7670741f18607415803000029020000030000004c000000000000000000000000000000ffffffffffffffff5400000057006500740000001f000000120000000b00000012000000
0c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c000000080000805600000030000000ff03000000020000e00400003c02000005000000ff033c02e0043c02e0040002ff030002ff03
3c02250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c000000010000005700000030000000fc030000fd010000e30400003f020000
05000000ff033c02e0043c02e0040002ff030002ff033c02250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c0000000400000078000000100000000000000000000000160000000c00000018000000520000007001000004000000dfffffff00000000000000000000
0000bc020000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d
0492b70788fdf90d00000000030000000000000000000000000000000000000000000000000000000000000080fcd50718000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec120080fc
d507f8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000004000000180000000c00000000000000120000000c00000001000000
54000000780000002a04000009020000b30400002e02000001000000e7670741f18607412a04000028020000070000004c000000000000000000000000000000ffffffffffffffff5c000000570068006900700070006500640000001f000000140000000900000014000000140000001200000014000000120000000c00
000001000000250000000c0000000d000080260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000120000000c0000000200000027000000180000000900000000000000ffffff0000000000250000000c000000090000005600000030000000
18020000040000002f03000063000000050000001b0260002c0360002c0307001b0207001b026000250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000009000000190000000c000000ffffff00280000000c000000050000007800000010000000000000000000
0000160000000c00000018000000520000007001000005000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000
34e412008806c200e8e412004590fb77f022f877fffffffff8e41200e0a5fc771807c20000bef90d0492b70700bef90d00000000030000000000000068f6f80d01000000e0a3fc77f7a3fc77000000000000000088ebfc0d1800000094e712000492b7070492b707e8e412004590fb77701ff877ffffffff000012008910
00780000c2000000c200030000000092b707ffffffff0010007801e512000dcab70768e4120080d0fc0d30e512004590fb77801ff877ffffffff000012003d1100780000c2000000000000bef90d0492b70700bef90d000000000492b70780fcd50760e5120000000000191223600c000000fce512006af5007864760008
00000000250000000c00000005000000180000000c00000000000000120000000c000000010000005400000090000000540200000b000000f20200003000000001000000e7670741f1860741540200002a0000000b0000004c000000000000000000000000000000ffffffffffffffff64000000ab0069006e0074006500
72006600610063006500bb00000012000000070000001200000009000000110000000b0000000a00000011000000110000001100000012000000120000000c00000002000000520000007001000009000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000088ebfc0d1800000094e7
12000492b7070492b707e8e4120088ebfc0d18000000ffffffff0492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c200
000000005018fa0d0492b7075018fa0d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000009000000120000000c0000000100000054000000a00000001f02000033000000270300005800000001000000e7670741f18607411f0200005200
00000e0000004c000000000000000000000000000000ffffffffffffffff680000004400720069006e006b0043006f006d0070006f006e0065006e007400170000000d00000009000000140000001200000018000000140000001d00000014000000140000001400000012000000140000000b000000120000000c000000
02000000250000000c0000000d000080280000000c0000000600000078000000100000000000000000000000160000000c00000018000000520000007001000006000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492b70700bef90d000000000300000000000000000000000000000000000000000000000000000000000000
5018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000000bef90d0492b70700be
f90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c00000000000000250000000c0000000d000080260000001c0000000800000000000000030000000000000000000000250000000c0000000800000012000000
0c000000010000001b00000010000000a3020000850000003600000010000000a30200009d0000001b00000010000000a3020000ac0000003600000010000000a3020000c40000001b000000100000009e020000ce000000360000001000000086020000ce0000001b0000001000000077020000ce000000360000001000
000076020000ce000000360000001000000076020000e50000001b0000001000000076020000f40000003600000010000000760200000c010000250000000c00000008000080280000000c00000008000000250000000c00000005000080260000001c000000080000000000000003000000000000000000000025000000
0c00000008000000120000000c00000001000000120000000c0000000200000027000000180000000a00000000000000ffffff0000000000250000000c0000000a000000560000002c000000890200005d000000be02000088000000040000008c028500bb028500a30260008c028500250000000c000000080000802800
00000c00000008000000250000000c00000005000080280000000c0000000a000000190000000c000000ffffff0078000000100000000000000000000000160000000c0000001800000052000000700100000a000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d000000000300000000000000000000000000
00000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d110078
0000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000a000000180000000c00000000000000250000000c0000000d000080280000000c000000070000007800000010000000000000000000
0000160000000c00000018000000520000007001000007000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa0d00000000
fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000000088fdf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff000012008910
00780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed12006af5007864760008
00000000250000000c00000007000000180000000c00000000000000250000000c0000000d000080260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c000000010000001b00000010000000a3020000850000003600000010000000a30200009d0000001b00
000010000000a3020000ac0000003600000010000000a3020000c40000001b000000100000009e020000ce000000360000001000000086020000ce0000001b0000001000000077020000ce00000036000000100000005f020000ce0000001b0000001000000050020000ce000000360000001000000038020000ce000000
1b0000001000000029020000ce000000360000001000000011020000ce0000001b0000001000000002020000ce0000003600000010000000ea010000ce0000001b00000010000000db010000ce0000003600000010000000c3010000ce0000001b00000010000000b4010000ce00000036000000100000009c010000ce00
00001b000000100000008d010000ce000000360000001000000075010000ce0000001b0000001000000066010000ce00000036000000100000004e010000ce0000001b000000100000003f010000ce000000360000001000000027010000ce0000001b0000001000000018010000ce000000360000001000000000010000
ce0000001b00000010000000f1000000ce0000003600000010000000d9000000ce0000001b00000010000000ca000000ce0000003600000010000000b2000000ce0000001b00000010000000a3000000ce00000036000000100000008b000000ce0000001b000000100000007d000000cf00000036000000100000007d00
0000e70000001b000000100000007d000000f600000036000000100000007d0000000e010000250000000c00000008000080280000000c00000008000000250000000c00000005000080260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00000001000000
120000000c0000000200000027000000180000000b00000000000000ffffff0000000000250000000c0000000b000000560000002c000000890200005d000000be02000088000000040000008c028500bb028500a30260008c028500250000000c00000008000080280000000c00000008000000250000000c0000000500
0080280000000c0000000b000000190000000c000000ffffff00280000000c0000000100000078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c0000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492b70700bef90d0000000003000000000000000000000000000000000000000000
000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c20000000000
00bef90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c00000000000000250000000c0000000d00008078000000100000000000000000000000160000000c00000018000000520000007001
00000b000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877
ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d00000000030000000000000000000000000000000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffff
ffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000b00000018000000
0c00000000000000250000000c0000000d000080280000000c00000002000000260000001c0000000200000000000000030000000000000000000000250000000c00000002000000120000000c000000010000001b00000010000000a3020000850000003600000010000000a30200009d0000001b00000010000000a302
0000ac0000003600000010000000a3020000c40000001b00000010000000a8020000ce0000003600000010000000c0020000ce0000001b00000010000000cf020000ce0000003600000010000000e7020000ce0000001b00000010000000f6020000ce00000036000000100000000e030000ce0000001b00000010000000
1d030000ce000000360000001000000035030000ce0000001b0000001000000044030000ce00000036000000100000005c030000ce0000001b000000100000006b030000ce000000360000001000000073030000ce000000360000001000000073030000de0000001b0000001000000073030000ed000000360000001000
00007303000005010000250000000c00000008000080280000000c00000002000000250000000c00000005000080260000001c0000000200000000000000030000000000000000000000250000000c00000002000000120000000c00000001000000120000000c0000000200000027000000180000000800000000000000
ffffff0000000000250000000c00000008000000560000002c000000890200005d000000be02000088000000040000008c028500bb028500a30260008c028500250000000c00000008000080280000000c00000002000000250000000c00000005000080280000000c00000008000000190000000c000000ffffff007800
0000100000000000000000000000160000000c00000018000000520000007001000008000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000000088fdf90d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000
c4ed12006af500786476000800000000250000000c00000008000000180000000c00000000000000250000000c0000000d000080280000000c0000000300000078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfffffff000000000000000000000000900100000000
00000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771610000026060f002220574d46430100
000000000100000000000000040000000020000004040000046400001807c20000bef90d0492b70700bef90d0000000003000000000000000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000
c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000000bef90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af500786476000800000000
250000000c00000003000000180000000c00000000000000250000000c0000000d000080260000001c0000000200000000000000020000000000000000000000250000000c00000002000000120000000c00000001000000570000002c00000076000000730100007104000003020000040000006f0475016f04c6017800
c60178000102250000000c00000008000080280000000c00000002000000250000000c00000005000080260000001c0000000200000000000000030000000000000000000000250000000c00000002000000120000000c00000001000000120000000c0000000200000027000000180000000c00000000000000ffffff00
00000000250000000c0000000c000000560000002c000000550400004d0100008a040000780100000400000058047501870475016f04500158047501250000000c00000008000080280000000c00000002000000250000000c00000005000080280000000c0000000c000000190000000c000000ffffff00780000001000
00000000000000000000160000000c0000001800000052000000700100000c000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d00000000030000000000000000000000000000000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffff
ffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed1200
6af500786476000800000000250000000c0000000c000000180000000c00000000000000250000000c0000000d000080280000000c0000000400000078000000100000000000000000000000160000000c00000018000000520000007001000004000000dfffffff00000000000000000000000090010000000000000000
002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000
030000000000000000000000000000000000000000000000000000000000000088fdf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801f
f877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000004000000180000000c00000000000000250000000c0000000d000080260000001c00000002000000
00000000030000000000000000000000250000000c00000002000000120000000c000000010000001b00000010000000a3020000850000003600000010000000a30200009d0000001b00000010000000a3020000ac0000003600000010000000a3020000c40000001b00000010000000a8020000ce000000360000001000
0000c0020000ce0000001b00000010000000cf020000ce0000003600000010000000e7020000ce0000001b00000010000000f6020000ce00000036000000100000000e030000ce0000001b000000100000001d030000ce000000360000001000000035030000ce0000001b0000001000000044030000ce00000036000000
100000005c030000ce0000001b000000100000006b030000ce000000360000001000000083030000ce0000001b0000001000000092030000ce0000003600000010000000aa030000ce0000001b00000010000000b9030000ce0000003600000010000000d1030000ce0000001b00000010000000e0030000ce0000003600
000010000000f8030000ce0000001b0000001000000007040000ce00000036000000100000001f040000ce0000001b000000100000002e040000ce000000360000001000000046040000ce0000001b0000001000000055040000ce00000036000000100000006d040000ce0000001b000000100000006f040000db000000
36000000100000006f040000f30000001b000000100000006f0400000201000036000000100000006f04000014010000250000000c00000008000080280000000c00000002000000250000000c00000005000080260000001c0000000200000000000000030000000000000000000000250000000c000000020000001200
00000c00000001000000120000000c0000000200000027000000180000000d00000000000000ffffff0000000000250000000c0000000d000000560000002c000000890200005d000000be02000088000000040000008c028500bb028500a30260008c028500250000000c00000008000080280000000c00000002000000
250000000c00000005000080280000000c0000000d000000190000000c000000ffffff0078000000100000000000000000000000160000000c0000001800000052000000700100000d000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c00000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492b70700bef90d00000000030000000000000000000000000000000000000000000000
00000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000000be
f90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000d000000180000000c00000000000000250000000c0000000d000080280000000c00000009000000280000000c00000005000000780000001000000000000000
00000000160000000c00000018000000520000007001000005000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d0000
0000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d00000000030000000000000000000000000000000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200
891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c00000005000000180000000c00000000000000250000000c0000000d000080280000000c00000006000000260000001c0000000600000000000000020000000000000000000000250000000c00000006000000120000000c00000001000000570000002c0000006f0100007301000071040000
03020000040000006f0475016f04c6017101c60171010102250000000c00000008000080280000000c00000006000000250000000c00000005000080260000001c0000000600000000000000030000000000000000000000250000000c00000006000000120000000c00000001000000120000000c000000020000002700
0000180000000900000000000000ffffff0000000000250000000c00000009000000560000002c000000550400004d0100008a040000780100000400000058047501870475016f04500158047501250000000c00000008000080280000000c00000006000000250000000c00000005000080280000000c00000009000000
190000000c000000ffffff0078000000100000000000000000000000160000000c00000018000000520000007001000009000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000000088fdf90d18000000000000000492b707
0492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed
120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000009000000180000000c00000000000000250000000c0000000d000080280000000c0000000a00000078000000100000000000000000000000160000000c0000001800000052000000700100000a000000dfffffff00000000
000000000000000090010000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807
c20000bef90d0492b70700bef90d0000000003000000000000000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab707
30ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000000bef90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000a000000180000000c00000000000000250000000c00
00000d000080280000000c00000007000000260000001c0000000700000000000000030000000000000000000000250000000c00000007000000120000000c000000010000001b00000010000000a3020000850000003600000010000000a30200009d0000001b00000010000000a3020000ac0000003600000010000000
a3020000c40000001b000000100000009e020000ce000000360000001000000086020000ce0000001b0000001000000077020000ce00000036000000100000005f020000ce0000001b0000001000000050020000ce000000360000001000000038020000ce0000001b0000001000000029020000ce000000360000001000
000011020000ce0000001b0000001000000002020000ce0000003600000010000000ea010000ce0000001b00000010000000db010000ce0000003600000010000000c3010000ce0000001b00000010000000b4010000ce00000036000000100000009c010000ce0000001b000000100000008d010000ce00000036000000
100000007a010000ce00000036000000100000007a010000d30000001b000000100000007a010000e200000036000000100000007a010000fa0000001b000000100000007a0100000901000036000000100000007a01000014010000250000000c00000008000080280000000c00000007000000250000000c0000000500
0080260000001c0000000700000000000000030000000000000000000000250000000c00000007000000120000000c00000001000000120000000c0000000200000027000000180000000600000000000000ffffff0000000000250000000c00000006000000560000002c000000890200005d000000be02000088000000
040000008c028500bb028500a30260008c028500250000000c00000008000080280000000c00000007000000250000000c00000005000080280000000c00000006000000190000000c000000ffffff0078000000100000000000000000000000160000000c00000018000000520000007001000006000000dfffffff0000
0000000000000000000090010000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc77
1807c20088fdf90d0492b70788fdf90d00000000030000000000000000000000000000000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dca
b70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c0000000000000025000000
0c0000000d000080280000000c0000000100000078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000000088fdf90d18000000
000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492
b7075018fa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c00000000000000250000000c0000000d000080280000000c0000000b000000260000001c0000000b00000000000000020000000000000000000000250000000c0000000b000000
120000000c00000001000000570000002c00000074030000730100007104000003020000040000006f0475016f04c6017603c60176030102250000000c00000008000080280000000c0000000b000000250000000c00000005000080260000001c0000000b00000000000000030000000000000000000000250000000c00
00000b000000120000000c00000001000000120000000c0000000200000027000000180000000700000000000000ffffff0000000000250000000c00000007000000560000002c000000550400004d0100008a040000780100000400000058047501870475016f04500158047501250000000c0000000800008028000000
0c0000000b000000250000000c00000005000080280000000c00000007000000190000000c000000ffffff0078000000100000000000000000000000160000000c00000018000000520000007001000007000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c0000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492b70700bef90d0000000003000000000000000000000000000000
000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000
c2000000000000bef90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000007000000180000000c00000000000000250000000c0000000d000080280000000c0000000800000078000000100000000000000000000000
160000000c00000018000000520000007001000008000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb
12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d00000000030000000000000000000000000000000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff0000120089100078
0000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af50078647600080000
0000250000000c00000008000000180000000c00000000000000250000000c0000000d000080280000000c00000003000000260000001c0000000300000000000000020000000000000000000000250000000c00000003000000120000000c0000000100000057000000240000006d040000730100007104000002020000
020000006f0475016f040002250000000c00000008000080280000000c00000003000000250000000c00000005000080260000001c0000000300000000000000030000000000000000000000250000000c00000003000000120000000c00000001000000120000000c0000000200000027000000180000000b0000000000
0000ffffff0000000000250000000c0000000b000000560000002c000000550400004d0100008a040000780100000400000058047501870475016f04500158047501250000000c00000008000080280000000c00000003000000250000000c00000005000080280000000c0000000b000000190000000c000000ffffff00
78000000100000000000000000000000160000000c0000001800000052000000700100000b000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000000088fdf90d18000000000000000492b7070492b707b0ec12004590fb77
701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c00
0000c4ed12006af500786476000800000000250000000c0000000b000000180000000c00000000000000250000000c0000000d000080280000000c0000000c00000078000000100000000000000000000000160000000c0000001800000052000000700100000c000000dfffffff00000000000000000000000090010000
000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492b70700be
f90d000000000300000000000000000000000000000000000000000000001802000026060f002604574d464301000000000001000000000000000400000004040000000000000464000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff0000120089100078
0000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000000bef90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af50078647600080000
0000250000000c0000000c000000180000000c00000000000000250000000c0000000d000080280000000c00000004000000260000001c0000000400000000000000020000000000000000000000250000000c00000004000000120000000c00000001000000570000002c00000071020000730100007104000003020000
040000006f0475016f04c6017302c60173020102250000000c00000008000080280000000c00000004000000250000000c00000005000080260000001c0000000400000000000000030000000000000000000000250000000c00000004000000120000000c00000001000000120000000c00000002000000270000001800
00000300000000000000ffffff0000000000250000000c00000003000000560000002c000000550400004d0100008a040000780100000400000058047501870475016f04500158047501250000000c00000008000080280000000c00000004000000250000000c00000005000080280000000c0000000300000019000000
0c000000ffffff0078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d00000000030000000000000000000000000000000000000000000000000000000000000000bef90d18000000000000000492b7070492b707
b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed12000000
0000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c00000000000000250000000c0000000d000080280000000c0000000d0000000e000000140000000000000010000000140000000400000003010800050000000b0200000000050000000c0270027b0508000000
fa02050000000000ffffff00040000002d01000007000000fc020100000000000000040000002d0101001c000000fb029cff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d0102001c000000fb021000070000000000bc0200000000
0102022253797374656d0000000000000000000000000000000000000000000000000000040000002d01030004000000f0010200040000000201020007000000fc020000ffffff000000040000002d010200040000002d0100000e0000002403050006025001e7025001e70214010602140106025001040000002d010000
040000002d01010004000000f0010200050000000102ffffff0008000000fa0200000300000000000000040000002d01020004000000020101000e0000002503050006025001e7025001e70214010602140106025001040000002d01000004000000f0010200040000002d010100040000002e0118001c000000fb02dfff
000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01020005000000090200000000040000000201010015000000320a3c012c0209000000436166654c6174746504180012000b001200140012000b000b00120004000000020101001c00
0000fb021000070000000000bc02000000000102022253797374656d0000000000000000000000000000000000000000000000000000040000002d010400040000000201020007000000fc020000ffffff000000040000002d010500040000002d0100000e000000240305000d005001ee005001ee0014010d0014010d00
5001040000002d010000040000002d01010004000000f0010500050000000102ffffff0008000000fa0200000300000000000000040000002d01050004000000020101000e000000250305000d005001ee005001ee0014010d0014010d005001040000002d01000004000000f0010500040000002d010100040000002e01
18001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01050005000000090200000000040000000201010015000000320a3c01250009000000436166654d6f63686104180012000b0012001d001400120014001200
0400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010600040000002d0100000e0000002403050002035001e3035001e30314010203140102035001040000002d010000040000002d01010004000000f0010600050000000102ffffff0008000000fa0200000300
000000000000040000002d01060004000000020101000e0000002503050002035001e3035001e30314010203140102035001040000002d01000004000000f0010600040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000
000000000000000000000000040000002d01060005000000090200000000040000000201010016000000320a3c0115030a00000043617070756363696e6f18001200140014001400120012000900140014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d01
0700040000002d0100000e00000024030500b8005e0099015e0099012200b8002200b8005e00040000002d010000040000002d01010004000000f0010700050000000102ffffff0008000000fa0200000300000000000000040000002d01070004000000020101000e00000025030500b8005e0099015e0099012200b800
2200b8005e00040000002d01000004000000f0010700040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01070005000000090200000000040000000201010016000000320a
4a00cd000a000000436f6666656553686f70180014000b000b001200120016001400140014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010800040000002d0100000e0000002403050007003d02e8003d02e80001020700010207003d02040000002d01
0000040000002d01010004000000f0010800050000000102ffffff0008000000fa0200000300000000000000040000002d01080004000000020101000e0000002503050007003d02e8003d02e80001020700010207003d02040000002d01000004000000f0010800040000002d010100040000002e0118001c000000fb02
dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d0108000500000009020000000004000000020101000f000000320a29024c000500000044656361666517001200120012000b000400000002010100040000002d01040004000000
0201020007000000fc020000ffffff000000040000002d010900040000002d0100000e00000024030500ff035001e0045001e0041401ff031401ff035001040000002d010000040000002d01010004000000f0010900050000000102ffffff0008000000fa0200000300000000000000040000002d010900040000000201
01000e00000025030500ff035001e0045001e0041401ff031401ff035001040000002d01000004000000f0010900040000002d010100040000002e0118001c000000fb02dfff000000000000bc020100000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010900
05000000090200000000040000000201010015000000320a3c012204090000004465636f7261746f727018001200120014000d0012000b0014000d000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010a00040000002d0100000e0000002403050001013d02
e2013d02e20101020101010201013d02040000002d010000040000002d01010004000000f0010a00050000000102ffffff0008000000fa0200000300000000000000040000002d010a0004000000020101000e0000002503050001013d02e2013d02e20101020101010201013d02040000002d01000004000000f0010a00
040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010a000500000009020000000004000000020101000c000000320a29025601030000004472790717000d00130004000000
02010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050009015001ea015001ea0114010901140109015001040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa020000030000000000
0000040000002d010b0004000000020101000e0000002503050009015001ea015001ea0114010901140109015001040000002d01000004000000f0010b00040000002d01010004000000f0010200040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000000000000000
00000000000000000000000000000000040000002d01020005000000090200000000040000000201010013000000320a3c01300108000000457370726573736f1600120014000d0012001200120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00
040000002d0100000e00000024030500fd013d02ea023d02ea020102fd010102fd013d02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e00000025030500fd013d02ea023d02ea020102fd010102
fd013d02040000002d01000004000000f0010b00040000002d01010004000000f0010500040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010500050000000902000000000400000002010100
1b000000320a290201020d0000004578747261457370726573736f02160012000b000d0012001600120014000d0012001200120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050005033d02e6033d02e603
01020503010205033d02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e0000002503050005033d02e6033d02e60301020503010205033d02040000002d01000004000000f0010b00040000002d01
010004000000f0010600040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d0106000500000009020000000004000000020101000c000000320a2902580303000000576574071f0012000b000400
000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e00000024030500ff033c02e0043c02e0040002ff030002ff033c02040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa02000003000000
00000000040000002d010b0004000000020101000e00000025030500ff033c02e0043c02e0040002ff030002ff033c02040000002d01000004000000f0010b00040000002d01010004000000f0010700040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000
000000000000000000000000000000000000040000002d01070005000000090200000000040000000201010012000000320a28022a0407000000576869707065646f1f001400090014001400120014000400000002010100040000002d01040008000000fa0200000300000000000000040000002d010b00040000000201
0100040000000201020007000000fc020000ffffff000000040000002d010c000e000000240305001b0260002c0360002c0307001b0207001b026000040000002d01000004000000f0010b00040000002d01010004000000f0010c00050000000102ffffff0004000000f0010800040000002e0118001c000000fb02dfff
00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01080005000000090200000000040000000201010018000000320a2a0054020b000000ab696e74657266616365bb73120007001200090011000b000a00110011001100120004000000
020102001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010b0004000000020101001c000000320a52001f020e0000004472696e6b436f6d706f6e656e7417000d00090014001200180014001d00140014001400
120014000b000400000002010200040000002d01040004000000f0010900040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01090005000000090200000000040000002d01040008000000fa02
00000300000000000000040000002d010c0004000000020101000500000014028500a3020500000013029d00a302050000001402ac00a302050000001302c400a302050000001402ce009e02050000001302ce008602050000001402ce007702050000001302ce007602050000001302e5007602050000001402f4007602
0500000013020c017602040000002d01000004000000f0010c00040000002d01010008000000fa0200000300000000000000040000002d010c000400000002010100040000000201020007000000fc020000ffffff000000040000002d010d000c000000240304008c028500bb028500a30260008c028500040000002d01
000004000000f0010c00040000002d01010004000000f0010d00050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010c0005000000090200000000040000002d010400
04000000f0010a00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010a0005000000090200000000040000002d01040008000000fa0200000300000000000000040000002d010d0004000000
020101000500000014028500a3020500000013029d00a302050000001402ac00a302050000001302c400a302050000001402ce009e02050000001302ce008602050000001402ce007702050000001302ce005f02050000001402ce005002050000001302ce003802050000001402ce002902050000001302ce0011020500
00001402ce000202050000001302ce00ea01050000001402ce00db01050000001302ce00c301050000001402ce00b401050000001302ce009c01050000001402ce008d01050000001302ce007501050000001402ce006601050000001302ce004e01050000001402ce003f01050000001302ce002701050000001402ce00
1801050000001302ce000001050000001402ce00f100050000001302ce00d900050000001402ce00ca00050000001302ce00b200050000001402ce00a300050000001302ce008b00050000001402cf007d00050000001302e7007d00050000001402f6007d000500000013020e017d00040000002d01000004000000f001
0d00040000002d01010008000000fa0200000300000000000000040000002d010d000400000002010100040000000201020007000000fc020000ffffff000000040000002d010e000c000000240304008c028500bb028500a30260008c028500040000002d01000004000000f0010d00040000002d01010004000000f001
0e00050000000102ffffff0004000000f0010200040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01020005000000090200000000040000002d010400040000002e0118001c000000fb02dfff
00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010d0005000000090200000000040000002d01040004000000f001050008000000fa0200000300000000000000040000002d01050004000000020101000500000014028500a3020500
000013029d00a302050000001402ac00a302050000001302c400a302050000001402ce00a802050000001302ce00c002050000001402ce00cf02050000001302ce00e702050000001402ce00f602050000001302ce000e03050000001402ce001d03050000001302ce003503050000001402ce004403050000001302ce00
5c03050000001402ce006b03050000001302ce007303050000001302de007303050000001402ed00730305000000130205017303040000002d01000004000000f0010500040000002d01010008000000fa0200000300000000000000040000002d0105000400000002010100040000000201020007000000fc020000ffff
ff000000040000002d010e000c000000240304008c028500bb028500a30260008c028500040000002d01000004000000f0010500040000002d01010004000000f0010e00050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000000000000000
00000000000000000000000000000000040000002d01050005000000090200000000040000002d01040004000000f0010600040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01060005000000
090200000000040000002d01040008000000fa0200000200000000000000040000002d010e0004000000020101000c000000250304006f0475016f04c6017800c60178000102040000002d01000004000000f0010e00040000002d01010008000000fa0200000300000000000000040000002d010e000400000002010100
040000000201020007000000fc020000ffffff000000040000002d010f000c0000002403040058047501870475016f04500158047501040000002d01000004000000f0010e00040000002d01010004000000f0010f00050000000102ffffff00040000002e0118001c000000fb02dfff0000000000009001000000000000
0020417269616c000000000000000000000000000000000000000000000000000000040000002d010e0005000000090200000000040000002d01040004000000f0010700040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000
000000000000040000002d01070005000000090200000000040000002d01040008000000fa0200000300000000000000040000002d010f0004000000020101000500000014028500a3020500000013029d00a302050000001402ac00a302050000001302c400a302050000001402ce00a802050000001302ce00c0020500
00001402ce00cf02050000001302ce00e702050000001402ce00f602050000001302ce000e03050000001402ce001d03050000001302ce003503050000001402ce004403050000001302ce005c03050000001402ce006b03050000001302ce008303050000001402ce009203050000001302ce00aa03050000001402ce00
b903050000001302ce00d103050000001402ce00e003050000001302ce00f803050000001402ce000704050000001302ce001f04050000001402ce002e04050000001302ce004604050000001402ce005504050000001302ce006d04050000001402db006f04050000001302f3006f0405000000140202016f0405000000
130214016f04040000002d01000004000000f0010f00040000002d01010008000000fa0200000300000000000000040000002d010f000400000002010100040000000201020007000000fc020000ffffff000000040000002d0110000c000000240304008c028500bb028500a30260008c028500040000002d0100000400
0000f0010f00040000002d01010004000000f0011000050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010f0005000000090200000000040000002d01040004000000
f0010b0004000000f0010800040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01080005000000090200000000040000002d01040004000000f001090008000000fa0200000200000000000000
040000002d01090004000000020101000c000000250304006f0475016f04c6017101c60171010102040000002d01000004000000f0010900040000002d01010008000000fa0200000300000000000000040000002d0109000400000002010100040000000201020007000000fc020000ffffff000000040000002d010b00
0c0000002403040058047501870475016f04500158047501040000002d01000004000000f0010900040000002d01010004000000f0010b00050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000000000000000000000000000000000000000
00000000040000002d01090005000000090200000000040000002d01040004000000f0010c00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010b0005000000090200000000040000002d01
040004000000f0010a0008000000fa0200000300000000000000040000002d010a0004000000020101000500000014028500a3020500000013029d00a302050000001402ac00a302050000001302c400a302050000001402ce009e02050000001302ce008602050000001402ce007702050000001302ce005f0205000000
1402ce005002050000001302ce003802050000001402ce002902050000001302ce001102050000001402ce000202050000001302ce00ea01050000001402ce00db01050000001302ce00c301050000001402ce00b401050000001302ce009c01050000001402ce008d01050000001302ce007a01050000001302d3007a01
050000001402e2007a01050000001302fa007a0105000000140209017a0105000000130214017a01040000002d01000004000000f0010a00040000002d01010008000000fa0200000300000000000000040000002d010a000400000002010100040000000201020007000000fc020000ffffff000000040000002d010c00
0c000000240304008c028500bb028500a30260008c028500040000002d01000004000000f0010a00040000002d01010004000000f0010c00050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000000000000000000000000000000000000000
00000000040000002d010a0005000000090200000000040000002d01040004000000f0010200040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01020005000000090200000000040000002d01
040004000000f0010d0008000000fa0200000200000000000000040000002d010c0004000000020101000c000000250304006f0475016f04c6017603c60176030102040000002d01000004000000f0010c00040000002d01010008000000fa0200000300000000000000040000002d010c00040000000201010004000000
0201020007000000fc020000ffffff000000040000002d010d000c0000002403040058047501870475016f04500158047501040000002d01000004000000f0010c00040000002d01010004000000f0010d00050000000102ffffff00040000002e0118001c000000fb02dfff000000000000900100000000000000204172
69616c000000000000000000000000000000000000000000000000000000040000002d010c0005000000090200000000040000002d01040004000000f0010500040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c00000000000000000000000000000000000000000000000000
0000040000002d01050005000000090200000000040000002d01040004000000f001060008000000fa0200000200000000000000040000002d010600040000000201010008000000250302006f0475016f040002040000002d01000004000000f0010600040000002d01010008000000fa02000003000000000000000400
00002d0106000400000002010100040000000201020007000000fc020000ffffff000000040000002d010d000c0000002403040058047501870475016f04500158047501040000002d01000004000000f0010600040000002d01010004000000f0010d00050000000102ffffff00040000002e0118001c000000fb02dfff
00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01060005000000090200000000040000002d01040004000000f0010e00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c00000000000000
0000000000000000000000000000000000000000040000002d010d0005000000090200000000040000002d01040004000000f001070008000000fa0200000200000000000000040000002d01070004000000020101000c000000250304006f0475016f04c6017302c60173020102040000002d01000004000000f0010700
040000002d01010008000000fa0200000300000000000000040000002d0107000400000002010100040000000201020007000000fc020000ffffff000000040000002d010e000c0000002403040058047501870475016f04500158047501040000002d01000004000000f0010700040000002d01010004000000f0010e00
050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01070005000000090200000000040000002d01040004000000f0010f00030000000000}{\result {
{\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw11875\pich5286\picwgoal6732\pichgoal2997\wmetafile8\bliptag1407276235\blipupi300{\*\blipuid 53e154cb6b8a08a24648d9dbcd55bc95}
010009000003e244000011001610000000001610000026060f002220574d4643010000000000010020fc00000000040000000020000004440000046400000100
00008c0000000400000004000000e3040000400200000000000000000000632e0000a614000020454d460000010004640000fa0200000e0000000f0000006c00
0000000000000c090000d20c0000c400000016010000000000000000000000000000f8fd0200743d040056004900530049004f00000044007200610077006900
6e006700000000000000250000000c00000008000080250000000c000000050000805200000070010000010000009cffffff0000000000000000000000009001
0000000000000000002041007200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000c20000000000000000000000000000000000000000000d0000000000
00000000000000000000000000000000000000000000000000006854ff0d6800000000000000409ffa0d409ffa0d30f112004590fb77701ff877ffffffff40f1
1200891000780000c200000000005c0000004c9ffa0dffffffff7c54ff0d07b634607c54ff0d00000000200000009c54ff0d6854ff0dd4b534604c9ffa0d6854
ff0d00000000000000006476000800000000250000000c00000001000000250000000c0000000e000080280000000c000000010000000a000000100000000000
00000000000009000000100000007b05000071020000120000000c0000000200000027000000180000000100000000000000ffffff0000000000250000000c00
000001000000250000000c0000000800008056000000300000000602000014010000e7020000500100000500000006025001e7025001e7021401060214010602
5001250000000c00000008000080250000000c00000005000080280000000c00000001000000190000000c000000ffffff00260000001c000000010000000000
0000030000000000000000000000250000000c00000001000000120000000c0000000100000057000000300000000302000011010000ea020000530100000500
000006025001e7025001e70214010602140106025001250000000c00000008000080280000000c00000001000000250000000c00000005000080780000001000
00000000000000000000160000000c00000018000000520000007001000001000000dfffffff000000000000000000000000bc02000000000000000000204100
7200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d50700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20080fcd5070492b70780fcd50700000000030000000000
00000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff0000
1200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec12005018fa0df8ec12004590fb77801ff877ffffffff0000
12003d1100780000c2000000000080fcd5070492b70780fcd507000000000492b70780fcd50728ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c00000001000000180000000c00000000000000120000000c0000000100000054000000840000002c0200001d010000c00200004201
000001000000e7670741f18607412c0200003c010000090000004c000000000000000000000000000000ffffffffffffffff6000000043006100660065004c00
6100740074006500000018000000120000000b0000001200000014000000120000000b0000000b00000012000000120000000c00000001000000250000000c00
00000d000080120000000c0000000200000027000000180000000200000000000000ffffff0000000000250000000c00000002000000250000000c0000000800
008056000000300000000d00000014010000ee00000050010000050000000d005001ee005001ee0014010d0014010d005001250000000c000000080000802500
00000c00000005000080280000000c00000002000000190000000c000000ffffff00260000001c00000002000000000000000300000000000000000000002500
00000c00000002000000120000000c0000000100000057000000300000000a00000011010000f100000053010000050000000d005001ee005001ee0014010d00
14010d005001250000000c00000008000080280000000c00000002000000250000000c0000000500008078000000100000000000000000000000160000000c00
000018000000520000007001000002000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc0d00000000fceb12008806c200b0ec
12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20080d0fc0d0492b70780d0fc0d0000000003000000000000000000000000000000000000000000
0000000000000000000080fcd50718000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c2000300
00000092b707ffffffff0010007801ec120035e4b70730ec120080fcd507f8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000080d0
fc0d0492b70780d0fc0d000000000492b70780d0fc0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000200
0000180000000c00000000000000120000000c000000010000005400000084000000250000001d010000d40000004201000001000000e7670741f18607412500
00003c010000090000004c000000000000000000000000000000ffffffffffffffff6000000043006100660065004d006f006300680061000000180000001200
00000b000000120000001d00000014000000120000001400000012000000120000000c00000001000000250000000c0000000d000080120000000c0000000200
000027000000180000000300000000000000ffffff0000000000250000000c00000003000000250000000c000000080000805600000030000000020300001401
0000e3030000500100000500000002035001e3035001e30314010203140102035001250000000c00000008000080250000000c00000005000080280000000c00
000003000000190000000c000000ffffff00260000001c0000000300000000000000030000000000000000000000250000000c00000003000000120000000c00
0000010000005700000030000000ff02000011010000e6030000530100000500000002035001e3035001e30314010203140102035001250000000c0000000800
0080280000000c00000003000000250000000c0000000500008078000000100000000000000000000000160000000c0000001800000052000000700100000300
0000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec
1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000000080d0fc0d1800
0000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec
120035e4b70730ec120080d0fc0df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492
b7075018fa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c000000000000001200
00000c000000010000005400000088000000150300001d010000cf0300004201000001000000e7670741f1860741150300003c0100000a0000004c0000000000
00000000000000000000ffffffffffffffff60000000430061007000700075006300630069006e006f0018000000120000001400000014000000140000001200
000012000000090000001400000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000400
000000000000ffffff0000000000250000000c00000004000000250000000c000000080000805600000030000000b800000022000000990100005e0000000500
0000b8005e0099015e0099012200b8002200b8005e00250000000c00000008000080250000000c00000005000080280000000c00000004000000190000000c00
0000ffffff00260000001c0000000400000000000000030000000000000000000000250000000c00000004000000120000000c00000001000000570000003000
0000b50000001f0000009c0100006100000005000000b8005e0099015e0099012200b8002200b8005e00250000000c00000008000080280000000c0000000400
0000250000000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000004000000dfffffff000000000000
000000000000bc020000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000d50700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20080fc
d5070492b70780fcd5070000000003000000000000000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492
b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec12005018
fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000080fcd5070492b70780fcd507000000000492b70780fcd50728ed12000000
0000191223600c000000c4ed12006af500786476000800000000250000000c00000004000000180000000c00000000000000120000000c000000010000005400
000088000000cd0000002b000000840100005000000001000000e7670741f1860741cd0000004a0000000a0000004c000000000000000000000000000000ffff
ffffffffffff6000000043006f006600660065006500530068006f00700018000000140000000b0000000b000000120000001200000016000000140000001400
000014000000120000000c00000001000000250000000c0000000d000080120000000c0000000200000027000000180000000500000000000000ffffff000000
0000250000000c00000005000000250000000c0000000800008056000000300000000700000001020000e80000003d0200000500000007003d02e8003d02e800
01020700010207003d02250000000c00000008000080250000000c00000005000080280000000c00000005000000190000000c000000ffffff00260000001c00
00000500000000000000030000000000000000000000250000000c00000005000000120000000c00000001000000570000003000000004000000fe010000eb00
0000400200000500000007003d02e8003d02e80001020700010207003d02250000000c00000008000080280000000c00000005000000250000000c0000000500
008078000000100000000000000000000000160000000c00000018000000520000007001000005000000dfffffff000000000000000000000000bc0200000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000fc0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20080d0fc0d0492b70780d0fc0d0000
0000030000000000000000000000000000000000000000000000000000000000000080fcd50718000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec120080fcd507f8ec12004590fb77801f
f877ffffffff000012003d1100780000c2000000000080d0fc0d0492b70780d0fc0d000000000492b70780d0fc0d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000005000000180000000c00000000000000120000000c00000001000000540000006c0000004c0000000a02
0000a40000002f02000001000000e7670741f18607414c00000029020000050000004c000000000000000000000000000000ffffffffffffffff580000004400
65006300610066000000170000001200000012000000120000000b000000120000000c00000001000000250000000c0000000d000080120000000c0000000200
000027000000180000000600000000000000ffffff0000000000250000000c00000006000000250000000c000000080000805600000030000000ff0300001401
0000e00400005001000005000000ff035001e0045001e0041401ff031401ff035001250000000c00000008000080250000000c00000005000080280000000c00
000006000000190000000c000000ffffff00260000001c0000000600000000000000030000000000000000000000250000000c00000006000000120000000c00
0000010000005700000030000000fc03000011010000e30400005301000005000000ff035001e0045001e0041401ff031401ff035001250000000c0000000800
0080280000000c00000006000000250000000c0000000500008078000000100000000000000000000000160000000c0000001800000052000000700100000600
0000dfffffff000000000000000000000000bc020000010000000000002041007200690061006c00000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec
1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000000080d0fc0d1800
0000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec
12006d7db80730ec120080d0fc0df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492
b7075018fa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c000000000000001200
00000c000000010000005400000084000000220400001d010000bf0400004201000001000000e7670741f1860741220400003c010000090000004c0000000000
00000000000000000000ffffffffffffffff600000004400650063006f007200610074006f0072000000180000001200000012000000140000000d0000001200
00000b000000140000000d000000120000000c00000001000000250000000c0000000d000080120000000c000000020000002700000018000000070000000000
0000ffffff0000000000250000000c00000007000000250000000c0000000800008056000000300000000101000001020000e20100003d020000050000000101
3d02e2013d02e20101020101010201013d02250000000c00000008000080250000000c00000005000080280000000c00000007000000190000000c000000ffff
ff00260000001c0000000700000000000000030000000000000000000000250000000c00000007000000120000000c000000010000005700000030000000fe00
0000fe010000e5010000400200000500000001013d02e2013d02e20101020101010201013d02250000000c00000008000080280000000c000000070000002500
00000c0000000500008078000000100000000000000000000000160000000c00000018000000520000007001000007000000dfffffff00000000000000000000
0000bc020000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492
b70788fdf90d0000000003000000000000000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec
12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec12005018fa0df8ec
12004590fb77801ff877ffffffff000012003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed1200000000001912
23600c000000c4ed12006af500786476000800000000250000000c00000007000000180000000c00000000000000120000000c00000001000000540000006000
0000560100000a0200008c0100002f02000001000000e7670741f18607415601000029020000030000004c000000000000000000000000000000ffffffffffff
ffff540000004400720079000000170000000d00000013000000120000000c00000001000000250000000c0000000d000080120000000c000000020000002700
0000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000000901000014010000ea01
0000500100000500000009015001ea015001ea0114010901140109015001250000000c00000008000080250000000c00000005000080280000000c0000000800
0000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100
000057000000300000000601000011010000ed010000530100000500000009015001ea015001ea0114010901140109015001250000000c000000080000802800
00000c00000008000000250000000c00000005000080280000000c0000000100000078000000100000000000000000000000160000000c000000180000005200
00007001000001000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000fc0d00000000fceb12008806c200b0ec12004590fb77f022
f877ffffffffc0ec1200e0a5fc771807c20088ebfc0d0492b70788ebfc0d00000000030000000000000000000000000000000000000000000000000000000000
000088fdf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffff
ffff0010007801ec120035e4b70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088ebfc0d0492b70788eb
fc0d000000000492b70788ebfc0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000001000000180000000c00
000000000000120000000c00000001000000540000007c000000300100001d010000c20100004201000001000000e7670741f1860741300100003c0100000800
00004c000000000000000000000000000000ffffffffffffffff5c00000045007300700072006500730073006f001600000012000000140000000d0000001200
0000120000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c000000020000002700000018000000080000000000
0000ffffff0000000000250000000c00000008000000250000000c000000080000805600000030000000fd01000001020000ea0200003d02000005000000fd01
3d02ea023d02ea020102fd010102fd013d02250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffff
ff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c000000010000005700000030000000fa01
0000fe010000ed0200004002000005000000fd013d02ea023d02ea020102fd010102fd013d02250000000c00000008000080280000000c000000080000002500
00000c00000005000080280000000c0000000200000078000000100000000000000000000000160000000c00000018000000520000007001000002000000dfff
ffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5
fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000000088ebfc0d180000000000
00000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12001610
000026060f002220574d464301000000000001000000000000000400000000200000042400000464000035e4b70730ec120088ebfc0df8ec12004590fb77801f
f877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000002000000180000000c00000000000000120000000c00000001000000540000009c000000010200000a02
0000e50200002f02000001000000e7670741f186074101020000290200000d0000004c000000000000000000000000000000ffffffffffffffff680000004500
780074007200610045007300700072006500730073006f00000016000000120000000b0000000d000000120000001600000012000000140000000d0000001200
0000120000001200000014000000120000000c00000001000000250000000c0000000d000080120000000c000000020000002700000018000000080000000000
0000ffffff0000000000250000000c00000008000000250000000c0000000800008056000000300000000503000001020000e60300003d020000050000000503
3d02e6033d02e60301020503010205033d02250000000c00000008000080250000000c00000005000080280000000c00000008000000190000000c000000ffff
ff00260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c0000000100000057000000300000000203
0000fe010000e9030000400200000500000005033d02e6033d02e60301020503010205033d02250000000c00000008000080280000000c000000080000002500
00000c00000005000080280000000c0000000300000078000000100000000000000000000000160000000c00000018000000520000007001000003000000dfff
ffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000d50700000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5
fc771807c20080fcd5070492b70780fcd5070000000003000000000000000000000000000000000000000000000000000000000000005018fa0d180000000000
00000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4
b70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000080fcd5070492b70780fcd507000000000492b70780fc
d50728ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000003000000180000000c00000000000000120000000c00
0000010000005400000060000000580300000a020000930300002f02000001000000e7670741f18607415803000029020000030000004c000000000000000000
000000000000ffffffffffffffff5400000057006500740000001f000000120000000b000000120000000c00000001000000250000000c0000000d0000801200
00000c0000000200000027000000180000000800000000000000ffffff0000000000250000000c00000008000000250000000c00000008000080560000003000
0000ff03000000020000e00400003c02000005000000ff033c02e0043c02e0040002ff030002ff033c02250000000c00000008000080250000000c0000000500
0080280000000c00000008000000190000000c000000ffffff00260000001c0000000800000000000000030000000000000000000000250000000c0000000800
0000120000000c000000010000005700000030000000fc030000fd010000e30400003f02000005000000ff033c02e0043c02e0040002ff030002ff033c022500
00000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000004000000780000001000000000000000000000001600
00000c00000018000000520000007001000004000000dfffffff000000000000000000000000bc020000000000000000002041007200690061006c0000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806
c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d00000000030000000000000000000000000000000000
000000000000000000000000000080fcd50718000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000
c200030000000092b707ffffffff0010007801ec120035e4b70730ec120080fcd507f8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000
000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00
000004000000180000000c00000000000000120000000c0000000100000054000000780000002a04000009020000b30400002e02000001000000e7670741f186
07412a04000028020000070000004c000000000000000000000000000000ffffffffffffffff5c000000570068006900700070006500640000001f0000001400
00000900000014000000140000001200000014000000120000000c00000001000000250000000c0000000d000080260000001c00000008000000000000000300
00000000000000000000250000000c00000008000000120000000c00000001000000120000000c0000000200000027000000180000000900000000000000ffff
ff0000000000250000000c00000009000000560000003000000018020000040000002f03000063000000050000001b0260002c0360002c0307001b0207001b02
6000250000000c00000008000080280000000c00000008000000250000000c00000005000080280000000c00000009000000190000000c000000ffffff002800
00000c0000000500000078000000100000000000000000000000160000000c00000018000000520000007001000005000000dfffffff00000000000000000000
000090010000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000f90d0000000034e412008806c200e8e412004590fb77f022f877fffffffff8e41200e0a5fc771807c20000bef90d0492
b70700bef90d00000000030000000000000068f6f80d01000000e0a3fc77f7a3fc77000000000000000088ebfc0d1800000094e712000492b7070492b707e8e4
12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801e512000dcab70768e4120080d0fc0d30e5
12004590fb77801ff877ffffffff000012003d1100780000c2000000000000bef90d0492b70700bef90d000000000492b70780fcd50760e51200000000001912
23600c000000fce512006af500786476000800000000250000000c00000005000000180000000c00000000000000120000000c00000001000000540000009000
0000540200000b000000f20200003000000001000000e7670741f1860741540200002a0000000b0000004c000000000000000000000000000000ffffffffffff
ffff64000000ab0069006e007400650072006600610063006500bb00000012000000070000001200000009000000110000000b0000000a000000110000001100
00001100000012000000120000000c00000002000000520000007001000009000000dfffffff000000000000000000000000bc02000000000000000000204100
7200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000
000088ebfc0d1800000094e712000492b7070492b707e8e4120088ebfc0d18000000ffffffff0492b7070492b707b0ec12004590fb77701ff877ffffffff0000
1200891000780000c2000000c200030000000092b707ffffffff0010007801ec120035e4b70730ec120088fdf90df8ec12004590fb77801ff877ffffffff0000
12003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c00000009000000120000000c0000000100000054000000a00000001f02000033000000270300005800000001000000e7670741f186
07411f020000520000000e0000004c000000000000000000000000000000ffffffffffffffff680000004400720069006e006b0043006f006d0070006f006e00
65006e007400170000000d00000009000000140000001200000018000000140000001d00000014000000140000001400000012000000140000000b0000001200
00000c00000002000000250000000c0000000d000080280000000c0000000600000078000000100000000000000000000000160000000c000000180000005200
00007001000006000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c0000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022
f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492b70700bef90d00000000030000000000000000000000000000000000000000000000000000000000
00005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffff
ffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000000bef90d0492b70700be
f90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000006000000180000000c00
000000000000250000000c0000000d000080260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00
0000010000001b00000010000000a3020000850000003600000010000000a30200009d0000001b00000010000000a3020000ac0000003600000010000000a302
0000c40000001b000000100000009e020000ce000000360000001000000086020000ce0000001b0000001000000077020000ce00000036000000100000007602
0000ce000000360000001000000076020000e50000001b0000001000000076020000f40000003600000010000000760200000c010000250000000c0000000800
0080280000000c00000008000000250000000c00000005000080260000001c0000000800000000000000030000000000000000000000250000000c0000000800
0000120000000c00000001000000120000000c0000000200000027000000180000000a00000000000000ffffff0000000000250000000c0000000a0000005600
00002c000000890200005d000000be02000088000000040000008c028500bb028500a30260008c028500250000000c00000008000080280000000c0000000800
0000250000000c00000005000080280000000c0000000a000000190000000c000000ffffff0078000000100000000000000000000000160000000c0000001800
000052000000700100000a000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c00000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590
fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d000000000300000000000000000000000000000000000000000000000000
00000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092
b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088fdf90d0492
b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000a0000001800
00000c00000000000000250000000c0000000d000080280000000c0000000700000078000000100000000000000000000000160000000c000000180000005200
00007001000007000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c0000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022
f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000
000088fdf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffff
ffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018
fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c00000007000000180000000c00
000000000000250000000c0000000d000080260000001c0000000800000000000000030000000000000000000000250000000c00000008000000120000000c00
0000010000001b00000010000000a3020000850000003600000010000000a30200009d0000001b00000010000000a3020000ac0000003600000010000000a302
0000c40000001b000000100000009e020000ce000000360000001000000086020000ce0000001b0000001000000077020000ce00000036000000100000005f02
0000ce0000001b0000001000000050020000ce000000360000001000000038020000ce0000001b0000001000000029020000ce00000036000000100000001102
0000ce0000001b0000001000000002020000ce0000003600000010000000ea010000ce0000001b00000010000000db010000ce0000003600000010000000c301
0000ce0000001b00000010000000b4010000ce00000036000000100000009c010000ce0000001b000000100000008d010000ce00000036000000100000007501
0000ce0000001b0000001000000066010000ce00000036000000100000004e010000ce0000001b000000100000003f010000ce00000036000000100000002701
0000ce0000001b0000001000000018010000ce000000360000001000000000010000ce0000001b00000010000000f1000000ce0000003600000010000000d900
0000ce0000001b00000010000000ca000000ce0000003600000010000000b2000000ce0000001b00000010000000a3000000ce00000036000000100000008b00
0000ce0000001b000000100000007d000000cf00000036000000100000007d000000e70000001b000000100000007d000000f600000036000000100000007d00
00000e010000250000000c00000008000080280000000c00000008000000250000000c00000005000080260000001c0000000800000000000000030000000000
000000000000250000000c00000008000000120000000c00000001000000120000000c0000000200000027000000180000000b00000000000000ffffff000000
0000250000000c0000000b000000560000002c000000890200005d000000be02000088000000040000008c028500bb028500a30260008c028500250000000c00
000008000080280000000c00000008000000250000000c00000005000080280000000c0000000b000000190000000c000000ffffff00280000000c0000000100
000078000000100000000000000000000000160000000c00000018000000520000007001000001000000dfffffff000000000000000000000000900100000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492b70700bef90d0000
000003000000000000000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801f
f877ffffffff000012003d1100780000c2000000000000bef90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000001000000180000000c00000000000000250000000c0000000d0000807800000010000000000000000000
0000160000000c0000001800000052000000700100000b000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c00
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb
12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d000000000300000000000000000000000000
00000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000
c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d1100780000
c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af5007864760008000000002500
00000c0000000b000000180000000c00000000000000250000000c0000000d000080280000000c00000002000000260000001c00000002000000000000000300
00000000000000000000250000000c00000002000000120000000c000000010000001b00000010000000a3020000850000003600000010000000a30200009d00
00001b00000010000000a3020000ac0000003600000010000000a3020000c40000001b00000010000000a8020000ce0000003600000010000000c0020000ce00
00001b00000010000000cf020000ce0000003600000010000000e7020000ce0000001b00000010000000f6020000ce00000036000000100000000e030000ce00
00001b000000100000001d030000ce000000360000001000000035030000ce0000001b0000001000000044030000ce00000036000000100000005c030000ce00
00001b000000100000006b030000ce000000360000001000000073030000ce000000360000001000000073030000de0000001b0000001000000073030000ed00
000036000000100000007303000005010000250000000c00000008000080280000000c00000002000000250000000c00000005000080260000001c0000000200
000000000000030000000000000000000000250000000c00000002000000120000000c00000001000000120000000c0000000200000027000000180000000800
000000000000ffffff0000000000250000000c00000008000000560000002c000000890200005d000000be02000088000000040000008c028500bb028500a302
60008c028500250000000c00000008000080280000000c00000002000000250000000c00000005000080280000000c00000008000000190000000c000000ffff
ff0078000000100000000000000000000000160000000c00000018000000520000007001000008000000dfffffff000000000000000000000000900100000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d0000
0000030000000000000000000000000000000000000000000000000000000000000088fdf90d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801f
f877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000008000000180000000c00000000000000250000000c0000000d000080280000000c000000030000007800
0000100000000000000000000000160000000c00000018000000520000007001000003000000dfffffff00000000000000000000000090010000000000000000
002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771610000026060f002220574d46430100000000000100
000000000000040000000020000004040000046400001807c20000bef90d0492b70700bef90d0000000003000000000000000000000000000000000000000000
000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c2000300
00000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000000be
f90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000300
0000180000000c00000000000000250000000c0000000d000080260000001c0000000200000000000000020000000000000000000000250000000c0000000200
0000120000000c00000001000000570000002c00000076000000730100007104000003020000040000006f0475016f04c6017800c60178000102250000000c00
000008000080280000000c00000002000000250000000c00000005000080260000001c0000000200000000000000030000000000000000000000250000000c00
000002000000120000000c00000001000000120000000c0000000200000027000000180000000c00000000000000ffffff0000000000250000000c0000000c00
0000560000002c000000550400004d0100008a040000780100000400000058047501870475016f04500158047501250000000c00000008000080280000000c00
000002000000250000000c00000005000080280000000c0000000c000000190000000c000000ffffff0078000000100000000000000000000000160000000c00
00001800000052000000700100000c000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d00000000fceb12008806c200b0ec
12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d0000000003000000000000000000000000000000000000000000
0000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c2000300
00000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000088fd
f90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000c00
0000180000000c00000000000000250000000c0000000d000080280000000c0000000400000078000000100000000000000000000000160000000c0000001800
0000520000007001000004000000dfffffff00000000000000000000000090010000000000000000002041007200690061006c00000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590
fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d000000000300000000000000000000000000000000000000000000000000
00000000000088fdf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092
b707ffffffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492
b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c000000040000001800
00000c00000000000000250000000c0000000d000080260000001c0000000200000000000000030000000000000000000000250000000c000000020000001200
00000c000000010000001b00000010000000a3020000850000003600000010000000a30200009d0000001b00000010000000a3020000ac000000360000001000
0000a3020000c40000001b00000010000000a8020000ce0000003600000010000000c0020000ce0000001b00000010000000cf020000ce000000360000001000
0000e7020000ce0000001b00000010000000f6020000ce00000036000000100000000e030000ce0000001b000000100000001d030000ce000000360000001000
000035030000ce0000001b0000001000000044030000ce00000036000000100000005c030000ce0000001b000000100000006b030000ce000000360000001000
000083030000ce0000001b0000001000000092030000ce0000003600000010000000aa030000ce0000001b00000010000000b9030000ce000000360000001000
0000d1030000ce0000001b00000010000000e0030000ce0000003600000010000000f8030000ce0000001b0000001000000007040000ce000000360000001000
00001f040000ce0000001b000000100000002e040000ce000000360000001000000046040000ce0000001b0000001000000055040000ce000000360000001000
00006d040000ce0000001b000000100000006f040000db00000036000000100000006f040000f30000001b000000100000006f04000002010000360000001000
00006f04000014010000250000000c00000008000080280000000c00000002000000250000000c00000005000080260000001c00000002000000000000000300
00000000000000000000250000000c00000002000000120000000c00000001000000120000000c0000000200000027000000180000000d00000000000000ffff
ff0000000000250000000c0000000d000000560000002c000000890200005d000000be02000088000000040000008c028500bb028500a30260008c0285002500
00000c00000008000080280000000c00000002000000250000000c00000005000080280000000c0000000d000000190000000c000000ffffff00780000001000
00000000000000000000160000000c0000001800000052000000700100000d000000dfffffff0000000000000000000000009001000000000000000000204100
7200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492b70700bef90d00000000030000000000
00000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff0000
1200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801ff877ffffffff0000
12003d1100780000c2000000000000bef90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c0000000d000000180000000c00000000000000250000000c0000000d000080280000000c00000009000000280000000c0000000500
000078000000100000000000000000000000160000000c00000018000000520000007001000005000000dfffffff000000000000000000000000900100000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d0000
0000030000000000000000000000000000000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801f
f877ffffffff000012003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000005000000180000000c00000000000000250000000c0000000d000080280000000c000000060000002600
00001c0000000600000000000000020000000000000000000000250000000c00000006000000120000000c00000001000000570000002c0000006f0100007301
00007104000003020000040000006f0475016f04c6017101c60171010102250000000c00000008000080280000000c00000006000000250000000c0000000500
0080260000001c0000000600000000000000030000000000000000000000250000000c00000006000000120000000c00000001000000120000000c0000000200
000027000000180000000900000000000000ffffff0000000000250000000c00000009000000560000002c000000550400004d0100008a040000780100000400
000058047501870475016f04500158047501250000000c00000008000080280000000c00000006000000250000000c00000005000080280000000c0000000900
0000190000000c000000ffffff0078000000100000000000000000000000160000000c00000018000000520000007001000009000000dfffffff000000000000
00000000000090010000000000000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018
fa0d0492b7075018fa0d00000000030000000000000000000000000000000000000000000000000000000000000088fdf90d18000000000000000492b7070492
b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120088fd
f90df8ec12004590fb77801ff877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed12000000
0000191223600c000000c4ed12006af500786476000800000000250000000c00000009000000180000000c00000000000000250000000c0000000d0000802800
00000c0000000a00000078000000100000000000000000000000160000000c0000001800000052000000700100000a000000dfffffff00000000000000000000
000090010000000000000000002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492
b70700bef90d0000000003000000000000000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec
12004590fb77701ff877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec
12004590fb77801ff877ffffffff000012003d1100780000c2000000000000bef90d0492b70700bef90d000000000492b70700bef90d28ed1200000000001912
23600c000000c4ed12006af500786476000800000000250000000c0000000a000000180000000c00000000000000250000000c0000000d000080280000000c00
000007000000260000001c0000000700000000000000030000000000000000000000250000000c00000007000000120000000c000000010000001b0000001000
0000a3020000850000003600000010000000a30200009d0000001b00000010000000a3020000ac0000003600000010000000a3020000c40000001b0000001000
00009e020000ce000000360000001000000086020000ce0000001b0000001000000077020000ce00000036000000100000005f020000ce0000001b0000001000
000050020000ce000000360000001000000038020000ce0000001b0000001000000029020000ce000000360000001000000011020000ce0000001b0000001000
000002020000ce0000003600000010000000ea010000ce0000001b00000010000000db010000ce0000003600000010000000c3010000ce0000001b0000001000
0000b4010000ce00000036000000100000009c010000ce0000001b000000100000008d010000ce00000036000000100000007a010000ce000000360000001000
00007a010000d30000001b000000100000007a010000e200000036000000100000007a010000fa0000001b000000100000007a01000009010000360000001000
00007a01000014010000250000000c00000008000080280000000c00000007000000250000000c00000005000080260000001c00000007000000000000000300
00000000000000000000250000000c00000007000000120000000c00000001000000120000000c0000000200000027000000180000000600000000000000ffff
ff0000000000250000000c00000006000000560000002c000000890200005d000000be02000088000000040000008c028500bb028500a30260008c0285002500
00000c00000008000080280000000c00000007000000250000000c00000005000080280000000c00000006000000190000000c000000ffffff00780000001000
00000000000000000000160000000c00000018000000520000007001000006000000dfffffff0000000000000000000000009001000000000000000000204100
7200690061006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d00000000030000000000
000000000000000000000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff0000
1200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff0000
12003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af500786476
000800000000250000000c00000006000000180000000c00000000000000250000000c0000000d000080280000000c0000000100000078000000100000000000
000000000000160000000c00000018000000520000007001000001000000dfffffff000000000000000000000000900100000000000000000020410072006900
61006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa0d0000
0000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d0000000003000000000000000000
0000000000000000000000000000000000000000000088fdf90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff000012008910
00780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801ff877ffffffff000012003d11
00780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed12006af50078647600080000
0000250000000c00000001000000180000000c00000000000000250000000c0000000d000080280000000c0000000b000000260000001c0000000b0000000000
0000020000000000000000000000250000000c0000000b000000120000000c00000001000000570000002c000000740300007301000071040000030200000400
00006f0475016f04c6017603c60176030102250000000c00000008000080280000000c0000000b000000250000000c00000005000080260000001c0000000b00
000000000000030000000000000000000000250000000c0000000b000000120000000c00000001000000120000000c0000000200000027000000180000000700
000000000000ffffff0000000000250000000c00000007000000560000002c000000550400004d0100008a040000780100000400000058047501870475016f04
500158047501250000000c00000008000080280000000c0000000b000000250000000c00000005000080280000000c00000007000000190000000c000000ffff
ff0078000000100000000000000000000000160000000c00000018000000520000007001000007000000dfffffff000000000000000000000000900100000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492b70700bef90d0000
000003000000000000000000000000000000000000000000000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801f
f877ffffffff000012003d1100780000c2000000000000bef90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c00000007000000180000000c00000000000000250000000c0000000d000080280000000c000000080000007800
0000100000000000000000000000160000000c00000018000000520000007001000008000000dfffffff00000000000000000000000090010000000000000000
002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d000000000300
00000000000000000000000000000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffff
ffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffff
ffff000012003d1100780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af5
00786476000800000000250000000c00000008000000180000000c00000000000000250000000c0000000d000080280000000c00000003000000260000001c00
00000300000000000000020000000000000000000000250000000c00000003000000120000000c0000000100000057000000240000006d040000730100007104
000002020000020000006f0475016f040002250000000c00000008000080280000000c00000003000000250000000c00000005000080260000001c0000000300
000000000000030000000000000000000000250000000c00000003000000120000000c00000001000000120000000c0000000200000027000000180000000b00
000000000000ffffff0000000000250000000c0000000b000000560000002c000000550400004d0100008a040000780100000400000058047501870475016f04
500158047501250000000c00000008000080280000000c00000003000000250000000c00000005000080280000000c0000000b000000190000000c000000ffff
ff0078000000100000000000000000000000160000000c0000001800000052000000700100000b000000dfffffff000000000000000000000000900100000000
00000000002041007200690061006c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000fa0d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c2005018fa0d0492b7075018fa0d0000
0000030000000000000000000000000000000000000000000000000000000000000088fdf90d18000000000000000492b7070492b707b0ec12004590fb77701f
f877ffffffff00001200891000780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120088fdf90df8ec12004590fb77801f
f877ffffffff000012003d1100780000c200000000005018fa0d0492b7075018fa0d000000000492b7075018fa0d28ed120000000000191223600c000000c4ed
12006af500786476000800000000250000000c0000000b000000180000000c00000000000000250000000c0000000d000080280000000c0000000c0000007800
0000100000000000000000000000160000000c0000001800000052000000700100000c000000dfffffff00000000000000000000000090010000000000000000
002041007200690061006c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f90d00000000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20000bef90d0492b70700bef90d000000000300
000000000000000000000000000000000000000000001802000026060f002604574d464301000000000001000000000000000400000004040000000000000464
000000000000000000005018fa0d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff00001200891000780000c2000000c2000300
00000092b707ffffffff0010007801ec12000dcab70730ec12005018fa0df8ec12004590fb77801ff877ffffffff000012003d1100780000c2000000000000be
f90d0492b70700bef90d000000000492b70700bef90d28ed120000000000191223600c000000c4ed12006af500786476000800000000250000000c0000000c00
0000180000000c00000000000000250000000c0000000d000080280000000c00000004000000260000001c000000040000000000000002000000000000000000
0000250000000c00000004000000120000000c00000001000000570000002c00000071020000730100007104000003020000040000006f0475016f04c6017302
c60173020102250000000c00000008000080280000000c00000004000000250000000c00000005000080260000001c0000000400000000000000030000000000
000000000000250000000c00000004000000120000000c00000001000000120000000c0000000200000027000000180000000300000000000000ffffff000000
0000250000000c00000003000000560000002c000000550400004d0100008a040000780100000400000058047501870475016f04500158047501250000000c00
000008000080280000000c00000004000000250000000c00000005000080280000000c00000003000000190000000c000000ffffff0078000000100000000000
000000000000160000000c00000018000000520000007001000003000000dfffffff000000000000000000000000900100000000000000000020410072006900
61006c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f90d0000
0000fceb12008806c200b0ec12004590fb77f022f877ffffffffc0ec1200e0a5fc771807c20088fdf90d0492b70788fdf90d0000000003000000000000000000
0000000000000000000000000000000000000000000000bef90d18000000000000000492b7070492b707b0ec12004590fb77701ff877ffffffff000012008910
00780000c2000000c200030000000092b707ffffffff0010007801ec12000dcab70730ec120000bef90df8ec12004590fb77801ff877ffffffff000012003d11
00780000c2000000000088fdf90d0492b70788fdf90d000000000492b70788fdf90d28ed120000000000191223600c000000c4ed12006af50078647600080000
0000250000000c00000003000000180000000c00000000000000250000000c0000000d000080280000000c0000000d0000000e00000014000000000000001000
0000140000000400000003010800050000000b0200000000050000000c0270027b0508000000fa02050000000000ffffff00040000002d01000007000000fc02
0100000000000000040000002d0101001c000000fb029cff00000000000090010000000000000020417269616c00000000000000000000000000000000000000
0000000000000000040000002d0102001c000000fb021000070000000000bc02000000000102022253797374656d000000000000000000000000000000000000
0000000000000000040000002d01030004000000f0010200040000000201020007000000fc020000ffffff000000040000002d010200040000002d0100000e00
00002403050006025001e7025001e70214010602140106025001040000002d010000040000002d01010004000000f0010200050000000102ffffff0008000000
fa0200000300000000000000040000002d01020004000000020101000e0000002503050006025001e7025001e70214010602140106025001040000002d010000
04000000f0010200040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000000000000000
00000000000000000000000000000000040000002d01020005000000090200000000040000000201010015000000320a3c012c0209000000436166654c617474
6504180012000b001200140012000b000b00120004000000020101001c000000fb021000070000000000bc02000000000102022253797374656d000000000000
0000000000000000000000000000000000000000040000002d010400040000000201020007000000fc020000ffffff000000040000002d010500040000002d01
00000e000000240305000d005001ee005001ee0014010d0014010d005001040000002d010000040000002d01010004000000f0010500050000000102ffffff00
08000000fa0200000300000000000000040000002d01050004000000020101000e000000250305000d005001ee005001ee0014010d0014010d00500104000000
2d01000004000000f0010500040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000
0000000000000000000000000000000000000000040000002d01050005000000090200000000040000000201010015000000320a3c0125000900000043616665
4d6f63686104180012000b0012001d0014001200140012000400000002010100040000002d010400040000000201020007000000fc020000ffffff0000000400
00002d010600040000002d0100000e0000002403050002035001e3035001e30314010203140102035001040000002d010000040000002d01010004000000f001
0600050000000102ffffff0008000000fa0200000300000000000000040000002d01060004000000020101000e0000002503050002035001e3035001e3031401
0203140102035001040000002d01000004000000f0010600040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020
417269616c000000000000000000000000000000000000000000000000000000040000002d01060005000000090200000000040000000201010016000000320a
3c0115030a00000043617070756363696e6f18001200140014001400120012000900140014000400000002010100040000002d01040004000000020102000700
0000fc020000ffffff000000040000002d010700040000002d0100000e00000024030500b8005e0099015e0099012200b8002200b8005e00040000002d010000
040000002d01010004000000f0010700050000000102ffffff0008000000fa0200000300000000000000040000002d01070004000000020101000e0000002503
0500b8005e0099015e0099012200b8002200b8005e00040000002d01000004000000f0010700040000002d010100040000002e0118001c000000fb02dfff0000
00000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01070005000000090200000000
040000000201010016000000320a4a00cd000a000000436f6666656553686f70180014000b000b00120012001600140014001400040000000201010004000000
2d010400040000000201020007000000fc020000ffffff000000040000002d010800040000002d0100000e0000002403050007003d02e8003d02e80001020700
010207003d02040000002d010000040000002d01010004000000f0010800050000000102ffffff0008000000fa0200000300000000000000040000002d010800
04000000020101000e0000002503050007003d02e8003d02e80001020700010207003d02040000002d01000004000000f0010800040000002d01010004000000
2e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000000000000000000000000000000000000000000004000000
2d0108000500000009020000000004000000020101000f000000320a29024c000500000044656361666517001200120012000b00040000000201010004000000
2d010400040000000201020007000000fc020000ffffff000000040000002d010900040000002d0100000e00000024030500ff035001e0045001e0041401ff03
1401ff035001040000002d010000040000002d01010004000000f0010900050000000102ffffff0008000000fa0200000300000000000000040000002d010900
04000000020101000e00000025030500ff035001e0045001e0041401ff031401ff035001040000002d01000004000000f0010900040000002d01010004000000
2e0118001c000000fb02dfff000000000000bc020100000000000020417269616c00000000000000000000000000000000000000000000000000000004000000
2d01090005000000090200000000040000000201010015000000320a3c012204090000004465636f7261746f727018001200120014000d0012000b0014000d00
0400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010a00040000002d0100000e000000240305000101
3d02e2013d02e20101020101010201013d02040000002d010000040000002d01010004000000f0010a00050000000102ffffff0008000000fa02000003000000
00000000040000002d010a0004000000020101000e0000002503050001013d02e2013d02e20101020101010201013d02040000002d01000004000000f0010a00
040000002d010100040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000000000000000000000000000
0000000000000000040000002d010a000500000009020000000004000000020101000c000000320a29025601030000004472790717000d001300040000000201
0100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050009015001ea015001
ea0114010901140109015001040000002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa02000003000000000000000400
00002d010b0004000000020101000e0000002503050009015001ea015001ea0114010901140109015001040000002d01000004000000f0010b00040000002d01
010004000000f0010200040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c0000000000000000000000000000000000
00000000000000000000040000002d01020005000000090200000000040000000201010013000000320a3c01300108000000457370726573736f160012001400
0d0012001200120014000400000002010100040000002d010400040000000201020007000000fc020000ffffff000000040000002d010b00040000002d010000
0e00000024030500fd013d02ea023d02ea020102fd010102fd013d02040000002d010000040000002d01010004000000f0010b00050000000102ffffff000800
0000fa0200000300000000000000040000002d010b0004000000020101000e00000025030500fd013d02ea023d02ea020102fd010102fd013d02040000002d01
000004000000f0010b00040000002d01010004000000f0010500040000002e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00
0000000000000000000000000000000000000000000000000000040000002d0105000500000009020000000004000000020101001b000000320a290201020d00
00004578747261457370726573736f02160012000b000d0012001600120014000d0012001200120014000400000002010100040000002d010400040000000201
020007000000fc020000ffffff000000040000002d010b00040000002d0100000e0000002403050005033d02e6033d02e60301020503010205033d0204000000
2d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b0004000000020101000e00
00002503050005033d02e6033d02e60301020503010205033d02040000002d01000004000000f0010b00040000002d01010004000000f0010600040000002e01
18001c000000fb02dfff000000000000bc020000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d01
06000500000009020000000004000000020101000c000000320a2902580303000000576574071f0012000b000400000002010100040000002d01040004000000
0201020007000000fc020000ffffff000000040000002d010b00040000002d0100000e00000024030500ff033c02e0043c02e0040002ff030002ff033c020400
00002d010000040000002d01010004000000f0010b00050000000102ffffff0008000000fa0200000300000000000000040000002d010b000400000002010100
0e00000025030500ff033c02e0043c02e0040002ff030002ff033c02040000002d01000004000000f0010b00040000002d01010004000000f001070004000000
2e0118001c000000fb02dfff000000000000bc020000000000000020417269616c00000000000000000000000000000000000000000000000000000004000000
2d01070005000000090200000000040000000201010012000000320a28022a0407000000576869707065646f1f00140009001400140012001400040000000201
0100040000002d01040008000000fa0200000300000000000000040000002d010b000400000002010100040000000201020007000000fc020000ffffff000000
040000002d010c000e000000240305001b0260002c0360002c0307001b0207001b026000040000002d01000004000000f0010b00040000002d01010004000000
f0010c00050000000102ffffff0004000000f0010800040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000
00000000000000000000000000000000000000000000040000002d01080005000000090200000000040000000201010018000000320a2a0054020b000000ab69
6e74657266616365bb73120007001200090011000b000a00110011001100120004000000020102001c000000fb02dfff000000000000bc020000000000000020
417269616c000000000000000000000000000000000000000000000000000000040000002d010b0004000000020101001c000000320a52001f020e0000004472
696e6b436f6d706f6e656e7417000d00090014001200180014001d00140014001400120014000b000400000002010200040000002d01040004000000f0010900
040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000
040000002d01090005000000090200000000040000002d01040008000000fa0200000300000000000000040000002d010c000400000002010100050000001402
8500a3020500000013029d00a302050000001402ac00a302050000001302c400a302050000001402ce009e02050000001302ce008602050000001402ce007702
050000001302ce007602050000001302e5007602050000001402f40076020500000013020c017602040000002d01000004000000f0010c00040000002d010100
08000000fa0200000300000000000000040000002d010c000400000002010100040000000201020007000000fc020000ffffff000000040000002d010d000c00
0000240304008c028500bb028500a30260008c028500040000002d01000004000000f0010c00040000002d01010004000000f0010d00050000000102ffffff00
040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000
040000002d010c0005000000090200000000040000002d01040004000000f0010a00040000002e0118001c000000fb02dfff0000000000009001000000000000
0020417269616c000000000000000000000000000000000000000000000000000000040000002d010a0005000000090200000000040000002d01040008000000
fa0200000300000000000000040000002d010d0004000000020101000500000014028500a3020500000013029d00a302050000001402ac00a302050000001302
c400a302050000001402ce009e02050000001302ce008602050000001402ce007702050000001302ce005f02050000001402ce005002050000001302ce003802
050000001402ce002902050000001302ce001102050000001402ce000202050000001302ce00ea01050000001402ce00db01050000001302ce00c30105000000
1402ce00b401050000001302ce009c01050000001402ce008d01050000001302ce007501050000001402ce006601050000001302ce004e01050000001402ce00
3f01050000001302ce002701050000001402ce001801050000001302ce000001050000001402ce00f100050000001302ce00d900050000001402ce00ca000500
00001302ce00b200050000001402ce00a300050000001302ce008b00050000001402cf007d00050000001302e7007d00050000001402f6007d00050000001302
0e017d00040000002d01000004000000f0010d00040000002d01010008000000fa0200000300000000000000040000002d010d00040000000201010004000000
0201020007000000fc020000ffffff000000040000002d010e000c000000240304008c028500bb028500a30260008c028500040000002d01000004000000f001
0d00040000002d01010004000000f0010e00050000000102ffffff0004000000f0010200040000002e0118001c000000fb02dfff000000000000900100000000
00000020417269616c000000000000000000000000000000000000000000000000000000040000002d01020005000000090200000000040000002d0104000400
00002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000000000000000000000000000000000000000000000000400
00002d010d0005000000090200000000040000002d01040004000000f001050008000000fa0200000300000000000000040000002d0105000400000002010100
0500000014028500a3020500000013029d00a302050000001402ac00a302050000001302c400a302050000001402ce00a802050000001302ce00c00205000000
1402ce00cf02050000001302ce00e702050000001402ce00f602050000001302ce000e03050000001402ce001d03050000001302ce003503050000001402ce00
4403050000001302ce005c03050000001402ce006b03050000001302ce007303050000001302de007303050000001402ed007303050000001302050173030400
00002d01000004000000f0010500040000002d01010008000000fa0200000300000000000000040000002d010500040000000201010004000000020102000700
0000fc020000ffffff000000040000002d010e000c000000240304008c028500bb028500a30260008c028500040000002d01000004000000f001050004000000
2d01010004000000f0010e00050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000
00000000000000000000000000000000000000000000040000002d01050005000000090200000000040000002d01040004000000f0010600040000002e011800
1c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010600
05000000090200000000040000002d01040008000000fa0200000200000000000000040000002d010e0004000000020101000c000000250304006f0475016f04
c6017800c60178000102040000002d01000004000000f0010e00040000002d01010008000000fa0200000300000000000000040000002d010e00040000000201
0100040000000201020007000000fc020000ffffff000000040000002d010f000c0000002403040058047501870475016f04500158047501040000002d010000
04000000f0010e00040000002d01010004000000f0010f00050000000102ffffff00040000002e0118001c000000fb02dfff0000000000009001000000000000
0020417269616c000000000000000000000000000000000000000000000000000000040000002d010e0005000000090200000000040000002d01040004000000
f0010700040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000000000000000000000000000000000000000
00000000040000002d01070005000000090200000000040000002d01040008000000fa0200000300000000000000040000002d010f0004000000020101000500
000014028500a3020500000013029d00a302050000001402ac00a302050000001302c400a302050000001402ce00a802050000001302ce00c002050000001402
ce00cf02050000001302ce00e702050000001402ce00f602050000001302ce000e03050000001402ce001d03050000001302ce003503050000001402ce004403
050000001302ce005c03050000001402ce006b03050000001302ce008303050000001402ce009203050000001302ce00aa03050000001402ce00b90305000000
1302ce00d103050000001402ce00e003050000001302ce00f803050000001402ce000704050000001302ce001f04050000001402ce002e04050000001302ce00
4604050000001402ce005504050000001302ce006d04050000001402db006f04050000001302f3006f0405000000140202016f0405000000130214016f040400
00002d01000004000000f0010f00040000002d01010008000000fa0200000300000000000000040000002d010f00040000000201010004000000020102000700
0000fc020000ffffff000000040000002d0110000c000000240304008c028500bb028500a30260008c028500040000002d01000004000000f0010f0004000000
2d01010004000000f0011000050000000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000
00000000000000000000000000000000000000000000040000002d010f0005000000090200000000040000002d01040004000000f0010b0004000000f0010800
040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000
040000002d01080005000000090200000000040000002d01040004000000f001090008000000fa0200000200000000000000040000002d010900040000000201
01000c000000250304006f0475016f04c6017101c60171010102040000002d01000004000000f0010900040000002d01010008000000fa020000030000000000
0000040000002d0109000400000002010100040000000201020007000000fc020000ffffff000000040000002d010b000c000000240304005804750187047501
6f04500158047501040000002d01000004000000f0010900040000002d01010004000000f0010b00050000000102ffffff00040000002e0118001c000000fb02
dfff00000000000090010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010900050000000902
00000000040000002d01040004000000f0010c00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c00000000000000
0000000000000000000000000000000000000000040000002d010b0005000000090200000000040000002d01040004000000f0010a0008000000fa0200000300
000000000000040000002d010a0004000000020101000500000014028500a3020500000013029d00a302050000001402ac00a302050000001302c400a3020500
00001402ce009e02050000001302ce008602050000001402ce007702050000001302ce005f02050000001402ce005002050000001302ce003802050000001402
ce002902050000001302ce001102050000001402ce000202050000001302ce00ea01050000001402ce00db01050000001302ce00c301050000001402ce00b401
050000001302ce009c01050000001402ce008d01050000001302ce007a01050000001302d3007a01050000001402e2007a01050000001302fa007a0105000000
140209017a0105000000130214017a01040000002d01000004000000f0010a00040000002d01010008000000fa0200000300000000000000040000002d010a00
0400000002010100040000000201020007000000fc020000ffffff000000040000002d010c000c000000240304008c028500bb028500a30260008c0285000400
00002d01000004000000f0010a00040000002d01010004000000f0010c00050000000102ffffff00040000002e0118001c000000fb02dfff0000000000009001
0000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010a0005000000090200000000040000002d01
040004000000f0010200040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c0000000000000000000000000000000000
00000000000000000000040000002d01020005000000090200000000040000002d01040004000000f0010d0008000000fa020000020000000000000004000000
2d010c0004000000020101000c000000250304006f0475016f04c6017603c60176030102040000002d01000004000000f0010c00040000002d01010008000000
fa0200000300000000000000040000002d010c000400000002010100040000000201020007000000fc020000ffffff000000040000002d010d000c0000002403
040058047501870475016f04500158047501040000002d01000004000000f0010c00040000002d01010004000000f0010d00050000000102ffffff0004000000
2e0118001c000000fb02dfff00000000000090010000000000000020417269616c00000000000000000000000000000000000000000000000000000004000000
2d010c0005000000090200000000040000002d01040004000000f0010500040000002e0118001c000000fb02dfff000000000000900100000000000000204172
69616c000000000000000000000000000000000000000000000000000000040000002d01050005000000090200000000040000002d01040004000000f0010600
08000000fa0200000200000000000000040000002d010600040000000201010008000000250302006f0475016f040002040000002d01000004000000f0010600
040000002d01010008000000fa0200000300000000000000040000002d0106000400000002010100040000000201020007000000fc020000ffffff0000000400
00002d010d000c0000002403040058047501870475016f04500158047501040000002d01000004000000f0010600040000002d01010004000000f0010d000500
00000102ffffff00040000002e0118001c000000fb02dfff00000000000090010000000000000020417269616c00000000000000000000000000000000000000
0000000000000000040000002d01060005000000090200000000040000002d01040004000000f0010e00040000002e0118001c000000fb02dfff000000000000
90010000000000000020417269616c000000000000000000000000000000000000000000000000000000040000002d010d000500000009020000000004000000
2d01040004000000f001070008000000fa0200000200000000000000040000002d01070004000000020101000c000000250304006f0475016f04c6017302c601
73020102040000002d01000004000000f0010700040000002d01010008000000fa0200000300000000000000040000002d010700040000000201010004000000
0201020007000000fc020000ffffff000000040000002d010e000c0000002403040058047501870475016f04500158047501040000002d01000004000000f001
0700040000002d01010004000000f0010e00050000000102ffffff00040000002e0118001c000000fb02dfff0000000000009001000000000000002041726961
6c000000000000000000000000000000000000000000000000000000040000002d01070005000000090200000000040000002d01040004000000f0010f00030000000000}}}}}{
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_186]#}{Here is how to create a basic selection, as well as a decorated selection:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {
#: cX:decorator:compromise:CoffeeShop.py
\par # Coffee example with a compromise of basic
\par # combinations and decorators
\par 
\par class DrinkComponent:
\par   def getDescription(self):
\par     return self.__class__.__name__
\par   def getTotalCost(self):
\par     return self.__class__.cost
\par 
\par class Espresso(DrinkComponent):
\par   cost = 0.75
\par 
\par class EspressoConPanna(DrinkComponent):
\par   cost = 1.0
\par 
\par class Cappuccino(DrinkComponent):
\par   cost = 1.0
\par 
\par class CafeLatte(DrinkComponent):
\par   cost = 1.0
\par 
\par class CafeMocha(DrinkComponent):
\par   cost = 1.25
\par 
\par class Decorator(DrinkComponent):
\par   def __init__(self, drinkComponent):
\par     self.component = drinkComponent
\par   def getTotalCost(self):
\par     return self.component.getTotalCost() + \\
\par       DrinkComponent.getTotalCost(self)
\par   def getDescription(self):
\par     return self.component.getDescription() + \\
\par       ' ' + DrinkComponent.getDescription(self)
\par 
\par class ExtraEspresso(Decorator):
\par   cost = 0.75
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par class Whipped(Decorator):
\par   cost = 0.50
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par class Decaf(Decorator):
\par   cost = 0.0
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par class Dry(Decorator):
\par   cost = 0.0
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par class Wet(Decorator):
\par   cost = 0.0
\par   def __init__(self, drinkComponent):
\par     Decorator.__init__(self, drinkComponent)
\par 
\par cappuccino = Cappuccino()
\par print cappuccino.getDescription() + ": $" + \\
\par   `cappuccino.getTotalCost()`
\par 
\par cafeMocha = Whipped(Decaf(CafeMocha()))
\par print cafeMocha.getDescription() + ": $" + \\
\par   `cafeMocha.getTotalCost()`
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_187]#
\par #[BT_188]#}{You can see that creating a basic selection is quick and easy, which makes sense since they will be described regularly.  Describing a decorated drink is more work than when using a 
class per combination, but clearly less work than when only using decorators. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_224" \\o "A_224" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200320034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_189]#}{The final result is not too many classes, but not too many decorators either. Most of the time it's possible to get away without using any decorators at all, so we have the benefits of both approaches. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_225" \\o "A_225" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200320035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420103}
Other considerations{\*\bkmkend _Toc534420103}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_190]#}{
What happens if we decide to change the menu at a later stage, such as by adding a new type of drink? If we had used the class per combination approach, the effect of adding an extra such as syrup would be an exponential growth in the number
 of classes. However, the implications to the all decorator or compromise approaches are the same - one extra class is created. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_226" \\o "A_226" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200320036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_191]#}{How about the e
ffect of changing the cost of steamed milk and foamed milk, when the price of milk goes up? Having a class for each combination means that you need to change a method in each class, and thus maintain many classes. By using decorators, maintenance is reduc
ed by defining the logic in one place. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_227" \\o "A_227" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200320037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420104}
Exercises{\*\bkmkend _Toc534420104}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls15\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {Add a Syrup class to the decorator approach described above. Then create a Caf\'e9 Latte (you'll need to use steamed milk with an espresso) with syrup. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_228" \\o "A_228" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200320038000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 2. \tab}}\pard \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin1080\itap0 {
Repeat Exercise 1 for the compromise approach. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_229" \\o "A_229" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200320039000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 3. \tab}
Implement the decorator pattern to create a Pizza restaurant, which has a set menu of choices as well as the option to design your own pizza.  Follow the compromise approach to create a menu consisting of a Margheri
ta, Hawaiian, Regina, and Vegetarian pizzas, with toppings (decorators) of Garlic, Olives, Spinach, Avocado, Feta and Pepperdews. Create a Hawaiian pizza, as well as a Margherita decorated with Spinach, Feta, Pepperdews and Olives. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_230" \\o "A_230" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200330030000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_192]#\sect }\sectd 
\binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 
\cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420105}Y: Iterators: decoupling algorithms from containers{\*\bkmkend _Toc534420105}
\par }\pard\plain \s15\ql \li360\ri0\sa180\sl270\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cf6 This chapter has not had any significant translation yet.
\par }{Alexander Stepanov thought for years about the problem of generic programming techniques before creating the STL (along with Dave Musser). He came to the conclusion that all algorithms are defined on algebraic structures \endash 
 what we would call containers. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_231" \\o "A_231" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200330031000000}}}{\fldrslt {\cs42\fs22\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_193]#}{
In the process, he realized that iterators are central to the use of algorithms, because they decouple the algorithms from the specific type of container that the algorithm might currently be working w
ith. This means that you can describe the algorithm without worrying about the particular sequence it is operating on. More generally, }{\i any}{
 code that you write using iterators is decoupled from the data structure that the code is manipulating, and thus your code is more general and reusable. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_232" \\o "A_232" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200330032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_194]#}{The use of iterators also extends your code into the realm of }{\i functional programming}{, whose objective is to describe }{\i what}{ a program is doing at every step rather than }{\i how}{ it is doing it. That is, you say \'93sort\'94
 rather than describing the sort. The objective of the C++ STL was to provide this }{\i generic programming}{ approach for C++ (how successful this approach will actually be remains to be seen). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_233" \\o "A_233" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200330033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_195]#}{If you\rquote ve used containers in Java (and it\rquote s hard to write code without using them), you\rquote ve used iterators \endash  in the form of the }{\b Enumeration}{ in Java 1.0/1.1 and the }{\b Iterator}{
 in Java 2. So you should already be familiar with their general use. If not, see Chapter 9, }{\i Holding Your Objects}{, under }{\i Iterators}{ in }{\i Thinking in Java, 2}{\i\super nd}{\i  edition}{ (freely downloadable from }{\i www.BruceEckel.com}{). 
}{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_234" \\o "A_234" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200330034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_196]#}{Because the Java 2 containers rely heavily on iterators they become excellent candidates for generic/functional programming t
echniques. This chapter will explore these techniques by converting the STL algorithms to Java, for use with the Java 2 container library. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_235" \\
o "A_235" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200330035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420106}
Type-safe iterators{\*\bkmkend _Toc534420106}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_197]#}{In }{\i Thinking in Java, 2}{\i\super nd}{\i  edition}{
, I show the creation of a type-safe container that will only accept a particular type of object. A reader, Linda Pazzaglia, asked for the other obvious type-safe component, an iterator that would work with the basic }{\b java.util}{
 containers, but impose the constraint that the type of objects that it iterates over be of a particular type. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_236" \\o "A_236" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200330036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_198]#}{If Java ever includes a template mechanism, this kind of iterator will have the added advantage of being able to return a specific type of object, but without templates you are forced to return generic }{\b Object}{
s, or to require a bit of hand-coding for every type that you want to iterate through. I will take the former approach. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_237" \\o "A_237" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200330037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_199]#}{A second design decision involves the time that the type of object is determined. One
 approach is to take the type of the first object that the iterator encounters, but this is problematic because the containers may rearrange the objects according to an internal ordering mechanism (such as a hash table) and thus you may get different resu
lts from one iteration to the next. The safe approach is to require the user to establish the type during construction of the iterator. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_238" \\o "A_238" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200330038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_200]#}{Lastly, how do we build the iterator? We cannot rewrite the existing Java library classes that already produce }{\b Enumeration}{s and }{\b Iterator}{s. However, we can use the }{\i Decorator}{
 design pattern, and create a class that simply wraps the }{\b Enumeration}{ or }{\b Iterator}{ that is produced, generating a new object that has the iteration behavior that we want (which is, in this case, to throw a }{\b RuntimeException}{
 if an incorrect type is encountered) but with the same interface as the original }{\b Enumeration}{ or }{\b Iterator}{, so that it can be used in the same places (you may argue that this is actually a }{\i Proxy}{ pattern, but it\rquote s more likely }{
\i Decorator}{ because of its intent). Here is the code: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_239" \\o "A_239" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200330039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# util:TypedIterator.py
\par 
\par class TypedIterator(Iterator):
\par   private Iterator imp
\par   private Class type
\par   def __init__(self, Iterator it, Class type):
\par     imp = it
\par     self.type = type
\par 
\par   def hasNext(self): 
\par     return imp.hasNext() 
\par 
\par   def remove(self): imp.remove() 
\par   def next(self):
\par     Object obj = imp.next()
\par     if(!type.isInstance(obj))
\par       throw ClassCastException(
\par         "TypedIterator for type " + type +
\par         " encountered type: " + obj.getClass())
\par     return obj
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_201]#
\par #[BT_202]#\sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0
\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420107}5: Factories: encapsulating object creation
{\*\bkmkend _Toc455024531}{\*\bkmkend _Toc476705902}{\*\bkmkend _Toc534420107}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_203]#}{
When you discover that you need to add new types to a system, the most sensible first step is to use polymorphism to create a common interface to those new types. This separates the rest of the code in your syste
m from the knowledge of the specific types that you are adding. New types may be added without disturbing existing code \'85
 or so it seems. At first it would appear that the only place you need to change the code in such a design is the place where you inher
it a new type, but this is not quite true. You must still create an object of your new type, and at the point of creation you must specify the exact constructor to use. Thus, if the code that creates objects is distributed throughout your application, you
 have the same problem when adding new types\emdash you must still chase down all the points of your code where type matters. It happens to be the }{\i creation}{ of the type that matters in this case rather than the }{\i use}{
 of the type (which is taken care of by polymorphism), but the effect is the same: adding a new type can cause problems. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_240" \\o "A_240" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200340030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_204]#}{The solution is to force the creation of objects to occur through a common }{\i factory}{
 rather than to allow the creational code to be spread throughout your system. If all the code in your program must go through this factory whenever it needs to create one of your objects, then all you must do when you add a new object is to modif
y the factory. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_241" \\o "A_241" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200340031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_205]#}{Since every object-oriented program creates objects, and since it\rquote s very likely you will extend your program by adding new types, I suspect that factories may be the most universally useful kinds of design patterns. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_242" \\o "A_242" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200340032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420108}
Simple Factory method{\*\bkmkend _Toc534420108}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_206]#}{As an example, let\rquote s revisit the }{\b Shape}{
 system.  }{\v #[BT_207]#
\par #[BT_208]#}{One approach is to make the factory a }{\b static}{ method of the base class: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_243" \\o "A_243" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200340033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c05:shapefact1:ShapeFactory1.py

\par # A simple static factory method.
\par from __future__ import generators
\par import random
\par 
\par class Shape(object):
\par   # Create based on class name:
\par   def factory(type):
\par     #return eval(type + "()")
\par     if type == "Circle": return Circle()
\par     if type == "Square": return Square()
\par     assert 1, "Bad shape creation: " + type
\par   factory = staticmethod(factory)
\par 
\par class Circle(Shape):
\par   def draw(self): print "Circle.draw" 
\par   def erase(self): print "Circle.erase" 
\par 
\par class Square(Shape):
\par   def draw(self): print "Square.draw" 
\par   def erase(self): print "Square.erase" 
\par 
\par # Generate shape name strings:
\par def shapeNameGen(n):
\par   types = Shape.__subclasses__()
\par   for i in range(n):
\par     yield random.choice(types).__name__
\par 
\par shapes = \\
\par   [ Shape.factory(i) for i in shapeNameGen(7)]
\par 
\par for shape in shapes:
\par   shape.draw()
\par   shape.erase()
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_209]#
\par #[BT_210]#}{The }{\b factory(\~)}{ takes an argument that allows it to determine what type of  }{\b Shape}{ to create; it happens to be a }{\b String}{ in this case but it could be any set of data. The }{\b factory(\~)}{ is now the only other
 code in the system that needs to be changed when a new type of }{\b Shape }{is added (the initialization data for the objects will presumably come from somewhere outside the system, and not be a hard-coded array as in the above example).}{\v #[BT_211]#}
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_244" \\o "A_244" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200340034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Note that this example also shows the new Python 2.2 }{\b staticmethod(\~)}{ technique for creating static methods in a class. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_245" \\o "A_245" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200340035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par I have also used a tool which is new in Python 2.2 called a }{\i generator}{. A generator is a special case of a factory: it\rquote s a factory that takes no arguments in order to create a new object. Normally you ha
nd some information to a factory in order to tell it what kind of object to create and how to create it, but a generator has some kind of internal algorithm that tells it what and how to build. It \'93generates out of thin air\'94
 rather than being told what to create. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_246" \\o "A_246" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200340036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Now, this may not look consistent with the code you see above: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_247" \\o "A_247" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200340037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {for i in shapeNameGen(7)
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {looks like there\rquote 
s an initialization taking place. This is where a generator is a bit strange \endash  when you call a function that contains a }{\b yield}{ statement (}{\b yield}{ is a new keyword that determines that a function i
s a generator), that function actually returns a generator object that has an iterator. This iterator is implicitly used in the }{\b for}{
 statement above, so it appears that you are iterating through the generator function, not what it returns. This was done for convenience of use. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_248" \\
o "A_248" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200340038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Thus, the code that you write is actually a kind of factory, that creates the generator objects that do the actual generation. You can use the generator explicitly if you want, for example: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_249" \\o "A_249" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200340039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {gen = shapeNameGen(7)
\par print gen.next()
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {So }{\b next( )}{ is the iterator method that\rquote s actually called
 to generate the next object, and it takes no arguments. }{\b shapeNameGen( )}{ is the factory, and }{\b gen}{ is the generator. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_250" \\o "A_250" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200350030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par {\*\bkmkstart AAA}{\*\bkmkend AAA}Inside the generator-factory, you can see the call to }{\b __subclasses__( )}{, which produces a list of references to each of the subclasses of }{\b Shape}{ (which must be inherited from }{\b object}{
 for this to work). You should be aware, however, that this only works for the first level of inheritance from }{\b Item}{, so if you were to inherit a new class from }{\b Circle}{, it wouldn\rquote t show up in the list generated by }{\b 
__subclasses__( )}{. If you need to create a deeper hierarchy this way, you must recurse the }{\b __subclasses__( )}{ list. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_251" \\o "A_251" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200350031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Also note that in }{\b shapeNameGen( )}{ the statement }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_252" \\o "A_252" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200350032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {types = Shape.__subclasses__()
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Is only executed when the generator object is produced; each time the }{
\b next( )}{ method of this generator object is called (which, as noted above, may happen implicitly), only the code in the }{\b for}{ loop will be executed, so you don\rquote t have wasteful execution (as you would if this were an ordinary function). }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_253" \\o "A_253" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200350033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc455024532}
{\*\bkmkstart _Toc476705903}{\*\bkmkstart _Toc534420109}Polymorphic factories{\*\bkmkend _Toc455024532}{\*\bkmkend _Toc476705903}{\*\bkmkend _Toc534420109}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_212]#}{The static}{\b  factory(\~)}{
 method in the previous example forces all the creation operations to be focused in one spot, so that\rquote 
s the only place you need to change the code. This is certainly a reasonable solution, as it throws a box around the process of creating objects. However, the }{\i Design Patterns}{ book emphasizes that the reason for the }{\i Factory Method}{
 pattern is so that different types of factories can be subclassed from the basic factory (the above design is mentioned as a special case). However, the book does not provide an example, but instead just repeats the example used for the }{\i Abstract 
Factory}{ (you\rquote ll see an example of this in the next section). Here is }{\b ShapeFactory1.py}{ modified so the factory methods are in a separate class as virtual functions. Notice also that the specific }{\b Shape }{
classes are dynamically loaded on demand: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_254" \\o "A_254" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200350034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c05:shapefact2:ShapeFactory2.py

\par # Polymorphic factory methods.
\par from __future__ import generators
\par import random
\par 
\par class ShapeFactory:
\par   factories = \{\}
\par   def addFactory(id, shapeFactory):
\par     ShapeFactory.factories.put[id] = shapeFactory
\par   addFactory = staticmethod(addFactory)
\par   # A Template Method:
\par   def createShape(id):
\par     if not ShapeFactory.factories.has_key(id):
\par       ShapeFactory.factories[id] = \\
\par         eval(id + '.Factory()')
\par     return ShapeFactory.factories[id].create()
\par   createShape = staticmethod(createShape)
\par 
\par class Shape(object): pass
\par 
\par class Circle(Shape):
\par   def draw(self): print "Circle.draw" 
\par   def erase(self): print "Circle.erase"
\par   class Factory:
\par     def create(self): return Circle() 
\par 
\par class Square(Shape):
\par   def draw(self): 
\par     print "Square.draw" 
\par   def erase(self): 
\par     print "Square.erase" 
\par   class Factory:
\par     def create(self): return Square() 
\par 
\par def shapeNameGen(n):
\par   types = Shape.__subclasses__()
\par   for i in range(n):
\par     yield random.choice(types).__name__
\par 
\par shapes = [ ShapeFactory.createShape(i) 
\par            for i in shapeNameGen(7)]
\par 
\par for shape in shapes:
\par   shape.draw()
\par   shape.erase()
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_213]#
\par #[BT_214]#}{Now the factory method appears in its own class, }{\b ShapeFactory}{, as the }{\b create(\~)}{ method. The different types of }{shapes}{ must each create their own factory with a }{\b create(\~)}{
 method to create an object of their own type. The actual creation of shapes is performed by calling }{\b ShapeFactory.createShape(\~)}{, which is a static method that uses the dictionary in }{\b ShapeFactory}{
 to find the appropriate factory object based on an identifier that you pass it. The factory is immediately used to create the shape object, but you could imagine a more complex problem 
where the appropriate factory object is returned and then used by the caller to create an object in a more sophisticated way. However, it seems that much of the time you don\rquote 
t need the intricacies of the polymorphic factory method, and a single static method in the base class (as shown in }{\b ShapeFactory1.py}{) will work fine. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_255" \\o "A_255" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200350035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_215]#}{Notice that the }{\b ShapeFactory}{ must be initialized by loading its dictionary with factory objects, which takes place in the static initialization clause of each of the }{shape }{implementations. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_256" \\o "A_256" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200350036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc455024533}
{\*\bkmkstart _Toc476705904}{\*\bkmkstart _Toc534420110}Abstract factories{\*\bkmkend _Toc455024533}{\*\bkmkend _Toc476705904}{\*\bkmkend _Toc534420110}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_216]#}{The }{\i Abstract Factory}{
 pattern looks like the factory objects we\rquote ve seen previously, with not one but several factory methods. Each of the factory methods creates a different kind of object. The idea is that at the point of creation of the factory object, you decide h
ow all the objects created by that factory will be used. The example given in }{\i Design Patterns}{ implements portability across various graphical user interfaces (GUIs): you create a factory object appropriate to the GUI that you\rquote 
re working with, and from then on when you ask it for a menu, button, slider, etc. it will automatically create the appropriate version of that item for the GUI. Thus you\rquote 
re able to isolate, in one place, the effect of changing from one GUI to another. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_257" \\o "A_257" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200350037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_217]#}{As another example suppose you are creating a general-purpose gaming environment and you want to be able to support different types of games. Here\rquote s how it might look using an abstract factory: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_258" \\o "A_258" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200350038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c05:Games.py
\par # An example of the Abstract Factory pattern.
\par 
\par class Obstacle:
\par   def action(self): pass
\par 
\par class Player:
\par   def interactWith(self, obstacle): pass
\par 
\par class Kitty(Player):
\par   def interactWith(self, obstacle):
\par     print "Kitty has encountered a",
\par     obstacle.action()
\par 
\par class KungFuGuy(Player):
\par   def interactWith(self, obstacle):
\par     print "KungFuGuy now battles a",
\par     obstacle.action()
\par 
\par class Puzzle(Obstacle):
\par   def action(self): 
\par     print "Puzzle" 
\par 
\par class NastyWeapon(Obstacle):
\par   def action(self): 
\par     print "NastyWeapon" 
\par 
\par # The Abstract Factory:
\par class GameElementFactory:
\par   def makePlayer(self): pass
\par   def makeObstacle(self): pass
\par 
\par # Concrete factories:
\par class KittiesAndPuzzles(GameElementFactory):
\par   def makePlayer(self): return Kitty()
\par   def makeObstacle(self): return Puzzle()
\par 
\par class KillAndDismember(GameElementFactory):
\par   def makePlayer(self): return KungFuGuy()
\par   def makeObstacle(self): return NastyWeapon()
\par 
\par class GameEnvironment:
\par   def __init__(self, factory):
\par     self.factory = factory
\par     self.p = factory.makePlayer() 
\par     self.ob = factory.makeObstacle()
\par   def play(self): 
\par     self.p.interactWith(self.ob) 
\par 
\par g1 = GameEnvironment(KittiesAndPuzzles())
\par g2 = GameEnvironment(KillAndDismember())
\par g1.play() 
\par g2.play() 
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_218]#
\par #[BT_219]#}{In this environment, }{\b Player}{ objects interact with }{\b Obstacle}{ objects, but there are different types of players and obstacles depending on what kind of game you\rquote 
re playing. You determine the kind of game by choosing a particular }{\b GameElementFactory}{, and then the }{\b GameEnvironment}{ controls the setup and play of the game. In this example, the setup and play is very simple, but those activities (the }{\i 
initial conditions}{ and the }{\i state change}{) can determine much of the game\rquote s outcome. Here, }{\b GameEnvironment}{ is not designed to be inherited, although it could very possibly make sense to do that. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_259" \\o "A_259" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200350039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_220]#}{This also contains examples of }{\i Double Dispatching}{ and the }{\i Factory Method}{, both of which will be explained later. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_260" \\
o "A_260" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200360030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Of course, the above scaffolding of }{\b Obstacle}{, }{\b Player}{ and }{\b GameElementFactory}{ (which was translated from the Java version of this example) is unnecessary \endash  it\rquote 
s only required for languages that have static type checking. As long as the concrete Python classes follow the form of the required classes, we don\rquote t need any base classes: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_261" \\o "A_261" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200360031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c05:Games2.py
\par # Simplified Abstract Factory.
\par 
\par class Kitty:
\par   def interactWith(self, obstacle):
\par     print "Kitty has encountered a",
\par     obstacle.action()
\par 
\par class KungFuGuy:
\par   def interactWith(self, obstacle):
\par     print "KungFuGuy now battles a",
\par     obstacle.action()
\par 
\par class Puzzle:
\par   def action(self): print "Puzzle" 
\par 
\par class NastyWeapon:
\par   def action(self): print "NastyWeapon" 
\par 
\par # Concrete factories:
\par class KittiesAndPuzzles:
\par   def makePlayer(self): return Kitty()
\par   def makeObstacle(self): return Puzzle()
\par 
\par class KillAndDismember:
\par   def makePlayer(self): return KungFuGuy()
\par   def makeObstacle(self): return NastyWeapon()
\par 
\par class GameEnvironment:
\par   def __init__(self, factory):
\par     self.factory = factory
\par     self.p = factory.makePlayer() 
\par     self.ob = factory.makeObstacle()
\par   def play(self): 
\par     self.p.interactWith(self.ob) 
\par 
\par g1 = GameEnvironment(KittiesAndPuzzles())
\par g2 = GameEnvironment(KillAndDismember())
\par g1.play() 
\par g2.play() 
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {
Another way to put this is that all inheritance in Python is implementation inheritance; since Python does its type-checking at runtime, there\rquote s no need to use interface inheritance so that you can upcast to the base type. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_262" \\o "A_262" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200360032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par You might want to study the two examples for comparison, however. Does the first one add enough useful information about the pattern that it\rquote s worth keeping some aspect of it? Perhaps all you need is \'93tagging classes\'94 like this: }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_263" \\o "A_263" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200360033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {class Obstacle: pass
\par class Player: pass
\par class GameElementFactory: pass
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {
Then the inheritance serves only to indicate the type of the derived classes. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_264" \\o "A_264" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200360034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420111}
Exercises{\*\bkmkend _Toc534420111}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls12\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {Add a class }{\b Triangle}{ to }{\b ShapeFactory1.py}{ }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_265" \\o "A_265" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200360035000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 2. \tab}}\pard \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin1080\itap0 {Add a class }{\b Triangle}{ to }{\b 
ShapeFactory2.py}{ }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_266" \\o "A_266" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200360036000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 3. \tab}Add a new type of }{\b GameEnvironment}{ called }{\b GnomesAndFairies}{ to }{\b GameEnvironment.py}{ }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_267" \\o "A_267" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200360037000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 4. \tab}Modify }{\b ShapeFactory2.py}{ so that it uses an }{\i Abstract Factory}{ to create different sets of shapes (for example, one particular type of factory object creates \'93
thick shapes,\'94 another creates \'93thin shapes,\'94 but each factory object can create all the shapes: circles, squares, triangles etc.). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_268" \\
o "A_268" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200360038000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_221]#
\par #[BT_222]#\sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0
\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc462393592}{\*\bkmkstart _Toc462393593}{\*\bkmkstart _Toc476705905
}{\*\bkmkstart _Toc534420112}6: Funct{\*\bkmkend _Toc476705905}ion objects{\*\bkmkend _Toc534420112}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_223]#}{In }{\i 
Advanced C++:Programming Styles And Idioms (Addison-Wesley, 1992)}{, Jim Coplien coins the term }{\i functor}{ which is an object whose sole purpose is to encapsulate a function (since \'93functor\'94
 has a meaning in mathematics, in this book I shall use the more explicit term }{\i function object}{). The point is to decouple the choice of function to be called from the site where that function is called. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_269" \\o "A_269" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200360039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_224]#}{This term is mentioned but not used in }{\i Design Patterns}{. However, the theme of the function object is repeated in a number of patterns in that book. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_270" \\o "A_270" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200370030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705906}
{\*\bkmkstart _Toc534420113}Command{\*\bkmkend _Toc462393593}{\*\bkmkend _Toc476705906}: choosing the operation at run-time{\*\bkmkend _Toc534420113}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_225]#}{
This is the function object in its purest sense: a method that\rquote s an object}{\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{ }{\v #[BT_F3]#}{In the Python language, all functions are already objects and so the }{\i Command}{ pattern is often redundant.}}}{
. By wrapping a method in an object, you can pass it to other methods or objects as a parameter, to tell them to perform this particular operation in the process of fulfilling your request. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_271" \\o "A_271" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200370031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c06:CommandPattern.py
\par 
\par class Command:
\par   def execute(self): pass
\par 
\par class Loony(Command):
\par   def execute(self):
\par     print "You're a loony."
\par 
\par class NewBrain(Command):
\par   def execute(self):
\par     print "You might even need a new brain."
\par 
\par class Afford(Command):
\par   def execute(self):
\par     print "I couldn't afford a whole new brain."
\par 
\par # An object that holds commands:
\par class Macro:
\par   def __init__(self):
\par     self.commands = []
\par   def add(self, command): 
\par     self.commands.append(command) 
\par   def run(self):
\par     for c in self.commands:
\par       c.execute()
\par 
\par macro = Macro()
\par macro.add(Loony())
\par macro.add(NewBrain())
\par macro.add(Afford())
\par macro.run()
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_226]#
\par #[BT_227]#}{The primary point of }{\i Command}{ is to allow you to hand a desired action
 to a method or object. In the above example, this provides a way to queue a set of actions to be performed collectively. In this case, it allows you to dynamically create new behavior, something you can normally only do by writing new code but in the abo
ve example could be done by interpreting a script (see the }{\i Interpreter}{ pattern if what you need to do gets very complex). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_272" \\o "A_272" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200370032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_228]#}{\i\v #[BT_229]#}{\i Design Patterns}{ says that \'93Commands are an object-oriented replacement for callbacks}{\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{ }{\v #[BT_F4]#}{Page 235.}}}{.\'94 However, I think that the word \'93back\'94
 is an essential part of the concept of callbacks. That is, I think a callback actually reaches back to the creator of the callback. On the other hand, with a }{\i Command}{
 object you typically just create it and hand it to some method or object, and are not otherwise connected over time to the }{\i Command}{ object. That\rquote s my take on it, anyway. Later in this book, I combine a group of design patterns under 
the heading of \'93callbacks.\'94 }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_273" \\o "A_273" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200370033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc462393594}
{\*\bkmkstart _Toc476705907}{\*\bkmkstart _Toc534420114}Strategy{\*\bkmkend _Toc462393594}{\*\bkmkend _Toc476705907}: choosing the algorithm at run-time{\*\bkmkend _Toc534420114}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\i\v #[BT_230]#}{\i Strategy}{ appears to be a family of }{\i Command}{
 classes, all inherited from the same base. But if you look at }{\i Command}{, you\rquote ll see that it has the same structure: a hierarchy of function objects. The difference is in the way this hierarchy is used. As seen in }{\b c12:DirList.py}{
, you use }{\i Command}{ to solve a particular problem\emdash in that case, selecting files from a list. The \'93thing that stays the same\'94 is the body of the method that\rquote 
s being called, and the part that varies is isolated in the function object. I would hazard to say that }{\i Command}{ provides flexibility while you\rquote re writing the program, whereas }{\i Strategy}{\rquote s flexibility is at run time. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_274" \\o "A_274" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200370034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\i\v #[BT_231]#}{\i Strategy}{ also adds a \'93Context\'94 which can be a surrogate class that controls the selection and use of the particular strategy object\emdash just like }{\i State}{! Here\rquote s what it looks like: }{\field\fldedit{\*\fldinst 
{ HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_275" \\o "A_275" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200370035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c06:StrategyPattern.py
\par 
\par # The strategy interface:
\par class FindMinima:
\par   # Line is a sequence of points:
\par   def algorithm(self, line) : pass
\par 
\par # The various strategies:
\par class LeastSquares(FindMinima):
\par   def algorithm(self, line):
\par     return [ 1.1, 2.2 ] # Dummy
\par 
\par class NewtonsMethod(FindMinima):
\par   def algorithm(self, line):
\par     return [ 3.3, 4.4 ]  # Dummy
\par 
\par class Bisection(FindMinima):
\par   def algorithm(self, line):
\par     return [ 5.5, 6.6 ] # Dummy
\par 
\par class ConjugateGradient(FindMinima):
\par   def algorithm(self, line):
\par     return [ 3.3, 4.4 ] # Dummy
\par 
\par # The "Context" controls the strategy:
\par class MinimaSolver:
\par   def __init__(self, strategy):
\par     self.strategy = strategy
\par 
\par   def minima(self, line):
\par     return self.strategy.algorithm(line)
\par 
\par   def changeAlgorithm(self, newAlgorithm):
\par     self.strategy = newAlgorithm
\par 
\par solver = MinimaSolver(LeastSquares())
\par line = [
\par     1.0, 2.0, 1.0, 2.0, -1.0, 3.0, 4.0, 5.0, 4.0 
\par   ]
\par print solver.minima(line)
\par solver.changeAlgorithm(Bisection())
\par print solver.minima(line)
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Note similarity with template method \endash 
 TM claims distinction that it has more than one method to call, does things piecewise. However, it\rquote s not unlikely that strategy object would have more than one method call; consider Shalloway\rquote 
s order fulfullment system with country information in each strategy. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_276" \\o "A_276" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200370036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Strategy example from standard Python: }{\b sort(\~)}{ takes a second optional argument that acts as a comparator object; this is a strategy. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_277" \\
o "A_277" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200370037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_232]#
\par #[BT_233]#
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705908}
{\*\bkmkstart _Toc534420115}Chain of responsibility{\*\bkmkend _Toc476705908}{\*\bkmkend _Toc534420115}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\i\v #[BT_234]#}{\i Chain of Responsibility}{
 might be thought of as a dynamic generalization of recursion using }{\i Strategy }{objects. You make a call, and each }{\i Strategy}{ in a linked
 sequence tries to satisfy the call. The process ends when one of the strategies is successful or the chain ends. In recursion, one method calls itself over and over until a termination condition is reached; with }{\i Chain of Responsibility}{
, a method calls itself, which (by moving down the chain of }{\i Strategies}{)}{\i  }{
calls a different implementation of the method, etc., until a termination condition is reached. The termination condition is either the bottom of the chain is reached (in which case a default object is re
turned; you may or may not be able to provide a default result so you must be able to determine the success or failure of the chain) or one of the }{\i Strategies}{ is successful. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_278" \\o "A_278" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200370038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_235]#}{Instead of calling a single method to satisfy a request, multiple methods in the chain have a chance to satisfy the request, so it has the flavor of an expert system. Since the chain is effectively a linked list, it can be dyn
amically created, so you could also think of it as a more general, dynamically-built }{\b switch}{ statement. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_279" \\o "A_279" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200370039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par In the GoF, there\rquote s a fair amount of }{\v Thi}{discussion of how to create the chain of responsibility as a linked list. However, when you look at the pattern it really shouldn\rquote t matter how the chain is maintained; that\rquote 
s an implementation detail. Since GoF was written before the Standard Template Library (STL) 
was incorporated into most C++ compilers, the reason for this is most likely (1) there was no list and thus they had to create one and (2) data structures are often taught as a fundamental skill in academia, and the idea that data structures should be sta
ndard tools available with the programming language may not have occurred to the GoF authors. I maintain that the implementation of }{\i Chain of Responsibility}{
 as a chain (specifically, a linked list) adds nothing to the solution and can just as easily be implemented using a standard Python list, as shown below. Furthermore, you\rquote ll see that I\rquote 
ve gone to some effort to separate the chain-management parts of the implementation from the various }{\i Strategies}{, so that the code can be more easily reused. }{\field\fldedit{\*\fldinst { HYPERLINK "ht
tp://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_280" \\o "A_280" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200380030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par }{\v #[BT_236]#}{In }{\b StrategyPattern.py}{, above, what you probably want is to automatically find a solution. }{\i Chain of Responsibility}{ provides a way to do this by chaining the }{\i Strategy}{
 objects together and providing a mechanism for them to automatically recurse through each one in the chain: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_281" \\o "A_281" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200380031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c06:ChainOfResponsibility.py
\par 
\par # Carry the information into the strategy:
\par class Messenger: pass
\par 
\par # The Result object carries the result data and
\par # whether the strategy was successful:
\par class Result:
\par   def __init__(self):
\par     self.succeeded = 0
\par   def isSuccessful(self): 
\par     return self.succeeded 
\par   def setSuccessful(self, succeeded): 
\par     self.succeeded = succeeded
\par 
\par class Strategy:
\par   def __call__(messenger): pass
\par   def __str__(self): 
\par     return "Trying " + self.__class__.__name__ \\
\par       + " algorithm"
\par 
\par # Manage the movement through the chain and
\par # find a successful result:
\par class ChainLink:
\par   def __init__(self, chain, strategy):
\par     self.strategy = strategy
\par     self.chain = chain
\par     self.chain.append(self)
\par 
\par   def next(self):
\par     # Where this link is in the chain:
\par     location = self.chain.index(self)
\par     if not self.end():
\par       return self.chain[location + 1]
\par 
\par   def end(self):
\par     return (self.chain.index(self) + 1 >= 
\par             len(self.chain))
\par 
\par   def __call__(self, messenger):
\par     r = self.strategy(messenger)
\par     if r.isSuccessful() or self.end(): return r
\par     return self.next()(messenger)
\par 
\par # For this example, the Messenger
\par # and Result can be the same type:
\par class LineData(Result, Messenger):
\par   def __init__(self, data):
\par     self.data = data
\par   def __str__(self): return `self.data`
\par 
\par class LeastSquares(Strategy):
\par   def __call__(self, messenger):
\par     print self
\par     linedata = messenger
\par     # [ Actual test/calculation here ]
\par     result = LineData([1.1, 2.2]) # Dummy data
\par     result.setSuccessful(0)
\par     return result
\par 
\par class NewtonsMethod(Strategy):
\par   def __call__(self, messenger):
\par     print self
\par     linedata = messenger
\par     # [ Actual test/calculation here ]
\par     result = LineData([3.3, 4.4]) # Dummy data
\par     result.setSuccessful(0)
\par     return result
\par 
\par class Bisection(Strategy):
\par   def __call__(self, messenger):
\par     print self
\par     linedata = messenger
\par     # [ Actual test/calculation here ]
\par     result = LineData([5.5, 6.6]) # Dummy data
\par     result.setSuccessful(1)
\par     return result
\par 
\par class ConjugateGradient(Strategy):
\par   def __call__(self, messenger):
\par     print self
\par     linedata = messenger
\par     # [ Actual test/calculation here ]
\par     result = LineData([7.7, 8.8]) # Dummy data
\par     result.setSuccessful(1)
\par     return result
\par 
\par solutions = []
\par solutions = [
\par   ChainLink(solutions, LeastSquares()),
\par   ChainLink(solutions, NewtonsMethod()),
\par   ChainLink(solutions, Bisection()),
\par   ChainLink(solutions, ConjugateGradient())
\par ]
\par 
\par line = LineData([ 
\par   1.0, 2.0, 1.0, 2.0, -1.0, 
\par   3.0, 4.0, 5.0, 4.0 
\par ])
\par 
\par print solutions[0](line)
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_237]#
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420116}
Exercises{\*\bkmkend _Toc534420116}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls7\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {Use }{\i Command}{ in Chapter 3, Exercise 1. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_282" \\o "A_282" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200380032000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 2. \tab}Implement }{\i Chain of Responsibility}{ to create an "expert system" that solves problems by successively trying one solution after another unti
l one matches. You should be able to dynamically add solutions to the expert system. The test for solution should just be a string match, but when a solution fits, the expert system should return the appropriate type of }{\b ProblemSolver}{
 object. What other pattern/patterns show up here? }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_283" \\o "A_283" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200380033000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v {\*\bkmkstart _Toc476705909}#[BT_238]#\sect }\sectd 
\binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 
\cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420117}7: Changing the interface{\*\bkmkend _Toc476705909}{\*\bkmkend _Toc534420117}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_239]#}{Sometimes the problem that you\rquote 
re solving is as simple as \'93I don\rquote t have the interface that I want.\'94 Two of the patterns in }{\i Design Patterns}{ solve this problem: }{\i Adapter}{ takes one type and produces an interface to some other type. }{\i Fa\'e7ade}{
 creates an interface to a set of classes, simply to provide a more comfortable way to deal with a library or bundle of resources. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_284" \\o "A_284" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200380034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705910}
{\*\bkmkstart _Toc534420118}Adapter{\*\bkmkend _Toc476705910}{\*\bkmkend _Toc534420118}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_240]#}{When you\rquote ve got }{\i this}{, and you need }{\i that
}{, }{\i Adapter}{ solves the problem. The only requirement is to produce a }{\i that}{, and there are a number of ways you can accomplish this adaptation. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_285" \\o "A_285" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200380035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c07:Adapter.py
\par # Variations on the Adapter pattern.
\par 
\par class WhatIHave:
\par   def g(self): pass
\par   def h(self): pass
\par 
\par class WhatIWant:
\par   def f(self): pass
\par 
\par class ProxyAdapter(WhatIWant):
\par   def __init__(self, whatIHave):
\par     self.whatIHave = whatIHave
\par 
\par   def f(self):
\par     # Implement behavior using 
\par     # methods in WhatIHave:
\par     self.whatIHave.g()
\par     self.whatIHave.h()
\par 
\par class WhatIUse:
\par   def op(self, whatIWant):
\par     whatIWant.f()
\par 
\par # Approach 2: build adapter use into op():
\par class WhatIUse2(WhatIUse):
\par   def op(self, whatIHave):
\par     ProxyAdapter(whatIHave).f()
\par 
\par # Approach 3: build adapter into WhatIHave:
\par class WhatIHave2(WhatIHave, WhatIWant):
\par   def f(self):
\par     self.g()
\par     self.h()
\par 
\par # Approach 4: use an inner class:
\par class WhatIHave3(WhatIHave):
\par   class InnerAdapter(WhatIWant):
\par     def __init__(self, outer):
\par       self.outer = outer
\par     def f(self):
\par       self.outer.g()
\par       self.outer.h()
\par 
\par   def whatIWant(self): 
\par     return WhatIHave3.InnerAdapter(self)
\par 
\par whatIUse = WhatIUse()
\par whatIHave = WhatIHave()
\par adapt= ProxyAdapter(whatIHave)
\par whatIUse2 = WhatIUse2()
\par whatIHave2 = WhatIHave2()
\par whatIHave3 = WhatIHave3()
\par whatIUse.op(adapt)
\par # Approach 2:
\par whatIUse2.op(whatIHave)
\par # Approach 3:
\par whatIUse.op(whatIHave2)
\par # Approach 4:
\par whatIUse.op(whatIHave3.whatIWant())
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_241]#
\par #[BT_242]#}{I\rquote m taking liberties with the term \'93proxy\'94 here, because in }{\i Design Patterns}{ they assert that a proxy must have an identical interface with the object that it is a surrogate for. However, if you have the two words together: 
\'93proxy adapter,\'94 it is perhaps more reasonable. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_286" \\o "A_286" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200380036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705911}
{\*\bkmkstart _Toc534420119}Fa\'e7ade{\*\bkmkend _Toc476705911}{\*\bkmkend _Toc534420119}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_243]#}{A general principle that I apply when I\rquote 
m casting about trying to mold requirements into a first-cut object is \'93If something is ugly, hide it inside an object.\'94 This is basically what }{\i Fa\'e7ade}{
 accomplishes. If you have a rather confusing collection of classes and interactions that the client programmer doesn\rquote t really need to see, then you can create an interface that is useful for the client programmer and that only presents what
\rquote s necessary. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_287" \\o "A_287" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200380037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_244]#}{Fa\'e7ade is often implemented as singleton abstract factory. Of course, you can easily get this effect by creating a class containing }{\b static}{ factory methods: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_288" \\o "A_288" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200380038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c07:Facade.py
\par class A:
\par   def __init__(self, x): pass
\par class B:
\par   def __init__(self, x): pass
\par class C:
\par   def __init__(self, x): pass
\par 
\par # Other classes that aren't exposed by the
\par # facade go here ...
\par 
\par class Facade:
\par   def makeA(x): return A(x)
\par   makeA = staticmethod(makeA)
\par   def makeB(x): return B(x)
\par   makeB = staticmethod(makeB)
\par   def makeC(x): return C(x)
\par   makeC = staticmethod(makeC)
\par 
\par # The client programmer gets the objects
\par # by calling the static methods:
\par a = Facade.makeA(1);
\par b = Facade.makeB(1);
\par c = Facade.makeC(1.0);
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {[rewrite this section using research from Larman\rquote s book]}{\v 
#[BT_245]#
\par #[BT_246]#}{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_289" \\o "A_289" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200380039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420120}
Exercises{\*\bkmkend _Toc534420120}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls8\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {Create an adapter class that automatically loads a two-dimensional array of objects into a dictionary as key-value pairs. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_290" \\o "A_290" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200390030000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \v\f29\kerning20 \hich\af29\dbch\af0\loch\f29 2. \tab}}{\v 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_250]#
\par #[BT_251]#\sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0
\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705912}{\*\bkmkstart _Toc534420121}8: Table-driven 
code: configuration flexibility{\*\bkmkend _Toc534420121}
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420122}
Table-driven code using anonymous inner classes{\*\bkmkend _Toc534420122}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_252]#}{See }{\b ListPerformance}{ example in TIJ from Chapter 9 }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_291" \\o "A_291" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200390031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_253]#}{Also }{\b GreenHouse.py}{\v #[BT_254]#
\par #[BT_255]#\sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkend _Toc476705912}\sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_380]#\sect }\sectd 
\binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 
\cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705913}{\*\bkmkstart _Toc534420123}10: Callbacks{\*\bkmkend _Toc462393592}{\*\bkmkend _Toc476705913}{\*\bkmkend _Toc534420123}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_381]#}{Decoupling code behavior
\par }{\i\v #[BT_382]#}{\i Observer}{, and a category of callbacks called \'93multiple dispatching (not in }{\i Design Patterns}{)\'94 including the }{\i Visitor}{ from }{\i Design Patterns}{. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_292" \\o "A_292" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200390032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc462393595}
{\*\bkmkstart _Toc476705914}{\*\bkmkstart _Toc534420124}Observer{\*\bkmkend _Toc462393595}{\*\bkmkend _Toc476705914}{\*\bkmkend _Toc534420124}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_383]#}{
Like the other forms of callback, this contains a hook point where you can change code. The difference is in the observer\rquote s completely dynamic nature. It is often used for the specific case of changes based on other object\rquote 
s change of state, but is also the basis of event management. Anytime you want to decouple the source of the call from the called code in a completely dynamic way. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_293" \\o "A_293" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200390033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_384]#}{The }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: observer}}}{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {observer design pattern}}}{observer p
attern solves a fairly common problem: What if a group of o}{b}{jects needs to update themselves when some object changes state? This can be seen in the \'93model-view\'94 aspect of Smalltalk\rquote s MVC (model-view-controller), or the almost-equivalent 
\'93Document-View Architecture.\'94 Suppose that you have some data (the \'93document\'94) and more than one view, say a plot and a textual view. When you change the data, the two views must know to update themselves, and that\rquote 
s what the observer facilitates. It\rquote s a common enough problem that its solution has been made a part of the standard }{\b java.util}{ library. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_294" 
\\o "A_294" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200390034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_385]#}{There are two types of objects used to implement the observer pattern in Python. The }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Observable}}}{\b Observable}{ class keeps track of everybody who wants to be i}{n}{formed when a change happens, whether the \'93state\'94 has changed or not. When someone says 
\'93OK, everybody should check and potentially update themselves,\'94 the }{\b Observable}{ class performs this task by calling the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {notifyObservers(\~)}}}{\b notifyObservers(\~)}{ method for each one on the list. The }{\b notifyObservers(\~)}{ method is part of the base class }{\b Observable}{. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_295" \\o "A_295" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200390035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_386]#}{There are actually two \'93things that change\'94 in the observer pattern: the quantity of observing objects and the way an update occurs. That is, the o}{b}{server pattern allows you to modify both of these without affecting the su}{r}{
rounding code. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_296" \\o "A_296" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200390036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_387]#}{-------------
\par }{\b\v #[BT_388]#}{\b Observer}{ is an \'93interface\'94 class that only has one member function, }{\b update(\~)}{. This function is called by the object that\rquote 
s being observed, when that object decides its time to update all its observers. The arguments are optional; you could have an }{\b update(\~)}{ with no arguments and that would still fit the observer pattern; however this is more general\emdash 
it allows the observed object to pass the object that caused the update (since an }{\b Observer }{may be registered with more than one observed object) and any extra information if that\rquote s helpful, rather than forcing the }{\b Observer}{
 object to hunt around to see who is updating and to fetch any other information it needs. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_297" \\o "A_297" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200390037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_389]#}{The \'93observed object\'94 that decides when and how to do the updating will be called the }{\b Observable}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_298" \\o "A_298" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200390038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\b\v #[BT_390]#}{\b Observable}{ has a flag to indicate whether it\rquote s been changed. In a simpler design, there would be no flag; if something happened, everyone would be notified. The flag allows you to wait, and only notify the }{\b Observer}{
s when you decide the time is right. Notice, however, that the control of the flag\rquote s state is }{\b protected}{, so that only an inheritor can decide what constitutes a change, and not the end user of the resulting derived }{\b Observer}{ class. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_299" \\o "A_299" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003200390039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_391]#}{Most of the work is done in }{\b notifyObservers(\~)}{. If the }{\b changed}{ flag has not been set, this does nothing. Otherwise, it first clears the }{\b changed}{ flag so repeated calls to }{\b notifyObservers(\~)}{ won\rquote 
t waste time. This is done before notifying the observers in case the calls to }{\b update(\~)}{ do anything that causes a change back to this }{\b Observable}{ object. Then it moves through the }{\b set}{ and calls back to the }{\b update(\~)}{
 member function of each }{\b Observer}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_300" \\o "A_300" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300300030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_392]#}{At first it may appear that you can use an ordinary }{\b Observable}{ object to manage the updates. But this doesn\rquote t work; to get an effect, you }{\i must}{ inherit from }{\b Obser}{\b v}{\b able}{
 and somewhere in your derived-class code call }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {setChanged(\~)}}}{
\b setChanged(\~)}{. This is the member function that sets the \'93changed\'94 flag, which means that when you call }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {notifyObservers(\~)}}}{\b notifyObservers(\~)}{ all of the observers will, in fact, get notified. }{\i Where}{ you call }{\b setChanged(\~)}{
 depends on the logic of your program. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_301" \\o "A_301" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300300031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420125}
Observing flowers{\*\bkmkend _Toc534420125}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Since Python doesn\rquote 
t have standard library components to support the observer pattern (like Java does), we must first create one. The simplest thing to do is translate the Java standard library }{\b Observer}{ and }{\b Observable}{
 classes. This also provides easier translation from Java code that uses these libraries. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_302" \\o "A_302" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300300032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par In trying to do this, we encounter a minor snag, which is the fact that Java has a }{\b synchronized}{ keyword that provides built-in support for thread synchronization. We could certainly accomplish the same thing by hand, using code like this: }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_303" \\o "A_303" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300300033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {import threading 
\par class ToSynch:
\par   def __init__(self):
\par     self.mutex = threading.RLock()
\par     self.val = 1
\par   def aSynchronizedMethod(self):
\par     self.mutex.acquire()
\par     try:
\par       self.val += 1
\par       return self.val
\par     finally:
\par       self.mutex.release()
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {
But this rapidly becomes tedious to write and to read. Peter Norvig provided me with a much nicer solution: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_304" \\o "A_304" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300300034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: util:Synchronization.py
\par '''Simple emulation of Java's 'synchronized'
\par keyword, from Peter Norvig.'''
\par import threading
\par 
\par def synchronized(method):
\par   def f(*args):
\par     self = args[0]
\par     self.mutex.acquire();  
\par     # print method.__name__, 'acquired'
\par     try:
\par       return apply(method, args)
\par     finally:
\par       self.mutex.release();  
\par       # print method.__name__, 'released'
\par   return f
\par 
\par def synchronize(klass, names=None):
\par   """Synchronize methods in the given class.  
\par   Only synchronize the methods whose names are 
\par   given, or all methods if names=None."""
\par   if type(names)==type(''): names = names.split()
\par   for (name, val) in klass.__dict__.items():
\par     if callable(val) and name != '__init__' and \\
\par       (names == None or name in names):
\par         # print "synchronizing", name
\par         klass.__dict__[name] = synchronized(val)
\par 
\par # You can create your own self.mutex, or inherit
\par # from this class:
\par class Synchronization:
\par   def __init__(self):
\par     self.mutex = threading.RLock()
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {The }{\b synchronized(\~)}{
 function takes a method and wraps it in a function that adds the mutex functionality. The method is called inside this function: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_305" \\o "A_305" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300300035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {return apply(method, args)
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {and as the }{\b return}{ statement passes through the }{\b finally}{
 clause, the mutex is released. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_306" \\o "A_306" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300300036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par This is in some ways the }{\i Decorator}{ design pattern, but much simpler to create and use. All you have to say is:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {myMethod = synchronized(myMethod)

\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {To surround your method with a mutex. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_307" \\o "A_307" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300300037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\b synchronize(\~)}{ is a convenience function that applies }{\b synchronized(\~)}{ to an entire class, either all the methods in the class (the default) or selected methods which are named in a string as the second argument. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_308" \\o "A_308" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300300038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Finally, for }{\b synchronized( )}{ to work there must be a }{\b self.mutex}{ created in every class that uses }{\b synchronized( )}{. This can be created by hand by the class author, but it\rquote s more consistent to use inheritance, so the base class }
{\b Synchronization}{ is provided. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_309" \\o "A_309" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300300039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Here\rquote s a simple test of the }{\b Synchronization}{ module.
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: util:TestSynchronization.py
\par from Synchronization import * 
\par 
\par # To use for a method:
\par class C(Synchronization):
\par   def __init__(self):
\par     Synchronization.__init__(self)
\par     self.data = 1
\par   def m(self):
\par     self.data += 1
\par     return self.data
\par   m = synchronized(m)
\par   def f(self): return 47
\par   def g(self): return 'spam'
\par 
\par # So m is synchronized, f and g are not.
\par c = C()
\par 
\par # On the class level:
\par class D(C):
\par   def __init__(self):
\par     C.__init__(self)
\par   # You must override an un-synchronized method
\par   # in order to synchronize it (just like Java):
\par   def f(self): C.f(self)
\par 
\par # Synchronize every (defined) method in the class:
\par synchronize(D)
\par d = D()
\par d.f() # Synchronized
\par d.g() # Not synchronized
\par d.m() # Synchronized (in the base class)
\par 
\par class E(C):
\par   def __init__(self):
\par     C.__init__(self)
\par   def m(self): C.m(self)
\par   def g(self): C.g(self)
\par   def f(self): C.f(self)
\par # Only synchronizes m and g. Note that m ends up
\par # being doubly-wrapped in synchronization, which
\par # doesn't hurt anything but is inefficient:
\par synchronize(E, 'm g')
\par e = E()
\par e.f()
\par e.g()
\par e.m()
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {You must call the base class constructor for }{\b Synchronization}{
, but that\rquote s all. In class }{\b C}{ you can see the use of }{\b synchronized( )}{ for }{\b m}{, leaving }{\b f}{ and }{\b g}{ alone. Class }{\b D}{ has all it\rquote s methods synchronized en masse, and class }{\b E}{
 uses the convenience function to synchronize }{\b m}{ and }{\b g}{. Note that since }{\b m}{ ends up being synchronized twice, it will be entered and left twice for every call, which isn\rquote t very desirable [there may be a fix for this] }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_310" \\o "A_310" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300310030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: util:Observer.py
\par # Class support for "observer" pattern.
\par from Synchronization import *
\par 
\par class Observer:
\par   def update(observable, arg):
\par     '''Called when the observed object is 
\par     modified. You call an Observable object's 
\par     notifyObservers method to notify all the 
\par     object's observers of the change.'''
\par     pass
\par 
\par class Observable(Synchronization):
\par   def __init__(self):
\par     self.obs = []
\par     self.changed = 0
\par     Synchronization.__init__(self)
\par 
\par   def addObserver(self, observer):
\par     if observer not in self.obs:
\par       self.obs.append(observer)
\par 
\par   def deleteObserver(self, observer):
\par     self.obs.remove(observer)
\par 
\par   def notifyObservers(self, arg = None):
\par     '''If 'changed' indicates that this object 
\par     has changed, notify all its observers, then 
\par     call clearChanged(). Each observer has its 
\par     update() called with two arguments: this 
\par     observable object and the generic 'arg'.'''
\par 
\par     self.mutex.acquire()
\par     try:
\par       if not self.changed: return
\par       # Make a local copy in case of synchronous
\par       # additions of observers:
\par       localArray = self.obs[:]
\par       self.clearChanged()
\par     finally:
\par       self.mutex.release()
\par     # Updating is not required to be synchronized:
\par     for observer in localArray:
\par       observer.update(self, arg)
\par 
\par   def deleteObservers(self): self.obs = []
\par   def setChanged(self): self.changed = 1
\par   def clearChanged(self): self.changed = 0
\par   def hasChanged(self): return self.changed
\par   def countObservers(self): return len(self.obs)
\par 
\par synchronize(Observable, 
\par   "addObserver deleteObserver deleteObservers " +
\par   "setChanged clearChanged hasChanged " +
\par   "countObservers")
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {Using this library, }{\v #[BT_393]#}{
here is an example of the observer pattern: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_311" \\o "A_311" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300310031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c10:ObservedFlower.py
\par # Demonstration of "observer" pattern.
\par import sys
\par sys.path += ['../util']
\par from Observer import Observer, Observable
\par 
\par class Flower:
\par   def __init__(self): 
\par     self.isOpen = 0
\par     self.openNotifier = Flower.OpenNotifier(self)
\par     self.closeNotifier= Flower.CloseNotifier(self)
\par   def open(self): # Opens its petals
\par     self.isOpen = 1
\par     self.openNotifier.notifyObservers()
\par     self.closeNotifier.open()
\par   def close(self): # Closes its petals
\par     self.isOpen = 0
\par     self.closeNotifier.notifyObservers()
\par     self.openNotifier.close()
\par   def closing(self): return self.closeNotifier 
\par 
\par   class OpenNotifier(Observable):
\par     def __init__(self, outer):
\par       Observable.__init__(self)
\par       self.outer = outer
\par       self.alreadyOpen = 0
\par     def notifyObservers(self):
\par       if self.outer.isOpen and \\
\par       not self.alreadyOpen:
\par         self.setChanged()
\par         Observable.notifyObservers(self)
\par         self.alreadyOpen = 1
\par     def close(self): 
\par       self.alreadyOpen = 0 
\par 
\par   class CloseNotifier(Observable):
\par     def __init__(self, outer):
\par       Observable.__init__(self)
\par       self.outer = outer
\par       self.alreadyClosed = 0
\par     def notifyObservers(self):
\par       if not self.outer.isOpen and \\
\par       not self.alreadyClosed:
\par         self.setChanged()
\par         Observable.notifyObservers(self)
\par         self.alreadyClosed = 1
\par     def open(self): 
\par       alreadyClosed = 0 
\par 
\par class Bee:
\par   def __init__(self, name):
\par     self.name = name
\par     self.openObserver = Bee.OpenObserver(self)
\par     self.closeObserver = Bee.CloseObserver(self)
\par   # An inner class for observing openings:
\par   class OpenObserver(Observer):
\par     def __init__(self, outer):
\par       self.outer = outer
\par     def update(self, observable, arg):
\par       print "Bee " + self.outer.name + \\
\par         "'s breakfast time!"
\par   # Another inner class for closings:
\par   class CloseObserver(Observer):
\par     def __init__(self, outer):
\par       self.outer = outer
\par     def update(self, observable, arg):
\par       print "Bee " + self.outer.name + \\
\par         "'s bed time!"
\par 
\par class Hummingbird:
\par   def __init__(self, name): 
\par     self.name = name
\par     self.openObserver = \\
\par       Hummingbird.OpenObserver(self)
\par     self.closeObserver = \\
\par       Hummingbird.CloseObserver(self)
\par   class OpenObserver(Observer):
\par     def __init__(self, outer):
\par       self.outer = outer
\par     def update(self, observable, arg):
\par       print "Hummingbird " + self.outer.name + \\
\par         "'s breakfast time!"
\par   class CloseObserver(Observer):
\par     def __init__(self, outer):
\par       self.outer = outer
\par     def update(self, observable, arg):
\par       print "Hummingbird " + self.outer.name + \\
\par         "'s bed time!"
\par 
\par f = Flower()
\par ba = Bee("Eric")
\par bb = Bee("Eric 0.5")
\par ha = Hummingbird("A")
\par hb = Hummingbird("B")
\par f.openNotifier.addObserver(ha.openObserver)
\par f.openNotifier.addObserver(hb.openObserver)
\par f.openNotifier.addObserver(ba.openObserver)
\par f.openNotifier.addObserver(bb.openObserver)
\par f.closeNotifier.addObserver(ha.closeObserver)
\par f.closeNotifier.addObserver(hb.closeObserver)
\par f.closeNotifier.addObserver(ba.closeObserver)
\par f.closeNotifier.addObserver(bb.closeObserver)
\par # Hummingbird 2 decides to sleep in:
\par f.openNotifier.deleteObserver(hb.openObserver)
\par # A change that interests observers:
\par f.open()
\par f.open() # It's already open, no change.
\par # Bee 1 doesn't want to go to bed:
\par f.closeNotifier.deleteObserver(ba.closeObserver)
\par f.close()
\par f.close() # It's already closed; no change
\par f.openNotifier.deleteObservers()
\par f.open()
\par f.close()
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_394]#
\par #[BT_395]#}{The events of interest are that a }{\b Flower}{ can open or close. Because of the use of the inner class idiom, both these events can be separately observable phenomena. }{\b OpenNotifier}{ and }{\b CloseNotifier}{ both inherit }{\b Observable
}{, so they have access to }{\b setChanged(\~)}{ and can be handed to anything that needs an }{\b Observable}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_312" \\o "A_312" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300310032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_396]#}{The inner class idiom also comes in handy to define more than one kind of }{\b Observer}{, in }{\b Bee}{ and }{\b Hummingbird}{, since both those classes may want to independently observe }{\b Flower}{ openings and closings. Notice how t
he inner class idiom provides something that has most of the benefits of inheritance (the ability to access the }{\b private}{ data in the outer class, for example) without the same restrictions. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_313" \\o "A_313" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300310033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_397]#}{In }{\b main(\~)}{, you can see one of the prime benefits of the observer pattern: the ability to change behavior at run time by dynamically registering and un-registering }{\b Observer}{s with }{\b Observable}{s. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_314" \\o "A_314" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300310034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_398]#}{If you study the code above you\rquote ll see that }{\b OpenNotifier }{and }{\b CloseNotifier}{ use the basic }{\b Observable}{ interface. This means that you could inherit other completely different }{\b Obser}{\b v}{\b er}{
 classes; the only connection the }{\b Observer}{s have with }{\b Flower}{s is the }{\b Observer}{ interface. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_315" \\o "A_315" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300310035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc462393596}
{\*\bkmkstart _Toc476705915}{\*\bkmkstart _Toc534420126}A visual example of observers{\*\bkmkend _Toc476705915}{\*\bkmkend _Toc534420126}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_399]#}{The following example is similar to the }{\b ColorBoxes}{
 example from Chapter 14 in }{\i Thinking in Java, 2}{\i\super nd}{\i  Edition}{. Boxes are placed in a grid on the screen and each one is initialized to a random color. In addition, each box }{\b implements}{ the }{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Observer}}}{\b Observer}{ interface and is registered with an }{\b Observable}{
 object. When you click on a box, all of the other boxes are notified that a change has been made because the }{\b Observable}{ object automatically calls each }{\b Observer }{object\rquote s }{\b update(\~)}{ method. Inside this method, th
e box checks to see if it\rquote s adjacent to the one that was clicked, and if so it changes its color to match the clicked box. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_316" \\o "A_316" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300310036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {\f28\noproof0 [[ NOTE: this example has not 
been converted. See further down for a version that has the GUI but not the Observers, in PythonCard. ]]
\par }\pard \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {#  c10:BoxObserver.py
\par # Demonstration of Observer pattern using
\par # Java's built-in observer classes.
\par 
\par # You must inherit a type of Observable:
\par class BoxObservable(Observable):
\par   def notifyObservers(self, Object b):
\par     # Otherwise it won't propagate changes:
\par     setChanged()
\par     super.notifyObservers(b)
\par 
\par class BoxObserver(JFrame):
\par   Observable notifier = BoxObservable()
\par   def __init__(self, int grid):
\par     setTitle("Demonstrates Observer pattern")
\par     Container cp = getContentPane()
\par     cp.setLayout(GridLayout(grid, grid))
\par     for(int x = 0 x < grid x++)
\par       for(int y = 0 y < grid y++)
\par         cp.add(OCBox(x, y, notifier))
\par      
\par   def main(self, String[] args):
\par     int grid = 8
\par     if(args.length > 0)
\par       grid = Integer.parseInt(args[0])
\par     JFrame f = BoxObserver(grid)
\par     f.setSize(500, 400)
\par     f.setVisible(1)
\par     # JDK 1.3:
\par     f.setDefaultCloseOperation(EXIT_ON_CLOSE)
\par     # Add a WindowAdapter if you have JDK 1.2
\par 
\par class OCBox(JPanel) implements Observer:
\par   Observable notifier
\par   int x, y # Locations in grid
\par   Color cColor = newColor()
\par   static final Color[] colors =: 
\par     Color.black, Color.blue, Color.cyan, 
\par     Color.darkGray, Color.gray, Color.green,
\par     Color.lightGray, Color.magenta, 
\par     Color.orange, Color.pink, Color.red, 
\par     Color.white, Color.yellow 
\par 
\par   static final Color newColor():
\par     return colors[
\par       (int)(Math.random() * colors.length)
\par     ]
\par 
\par   def __init__(self, int x, int y, Observable notifier):
\par     self.x = x
\par     self.y = y
\par     notifier.addObserver(self)
\par     self.notifier = notifier
\par     addMouseListener(ML())
\par 
\par   def paintComponent(self, Graphics g):
\par     super.paintComponent(g)
\par     g.setColor(cColor)
\par     Dimension s = getSize()
\par     g.fillRect(0, 0, s.width, s.height)
\par 
\par   class ML(MouseAdapter):
\par     def mousePressed(self, MouseEvent e):
\par       notifier.notifyObservers(OCBox.self)
\par 
\par   def update(self, Observable o, Object arg):
\par     OCBox clicked = (OCBox)arg
\par     if(nextTo(clicked)):
\par       cColor = clicked.cColor
\par       repaint()
\par 
\par   private final boolean nextTo(OCBox b):
\par     return Math.abs(x - b.x) <= 1 && 
\par            Math.abs(y - b.y) <= 1
\par 
\par # :~
\par }\pard \s16\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\f28\noproof0 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_400]#}{When you first look at the online documentation for }{\b 
Observable}{, it\rquote s a bit confusing because it appears that you can use an ordinary }{\b Observable}{ object to manage the updates. But this doesn\rquote t work; try it\emdash inside }{\b BoxO}{\b b}{\b server}{, create an }{\b Observable}{
 object instead of a }{\b BoxObservable}{ object and see what happens: nothing. To get an effect, you }{\i must}{ inherit from }{\b Obser}{\b v}{\b able}{ and somewhere in your derived-class code call }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {setChanged(\~)}}}{\b setChanged(\~)}{. This is the method that sets the \'93changed\'94
 flag, which means that when you call }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {notifyObservers(\~)}}}{\b 
notifyObservers(\~)}{ all of the observers will, in fact, get notified. In the e}{x}{ample above }{\b setChanged(\~)}{ is simply called within }{\b notifyObservers(\~)}{, but you could use any criterion you want to decide when to call }{\b setChanged(\~)}
{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_317" \\o "A_317" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300310037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\b\v #[BT_401]#}{\b BoxObserver}{ contains a single }{\b Observable }{object called }{\b notifier}{, and every time an }{\b OCBox}{ object is created, it is tied to }{\b notifier}{. In }{\b OCBox}{, whenever you click the mouse the }{\b notifyObservers(
\~)}{ method is called, passing the clicked object in as an argument so that all the boxes receiving the message (in their }{\b update(\~) }{method) know who was clicked and can decide whether to change themselves or not. Using a combination of code in }{
\b notifyObservers(\~)}{ and }{\b update(\~)}{ you can work out some fairly complex schemes. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_318" \\o "A_318" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300310038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_402]#}{It might appear that the way the observers are notified must be frozen at compile time in the }{\b notifyObservers(\~)}{ method. However, if you look more closely at the code above you\rquote ll see that the only place in }{\b BoxObserver
}{ or }{\b OCBox}{ where you're aware that you\rquote re working with a }{\b BoxObservable}{ is at the point of creation of the }{\b Observable }{object\emdash from then on everything uses the basic }{\b Observable}{
 interface. This means that you could inherit other }{\b Obser}{\b v}{\b able}{ classes and swap them at run time if you want to change notification behavior then. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_319" \\o "A_319" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300310039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par Here is a version of the above that doesn\rquote t use the Observer pattern, written by Kevin Altis using PythonCard, and placed here as a starting point for a translation that does include Observer:}{\v Here }{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c10:BoxObserver.py
\par """ Written by Kevin Altis as a first-cut for
\par converting BoxObserver to Python. The Observer
\par hasn't been integrated yet.
\par To run this program, you must:
\par Install WxPython from
\par http://www.wxpython.org/download.php
\par Install PythonCard. See:
\par http://pythoncard.sourceforge.net
\par """
\par 
\par from PythonCardPrototype import log, model
\par import random
\par 
\par GRID = 8
\par 
\par class ColorBoxesTest(model.Background):
\par   def on_openBackground(self, target, event):
\par     self.document = []
\par     for row in range(GRID):
\par       line = []
\par       for column in range(GRID):
\par         line.append(self.createBox(row, column))
\par       self.document.append(line[:])
\par   def createBox(self, row, column):
\par     colors = ['black', 'blue', 'cyan',
\par     'darkGray', 'gray', 'green',
\par     'lightGray', 'magenta',
\par     'orange', 'pink', 'red',
\par     'white', 'yellow']
\par     width, height = self.panel.GetSizeTuple()
\par     boxWidth = width / GRID
\par     boxHeight = height / GRID
\par     log.info("width:" + str(width) +
\par       " height:" + str(height))
\par     log.info("boxWidth:" + str(boxWidth) +
\par       " boxHeight:" + str(boxHeight))
\par     # use an empty image, though some other
\par     # widgets would work just as well
\par     boxDesc = \{'type':'Image',
\par       'size':(boxWidth, boxHeight), 'file':''\}
\par     name = 'box-%d-%d' % (row, column)
\par     # There is probably a 1 off error in the
\par     # calculation below since the boxes should
\par     # probably have a slightly different offset
\par     # to prevent overlaps
\par     boxDesc['position'] =
\par       (column * boxWidth, row * boxHeight)
\par     boxDesc['name'] = name
\par     boxDesc['backgroundColor'] =
\par       random.choice(colors)
\par     self.components[name] =  boxDesc
\par     return self.components[name]
\par 
\par   def changeNeighbors(self, row, column, color):
\par 
\par     # This algorithm will result in changing the
\par     # color of some boxes more than once, so an
\par     # OOP solution where only neighbors are asked
\par     # to change or boxes check to see if they are
\par     # neighbors before changing would be better
\par     # per the original example does the whole grid
\par     # need to change its state at once like in a
\par     # Life program? should the color change 
\par     # in the propogation of another notification
\par     # event?
\par 
\par     for r in range(max(0, row - 1), 
\par                    min(GRID, row + 2)):
\par       for c in range(max(0, column - 1), 
\par                      min(GRID, column + 2)):
\par         self.document[r][c].backgroundColor=color
\par 
\par   # this is a background handler, so it isn't  
\par   # specific to a single widget. Image widgets 
\par   # don't have a mouseClick event (wxCommandEvent
\par   # in wxPython)
\par   def on_mouseUp(self, target, event):
\par     prefix, row, column = target.name.split('-')
\par     self.changeNeighbors(int(row), int(column), 
\par                          target.backgroundColor)
\par 
\par if __name__ == '__main__':
\par   app = model.PythonCardApp(ColorBoxesTest)
\par   app.MainLoop()
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {This is th
e resource file for running the program (see PythonCard for details):
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c10:BoxObserver.rsrc.py
\par \{'stack':\{'type':'Stack',
\par           'name':'BoxObserver',
\par     'backgrounds': [
\par       \{ 'type':'Background',
\par         'name':'bgBoxObserver',
\par         'title':'Demonstrates Observer pattern',
\par         'position':(5, 5),
\par         'size':(500, 400),
\par         'components': [
\par 
\par ] # end components
\par \} # end background
\par ] # end backgrounds
\par \} \}
\par #:~
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420127}
Exercises{\*\bkmkend _Toc534420127}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls10\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {Using the approach in }{\b Synchronization.py}{, create a tool that will autom
atically wrap all the methods in a class to provide an execution trace, so that you can see the name of the method and when it is entered and exited. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_320" 
\\o "A_320" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300320030000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 2. \tab}Create a minimal Observer-Observable design in two classes. Just create the bare minimum in the two classes, then demonstrate your design by creating one }{\b Observable}{
 and many }{\b Observer}{s, and cause the }{\b Observable}{ to update the }{\b Observer}{s. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_321" \\o "A_321" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300320031000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 3. \tab}}\pard \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin1080\itap0 {Modify }{\b BoxObserver.py}{
 to turn it into a simple game. If any of the squares surrounding the one you clicked is part of a contiguous patch of the same color, then all the squares 
in that patch are changed to the color you clicked on. You can configure the game for competition between players or to keep track of the number of clicks that a single player uses to turn the field into a single color. You may also want to restrict a pla
yer's color to the first one that was chosen. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_322" \\o "A_322" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300320032000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_403]#
\par #[BT_404]#\sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0
\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705916}{\*\bkmkstart _Toc534420128}11: Multiple dispatching
{\*\bkmkend _Toc462393596}{\*\bkmkend _Toc476705916}{\*\bkmkend _Toc534420128}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_405]#}{When dealing with multiple types which are interact
ing, a program can get particularly messy. For example, consider a system that parses and executes mathematical expressions. You want to be able to say }{\b Number + Number}{, }{\b Number * Number}{, etc., where }{\b Number}{
 is the base class for a family of numerical objects. But when you say }{\b a + b}{, and you don\rquote t know the exact type of either }{\b a}{ or }{\b b}{, so how can you get them to interact properly? }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_323" \\o "A_323" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300320033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_406]#}{The answer starts with something you probably don\rquote t think about: Python performs only single dispatching. That is, if you are performing an operation on more than one object whose type is unknown, Python can invoke the dynamic bin}
{d}{ing mechanism on only one of those types. This doesn\rquote t solve the problem, so you end up detecting some types manually and effectively producing your own dynamic binding behavior. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_324" \\o "A_324" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300320034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_407]#}{The solution is called }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {multiple dispatching}}}
{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {dispatching\: multiple dispatching}}}{\i multiple dispatching}{
. Remember that polymorphism can occur only via member function calls, so if you want double dispatching to occur, there must be two member function c
alls: the first to determine the first unknown type, and the second to determine the second unknown type. With multiple dispatching, you must have a polymorphic method call to determine each of the types. Generally, you\rquote ll set up a config}{u}{
ration such that a single member function call produces more than one dynamic member function call and thus determines more than one type in the process. To get this effect, you need to work with more than one polymorphic method call: you\rquote 
ll need one call for each dispatch. The methods in the following example are called }{\b compete(\~) }{and }{\b eval(\~)}{, and are both members of the same type. (In this case there will be only two dispatches, which is referred to as }{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {double dispatching}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {dispatching\: double dispatching}}}{\i double dispatching}{
). If you are working with two different type hierarchies that are interacting, then you\rquote ll have to have a polymorphic method call in each hierarchy. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_325" \\o "A_325" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300320035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_408]#}{Here\rquote s an example of multiple dispatching:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c11:PaperScissorsRock.py
\par # Demonstration of multiple dispatching.
\par from __future__ import generators
\par import random
\par 
\par # An enumeration type:
\par class Outcome:
\par   def __init__(self, value, name): 
\par     self.value = value
\par     self.name = name
\par   def __str__(self): return self.name 
\par   def __eq__(self, other):
\par       return self.value == other.value
\par 
\par Outcome.WIN = Outcome(0, "win")
\par Outcome.LOSE = Outcome(1, "lose")
\par Outcome.DRAW = Outcome(2, "draw")
\par 
\par class Item(object):
\par   def __str__(self): 
\par     return self.__class__.__name__ 
\par 
\par class Paper(Item):
\par   def compete(self, item):
\par     # First dispatch: self was Paper
\par     return item.evalPaper(self)
\par   def evalPaper(self, item):
\par     # Item was Paper, we're in Paper
\par     return Outcome.DRAW
\par   def evalScissors(self, item):
\par     # Item was Scissors, we're in Paper
\par     return Outcome.WIN
\par   def evalRock(self, item):
\par     # Item was Rock, we're in Paper
\par     return Outcome.LOSE
\par 
\par class Scissors(Item):
\par   def compete(self, item): 
\par     # First dispatch: self was Scissors
\par     return item.evalScissors(self)
\par   def evalPaper(self, item):
\par     # Item was Paper, we're in Scissors
\par     return Outcome.LOSE
\par   def evalScissors(self, item):
\par     # Item was Scissors, we're in Scissors
\par     return Outcome.DRAW
\par   def evalRock(self, item):
\par     # Item was Rock, we're in Scissors
\par     return Outcome.WIN
\par 
\par class Rock(Item):
\par   def compete(self, item):
\par     # First dispatch: self was Rock
\par     return item.evalRock(self)
\par   def evalPaper(self, item):
\par     # Item was Paper, we're in Rock
\par     return Outcome.WIN
\par   def evalScissors(self, item):
\par     # Item was Scissors, we're in Rock
\par     return Outcome.LOSE
\par   def evalRock(self, item):
\par     # Item was Rock, we're in Rock
\par     return Outcome.DRAW
\par 
\par def match(item1, item2):
\par   print "%s <--> %s : %s" % (
\par     item1, item2, item1.compete(item2))
\par 
\par # Generate the items:
\par def itemPairGen(n):
\par   # Create a list of instances of all Items:
\par   Items = Item.__subclasses__()
\par   for i in range(n):
\par     yield (random.choice(Items)(), 
\par            random.choice(Items)())
\par 
\par for item1, item2 in itemPairGen(20):
\par   match(item1, item2)
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {
This was a fairly literal translation from the Java version, and one of the things you might notice is that the information about the various combinations is encoded into each type of }{\b Item}{
. It actually ends up being a kind of table, except that it is spread out through all the classes. This is not very easy to maintain if you ever expect to modify the behavior or to add a new }{\b Item}{ class. Instead, it can be more sensibl
e to make the table explicit, like this: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_326" \\o "A_326" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300320036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c11:PaperScissorsRock2.py
\par # Multiple dispatching using a table
\par from __future__ import generators
\par import random
\par 
\par class Outcome:
\par   def __init__(self, value, name): 
\par     self.value = value
\par     self.name = name
\par   def __str__(self): return self.name 
\par   def __eq__(self, other):
\par       return self.value == other.value
\par 
\par Outcome.WIN = Outcome(0, "win")
\par Outcome.LOSE = Outcome(1, "lose")
\par Outcome.DRAW = Outcome(2, "draw")
\par 
\par class Item(object):
\par   def compete(self, item):
\par     # Use a tuple for table lookup:
\par     return outcome[self.__class__, item.__class__]
\par   def __str__(self): 
\par     return self.__class__.__name__ 
\par 
\par class Paper(Item): pass
\par class Scissors(Item): pass
\par class Rock(Item): pass
\par 
\par outcome = \{
\par   (Paper, Rock): Outcome.WIN,
\par   (Paper, Scissors): Outcome.LOSE,
\par   (Paper, Paper): Outcome.DRAW,
\par   (Scissors, Paper): Outcome.WIN,
\par   (Scissors, Rock): Outcome.LOSE,
\par   (Scissors, Scissors): Outcome.DRAW,
\par   (Rock, Scissors): Outcome.WIN,
\par   (Rock, Paper): Outcome.LOSE,
\par   (Rock, Rock): Outcome.DRAW,
\par \}
\par 
\par def match(item1, item2):
\par   print "%s <--> %s : %s" % (
\par     item1, item2, item1.compete(item2))
\par 
\par # Generate the items:
\par def itemPairGen(n):
\par   # Create a list of instances of all Items:
\par   Items = Item.__subclasses__()
\par   for i in range(n):
\par     yield (random.choice(Items)(), 
\par            random.choice(Items)())
\par 
\par for item1, item2 in itemPairGen(20):
\par   match(item1, item2)
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {It\rquote s a tribute to the fl
exibility of dictionaries that a tuple can be used as a key just as easily as a single object. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_327" \\o "A_327" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300320037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_409]#
\par #[BT_410]#
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc462393597}
{\*\bkmkstart _Toc476705917}{\*\bkmkstart _Toc534420129}Visitor, a type of multiple dispatching{\*\bkmkend _Toc462393597}{\*\bkmkend _Toc476705917}{\*\bkmkend _Toc534420129}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_411]#}{
The assumption is that you have a primary class hierarchy that is fixed; perhaps it\rquote s from another vendor and you can\rquote t make changes to that hierarchy. However, you\rquote 
d like to add new polymorphic methods to that hierarchy, which means that normally you\rquote d have to add something to the base class interface. So the dilemma is that you need to add methods to the base class, but you can\rquote 
t touch the base class. How do you get around this? }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_328" \\o "A_328" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300320038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_412]#}{The design pattern that solves this kind of problem is called a \'93visitor\'94 (the final one in the }{\i Design Patterns}{ book), and it builds on the double}{\i  }{dispatching scheme shown in the last section. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_329" \\o "A_329" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300320039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_413]#}{The }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {visitor pattern}}}{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: visitor}}}{
visitor pattern allows you to extend the interface of the primary type by creating a separate class hierarchy of type }{\b Visitor }{to virtualize the operations performed upon the primary type. The objects of the primary type simply \'93accept\'94
 the visitor, then call the visitor\rquote s dynamically}{\b -}{bound member function. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_330" \\o "A_330" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300330030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#: c11:FlowerVisitors.py
\par # Demonstration of "visitor" pattern.
\par from __future__ import generators
\par import random
\par 
\par # The Flower hierarchy cannot be changed:
\par class Flower(object):  
\par   def accept(self, visitor):
\par     visitor.visit(self)
\par   def pollinate(self, pollinator):
\par     print self, "pollinated by", pollinator
\par   def eat(self, eater):
\par     print self, "eaten by", eater
\par   def __str__(self): 
\par     return self.__class__.__name__
\par 
\par class Gladiolus(Flower): pass
\par class Runuculus(Flower): pass
\par class Chrysanthemum(Flower): pass 
\par 
\par class Visitor:
\par   def __str__(self): 
\par     return self.__class__.__name__
\par 
\par class Bug(Visitor): pass
\par class Pollinator(Bug): pass
\par class Predator(Bug): pass
\par 
\par # Add the ability to do "Bee" activities:
\par class Bee(Pollinator):
\par   def visit(self, flower):
\par       flower.pollinate(self)
\par 
\par # Add the ability to do "Fly" activities:
\par class Fly(Pollinator):
\par   def visit(self, flower):
\par       flower.pollinate(self)
\par 
\par # Add the ability to do "Worm" activities:
\par class Worm(Predator):
\par   def visit(self, flower):
\par       flower.eat(self)
\par 
\par def flowerGen(n):
\par   flwrs = Flower.__subclasses__()
\par   for i in range(n):
\par     yield random.choice(flwrs)()
\par 
\par # It's almost as if I had a method to Perform
\par # various "Bug" operations on all Flowers:
\par bee = Bee()
\par fly = Fly()
\par worm = Worm()
\par for flower in flowerGen(10):
\par   flower.accept(bee)
\par   flower.accept(fly)
\par   flower.accept(worm)
\par #:~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 { }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_331" \\o "A_331" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300330031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_414]#
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420130}
Exercises{\*\bkmkend _Toc534420130}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls9\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {Create}{ a business-modeling environment with three types of }{\b Inhabitant}{: }{\b Dwarf}{ (for engineers), }{\b Elf}{ (for marketers) and }{\b Troll}{
 (for managers). Now create a class called }{\b Project}{ that creates the different inhabitants and causes them to }{\b interact(\~)}{ with each other using multiple dispatching. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_332" \\o "A_332" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300330032000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 2. \tab}}\pard \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin1080\itap0 {Modify}{
 the above example to make the interactions more detailed. Each }{\b Inhabitant}{ can randomly produce a }{\b Weapon}{ using }{\b getWeapon(\~)}{: a }{\b Dwarf}{ uses }{\b Jargon}{ or }{\b Play}{, an }{\b Elf}{ uses }{\b InventFeature}{ or }{\b 
SellImaginaryProduct}{, and a }{\b Troll}{ uses }{\b Edict}{ and }{\b Schedule}{. You must decide which weapons \'93win\'94 and \'93lose\'94 in each interaction (as in }{\b PaperScissorsRock.py}{). Add a }{\b battle(\~)}{ member function to }{\b Project}{
 that takes two }{\b Inhabitant}{s and matches them against each other. Now create a }{\b meeting(\~)}{ member function for }{\b Project}{ that creates groups of }{\b Dwarf}{, }{\b Elf}{ and }{\b Manager}{
 and battles the groups against each other until only members of one group are left standing. These are the \'93winners.\'94 }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_333" \\o "A_333" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300330033000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 3. \tab}}{Modify }{\b PaperScissorsRock.py}{ to replace the double dispatching with a table lookup}{. The easiest way to do this is to create a }{\b Map }{of }{\b Map}{
s, with the key of each }{\b Map }{the class of each object. Then you can do the lookup by saying:\line (}{\b (Map)map.get(o1.getClass())).get(o2.getClass())}{\line Notice how much easier it is to reconfigure the system. When is it more appropriate
 to use this approach vs. hard-coding the dynamic dispatches? Can you create a system that has the syntactic simplicity of use of the dynamic dispatch but uses a table lookup? }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_334" \\o "A_334" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300330034000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 4. \tab}Modify Exercise 2 to use the table lookup technique described in Exercise 3. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_335" \\o "A_335" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300330035000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_415]#
\par #[BT_416]#\sect }\sectd \binfsxn-121\binsxn-121\psz1\sbkodd\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0
\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705918}{\*\bkmkstart _Toc534420131}{\*\bkmkend _Toc375545413}
12: Pattern refactoring{\*\bkmkend _Toc476705918}{\*\bkmkend _Toc534420131}
\par }\pard\plain \s15\ql \li360\ri0\sa180\sl270\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cf6 This chapter has not had any significant translation yet. }
{\field\fldedit{\*\fldinst {\cf6  HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_336" \\o "A_336" }{\cf6 {\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300330036000000}}}{\fldrslt {\cs42\fs22\ul\cf2\kerning18 Add Comment}}}{\cf6 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_417]#}{
This chapter will look at the process of solving a problem by applying design patterns in an
 evolutionary fashion. That is, a first cut design will be used for the initial solution, and then this solution will be examined and various design patterns will be applied to the problem (some of which will work, and some of which won\rquote 
t). The key question that will always be asked in seeking improved solutions is \'93what will change?\'94 }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_337" \\o "A_337" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300330037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_418]#}{This process is similar to what Martin Fowler talks about in his book }{\i Refactoring: Improving the Design of Existing Code}{\cs45\i\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{ }{\v #[BT_F7]#}{Addison-Wesley, 1999.}}}{
 (although he tends to talk about pieces of code more than pattern-level designs). You start with a solution, and then when you discover that it doesn\rquote t continue to meet your needs, you fix it. Of 
course, this is a natural tendency but in computer programming it\rquote s been extremely difficult to accomplish with procedural programs, and the acceptance of the idea that we }{\i can}{
 refactor code and designs adds to the body of proof that object-oriented programming is \'93a good thing.\'94 }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_338" \\o "A_338" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300330038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705919}
{\*\bkmkstart _Toc534420132}Simulating the trash recycler{\*\bkmkend _Toc476705919}{\*\bkmkend _Toc534420132}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_419]#}{
The nature of this problem is that the trash is thrown unclassified into a si}{n}{gle bin, so the specific type information is lost. But later, the specific type i}{n}{
formation must be recovered to properly sort the trash. In the initial solution, RTTI (described in Chapter 12 of }{\i Thinking in Java, 2}{\i\super nd}{\i  edition}{) is used. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindvie
w.net/Books/TIPython/BackTalk/FindPage/A_339" \\o "A_339" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300330039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_420]#}{This is not a trivial design because it has an added constraint. That\rquote s what makes it interesting\emdash it\rquote s more like the messy problems you\rquote re likely to e}{n}{counter in your work. T
he extra constraint is that the trash arrives at the trash recycling plant all mixed together. The program must model the sorting of that trash. This is where RTTI comes in: you have a bunch of anonymous pieces of trash, and the program figures out exactl
y what type they are. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_340" \\o "A_340" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300340030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:recyclea:RecycleA.py 
\par # Recycling with RTTI.
\par 
\par class Trash:
\par   private double weight
\par   def __init__(self, double wt): weight = wt 
\par   abstract double getValue()
\par   double getWeight(): return weight 
\par   # Sums the value of Trash in a bin:
\par   static void sumValue(Iterator it):
\par     double val = 0.0f
\par     while(it.hasNext()):
\par       # One kind of RTTI:
\par       # A dynamically-checked cast
\par       Trash t = (Trash)it.next()
\par       # Polymorphism in action:
\par       val += t.getWeight() * t.getValue()
\par       print (
\par         "weight of " +
\par         # Using RTTI to get type
\par         # information about the class:
\par         t.getClass().getName() +
\par         " = " + t.getWeight())
\par 
\par     print "Total value = " + val
\par 
\par class Aluminum(Trash):
\par   static double val  = 1.67f
\par   def __init__(self, double wt): .__init__(wt) 
\par   double getValue(): return val 
\par   static void setValue(double newval):
\par     val = newval
\par 
\par class Paper(Trash):
\par   static double val = 0.10f
\par   def __init__(self, double wt): .__init__(wt) 
\par   double getValue(): return val 
\par   static void setValue(double newval):
\par     val = newval
\par 
\par class Glass(Trash):
\par   static double val = 0.23f
\par   def __init__(self, double wt): .__init__(wt) 
\par   double getValue(): return val 
\par   static void setValue(double newval):
\par     val = newval
\par 
\par class RecycleA(UnitTest):
\par   Collection 
\par     bin = ArrayList(),
\par     glassBin = ArrayList(),
\par     paperBin = ArrayList(),
\par     alBin = ArrayList()
\par   def __init__(self):
\par     # Fill up the Trash bin:
\par     for(int i = 0 i < 30 i++)
\par       switch((int)(Math.random() * 3)):
\par         case 0 :
\par           bin.add(new
\par             Aluminum(Math.random() * 100))
\par           break
\par         case 1 :
\par           bin.add(new
\par             Paper(Math.random() * 100))
\par           break
\par         case 2 :
\par           bin.add(new
\par             Glass(Math.random() * 100))
\par 
\par   def test(self):
\par     Iterator sorter = bin.iterator()
\par     # Sort the Trash:
\par     while(sorter.hasNext()):
\par       Object t = sorter.next()
\par       # RTTI to show class membership:
\par       if(t instanceof Aluminum)
\par         alBin.add(t)
\par       if(t instanceof Paper)
\par         paperBin.add(t)
\par       if(t instanceof Glass)
\par         glassBin.add(t)
\par 
\par     Trash.sumValue(alBin.iterator())
\par     Trash.sumValue(paperBin.iterator())
\par     Trash.sumValue(glassBin.iterator())
\par     Trash.sumValue(bin.iterator())
\par 
\par   def main(self, String args[]):
\par     RecycleA().test()
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_421]#
\par {\*\bkmkstart _Toc305593314}{\*\bkmkstart _Toc305628786}#[BT_422]#}{In the source code listings available for this book, this file will be placed in the subdirectory }{\b recyclea}{ that branches off from the subdirectory }{\b c12}{
 (for Chapter 12). The unpacking tool takes care of placing it into the correct subdirectory. The reason for doing this is that this chapter rewrites this particular example a number of times and by pu}{t}{
ting each version in its own directory (using the default package in each directory so that invoking the program is easy), the class names will not clash. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_
341" \\o "A_341" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300340031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_423]#}{Several }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Vector}}}{\b ArrayList}{
 objects are created to hold }{\b Trash}{ references. Of course, }{\b ArrayList}{s}{\b  }{actually hold }{\b Object}{s so they\rquote ll hold anything at all. The reason they hold }{\b Trash }{(or something derived from }{\b Trash}{) is only because you
\rquote ve been careful to not put in anything except }{\b Trash}{. If you do put something \'93wrong\'94 into the }{\b ArrayList}{, you won\rquote t get any compile-time warnings or errors\emdash you\rquote ll find out only via an exception at run time. 
}{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_342" \\o "A_342" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300340032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_424]#}{When the }{\b Trash}{ references are added, they lose their specific identities and b}{e}{come simply }{\b Object reference}{s (they are }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {upcasting}}}{\i upcast}{). However, because of polymo}{r}{phism }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {polymorphism}}}{the proper behavior still occurs when the dynamically-bound methods}{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {method\: polymorphic method calls}}}{ are called through the }{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Iterator}}}{\b Iterator}{ }{\b sorter}{, once the resulting }{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Object}}}{\b Object}{ has been cast back to }{\b Trash}{. }{\b sumValue(\~)}{
 also takes an }{\b Iterator }{to perform operations on every object in the }{\b ArrayList}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_343" \\o "A_343" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300340033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_425]#}{It looks silly to upcast the types of }{\b Trash}{
 into a container holding base type references, and then turn around and downcast. Why not just put the trash into the appropriate receptacle in the first place? (Indeed, this is the whole enigma of recycling). In this program it would be easy to repair, 
but som}{e}{times a system\rquote s structure and flexibility can benefit greatly from downcas}{t}{ing. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_344" \\o "A_344" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300340034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_426]#}{The program satisfies the design requirements: it works. This might be fine as long as it\rquote s a one-shot solution. However, a useful program tends to evolve over time, so you must ask, \'93What if the situation changes?\'94
 For example, cardboard is now a valuable recyclable commodity, so how will that be int}{e}{grated into the system (especially if the program is large and complicated). Since the above }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {type-check coding}}}{type-check coding in the }{\b switch}{
 statement could be scattered throughout the program, you must go find all that code every time a new type is added, and if you miss one the compiler won\rquote t give you any help by pointing out an error. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_345" \\o "A_345" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300340035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_427]#}{The key to the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {RTTI\: misuse of RTTI}}}{
misuse of RTTI here is that }{\i every type is tested}{. If you\rquote re looking for only a subset of types because that subset needs special treatment, that\rquote s probably fine. But if you\rquote 
re hunting for every type inside a switch statement, then you\rquote re probably missing an important point, and definitely making your code less maintainable. In the next section we\rquote ll look at how this pr}{o}{
gram evolved over several stages to become much more flexible. This should prove a valuable example in program design. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_346" \\o "A_346" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300340036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc375545414}
{\*\bkmkstart _Toc476705920}{\*\bkmkstart _Toc534420133}Improving the design{\*\bkmkend _Toc375545414}{\*\bkmkend _Toc476705920}{\*\bkmkend _Toc534420133}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_428]#}{The solutions in }{\i Design Patterns}{
 are organized around the question \'93What will change as this program evolves?\'94{\*\bkmkend _Toc305593314}{\*\bkmkend _Toc305628786} This is usually the most important que}{s}{tion t
hat you can ask about any design. If you can build your system around the answer, the results will be two-pronged: not only will your system allow easy (and inexpensive) maintenance, but you might also produce components that are reusable, so that other s
ystems can be built more cheaply. This is the promise of object-oriented programming, but it doesn\rquote t happen automatically; it requires thought and insight on your part. In this section we\rquote 
ll see how this process can happen during the refinement of a system. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_347" \\o "A_347" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300340037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_429]#}{The answer to the question \'93What will change?\'94 for the recycling system is a common one: more types will be added to the system. The goal of t
he design, then, is to make this addition of types as painless as possible. In the recycling program, we\rquote 
d like to encapsulate all places where specific type information is mentioned, so (if for no other reason) any changes can be localized to those encapsulations. It turns out that this process also cleans up the rest of the code considerably. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_348" \\o "A_348" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300340038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc375545415}
{\*\bkmkstart _Toc476705921}{\*\bkmkstart _Toc534420134}\'93Make more objects\'94{\*\bkmkend _Toc375545415}{\*\bkmkend _Toc476705921}{\*\bkmkend _Toc534420134}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_430]#}{This brings up a general object-
oriented design principle that I first heard spoken by }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {
Booch, Grady}}}{Grady Booch: \'93If the design is too complicated, make more o}{b}{jects.\'94 This is simultaneously counterintuitive and ludicrously simple, and yet it\rquote s the most useful guideline I\rquote ve found. (You might observe that \'93
making more objects\'94 is often equivalent to \'93add another level of indirection.\'94) In general, if you find a place with messy code, consider what sort of class would clean that up. Often the side effect of cleaning up the code wil
l be a system that has better structure and is more flexible. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_349" \\o "A_349" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300340039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_431]#}{Consider first the place where }{\b Trash}{ objects are created, which is a }{\b switch}{ statement inside }{\b main(\~)}{: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_350" \\
o "A_350" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300350030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {    for(int i = 0 i < 30 i++)
\par       switch((int)(Math.random() * 3)):
\par         case 0 :
\par           bin.add(new
\par             Aluminum(Math.random() * 100))
\par           break
\par         case 1 :
\par           bin.add(new
\par             Paper(Math.random() * 100))
\par           break
\par         case 2 :
\par           bin.add(new
\par             Glass(Math.random() * 100))
\par       
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_432]#
\par #[BT_433]#}{This is definitely messy, and also a place where you must change code whe}{n}{
ever a new type is added. If new types are commonly added, a better solution is a single method that takes all of the necessary information and produces a reference to an object of the correct type, already upcast to a trash object. In }{\i D}{\i e}{\i 
sign Patterns}{ this is broadly referred to as a }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {
creational design patterns}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: creational}}}{\i 
creational pattern}{ (of which there are several). The specific pattern that will be applied here is a variant of the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {factory method}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: factory method}}}{\i Factory Method}{. Here, the factory method is a }{\b static}{ member of }{\b Trash}{
, but more commonly it is a method that is overridden in the derived class. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_351" \\o "A_351" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300350031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_434]#}{The idea of the factory method is that you pass it the essential information it needs to know to create your object, then stand back and wait for the reference (already upcast 
to the base type) to pop out as the return value. From then on, you treat the object polymorphically. Thus, you never even need to know the exact type of object that\rquote 
s created. In fact, the factory method hides it from you to prevent accidental misuse. If you want to use the object without polymorphism, you must explicitly use RTTI and casting. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_352" \\o "A_352" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300350032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_435]#}{But there\rquote s a little problem, especially when you us
e the more complicated approach (not shown here) of making the factory method in the base class and overriding it in the derived classes. What if the information required in the derived class requires more or different arguments? \'93Creating more o}{b}{
jects\'94 solves this problem. To implement the factory method, the }{\b Trash}{ class gets a new method called }{\b factory}{. To hide the creational data, there\rquote s a new class called }{\b Messenger}{
 that carries all of the necessary information for the }{\b factory}{ method to create the appropriate }{\b Trash}{ object (we\rquote ve started referring to }{\i Messenger}{ as a design pattern, but it\rquote 
s simple enough that you may not choose to elevate it to that status). Here\rquote s a simple implement}{a}{tion of }{\b Messenger}{: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_353" \\o "A_353" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300350033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {class Messenger:
\par   int type
\par   # Must change this to add another type:
\par   static final int MAX_NUM = 4
\par   double data
\par   def __init__(self, int typeNum, double val):
\par     type = typeNum % MAX_NUM
\par     data = val
\par 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_436]#
\par #[BT_437]#}{A }{\b Messenger}{ object\rquote s only job is to hold information for the }{\b factory(\~)}{ method. Now, if there\rquote s a situation in which }{\b factory(\~)}{ needs more or different inform}{a}{tion to create a new type of }{\b Trash}{
 object, the }{\b factory(\~)}{ interface doesn\rquote t need to be changed. The }{\b Messenger}{ class can be changed by adding new data and new constructors, or in the more typical object-oriented fashion of subclassing. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_354" \\o "A_354" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300350034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_438]#}{The }{\b factory(\~)}{ method for this simple example looks like this:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {  static Trash factory(Messenger i):

\par     switch(i.type):
\par       default: # To quiet the compiler
\par       case 0:
\par         return Aluminum(i.data)
\par       case 1:
\par         return Paper(i.data)
\par       case 2:
\par         return Glass(i.data)
\par       # Two lines here:
\par       case 3: 
\par         return Cardboard(i.data)
\par 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_439]#
\par #[BT_440]#}{Here, the determination of the exact type of object is simple, but you can imagine a more complicated system in which }{\b factory(\~)}{ uses an elaborate alg}{o}{rithm. The point is that it\rquote 
s now hidden away in one place, and you know to come to this place when you add new types. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_355" \\o "A_355" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300350035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_441]#}{The creation of new objects is now much simpler in }{\b main(\~)}{:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {    for(int i = 0 i < 30 i++)
\par       bin.add(
\par         Trash.factory(
\par           Messenger(
\par             (int)(Math.random() * Messenger.MAX_NUM),
\par             Math.random() * 100)))
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_442]#
\par #[BT_443]#}{A }{\b Messenger}{ object is created to pass the data into }{\b factory(\~)}{, which in turn pr}{o}{duces some kind of }{\b Trash}{ object on the heap and returns the reference that\rquote s added to the }{\b ArrayList}{ }{\b bin}{
. Of course, if you change the quantity and type of argument, this statement will still need to be modified, but that can be elim}{i}{nated if the creation of the }{\b Messenger}{ object is automated. For example, an }{\b ArrayList}{
 of arguments can be passed into the constructor of a }{\b Messenger}{ object (or directly into a }{\b factory(\~)}{ call, for that matter). This requires that the arg}{u}{
ments be parsed and checked at run time, but it does provide the greatest flexibility. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_356" \\o "A_356" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300350036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_444]#}{You can see from this code what \'93}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {
vector of change}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {change\: vector of change}}}{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: vector of change}}}{vector of change\'94
 problem the factory is r}{e}{sponsible for solving: if you add new types to the system (the change), the only code that must be modified is within the factory, so the factory isolates the effect of that change. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_357" \\o "A_357" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300350037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc375545418}
{\*\bkmkstart _Toc476705922}{\*\bkmkstart _Toc534420135}A pattern for prototyping creation{\*\bkmkend _Toc375545418}{\*\bkmkend _Toc476705922}{\*\bkmkend _Toc534420135}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_445]#}{A p
roblem with the design above is that it still requires a central location where all the types of the objects must be known: inside the }{\b factory(\~)}{ method. If new types are regularly being added to the system, the }{\b factory(\~)}{
 method must be changed for each new type. When you discover something like this, it is useful to try to go one step further and move }{\i all}{ of the inform}{a}{tion about the type\emdash including its creation\emdash 
into the class representing that type. This way, the only thing you need to do to add a new type to the sy}{s}{tem is to inherit a single class. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_358" \\
o "A_358" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300350038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_446]#}{To move the information concerning type creation into each specific type of }{\b Trash}{,}{\b  }{the \'93}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {prototype}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: prototype}}}{prototype\'94 pattern (from the }{\i Design Patterns }{
book) will be used. The general idea is that you have a master sequence of objects, one of each type you\rquote re interested in making. The objects in this sequence are used }{\i only}{ for making new objects, using an o}{p}{eration that\rquote 
s not unlike the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {clone(\~)}}}{\b clone(\~)}{
 scheme built into Java\rquote s root class }{\b O}{\b b}{\b ject}{. In this case, we\rquote ll name the cloning method }{\b tClone(\~)}{.}{\b  }{When you\rquote re ready to make a new object, presumably you have 
some sort of information that establishes the type of object you want to create, then you move through the master sequence comparing your information with whatever appropriate information is in the prototype objects in the master sequence. When you find o
ne that matches your needs, you clone it. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_359" \\o "A_359" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300350039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_447]#}{In this scheme there is no hard-coded information for creation. Each object knows how to expose appropriate information and how to clone itself. Thus, the }{\b factory(\~)}{ method doesn\rquote 
t need to be changed when a new type is added to the system. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_360" \\o "A_360" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300360030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_448]#}{One approach to the problem of prototyping is to add a number of methods to support the creation of new objects. However, in Java 1.1 there\rquote s already support for creating new objects if you have a reference to the }{\b Class}{
 object. With }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Java 1.1\: reflection}}}{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {reflection\: Java 1.1 reflection}}}{Java 1.1 }{\i reflection}{
 (introduced in Chapter 12 of }{\i Thinking in Java, 2}{\i\super nd}{\i  edition}{) you can call a constructor even if you have only a reference to the }{\b Class}{ object. This is the perfect solution for the prototyping problem. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_361" \\o "A_361" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300360031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_449]#}{The list of prototypes will be represented indirectly by a list of references to all the }{\b Class}{ objects you want to create. In addition, if the prototyping fails, the }{\b factory(\~)}{ method will assume that it\rquote 
s because a particular }{\b Class}{ object wasn\rquote t in the list, and it will attempt to load it. By loading the prototypes d}{y}{namically like this, the }{\b Trash}{ class doesn\rquote t need to know what types it is working with, so it doesn
\rquote t need any modifications when you add new types. This allows it to be easily reused throughout the rest of the chapter. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_362" \\o "A_362" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300360032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trash:Trash.py
\par # Base class for Trash recycling examples.
\par 
\par class Trash:
\par   private double weight
\par   def __init__(self, double wt): weight = wt 
\par   def __init__(self):
\par   def getValue(self)
\par   def getWeight(self): return weight 
\par   # Sums the value of Trash given an
\par   # Iterator to any container of Trash:
\par   def sumValue(self, Iterator it):
\par     double val = 0.0f
\par     while(it.hasNext()):
\par       # One kind of RTTI:
\par       # A dynamically-checked cast
\par       Trash t = (Trash)it.next()
\par       val += t.getWeight() * t.getValue()
\par       print (
\par         "weight of " +
\par         # Using RTTI to get type
\par         # information about the class:
\par         t.getClass().getName() +
\par         " = " + t.getWeight())
\par 
\par     print "Total value = " + val
\par 
\par   # Remainder of class provides 
\par   # support for prototyping:
\par   private static List trashTypes = 
\par     ArrayList()
\par   def factory(self, Messenger info):
\par     for(int i = 0 i < len(trashTypes) i++):
\par       # Somehow determine the type
\par       # to create, and create one:
\par       Class tc = (Class)trashTypes.get(i)
\par       if (tc.getName().index(info.id) != -1):
\par         try:
\par           # Get the dynamic constructor method
\par           # that takes a double argument:
\par           Constructor ctor = tc.getConstructor(
\par               Class[]\{ double.class )
\par           # Call the constructor  
\par           # to create a object:
\par           return (Trash)ctor.newInstance(
\par             Object[]\{Double(info.data))
\par          catch(Exception ex):
\par           ex.printStackTrace(System.err)
\par           throw RuntimeException(
\par             "Cannot Create Trash")
\par         
\par       
\par 
\par     # Class was not in the list. Try to load it,
\par     # but it must be in your class path!
\par     try:
\par       print "Loading " + info.id
\par       trashTypes.add(Class.forName(info.id))
\par      catch(Exception e):
\par       e.printStackTrace(System.err)
\par       throw RuntimeException(
\par         "Prototype not found")
\par 
\par     # Loaded successfully. 
\par     # Recursive call should work:
\par     return factory(info)
\par 
\par   public static class Messenger:
\par     public String id
\par     public double data
\par     public Messenger(String name, double val):
\par       id = name
\par       data = val
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_450]#
\par #[BT_451]#}{The basic }{\b Trash}{ class and }{\b sumValue(\~)}{ remain as before. The rest of the class supports the prototyping pattern. You first see two }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {inner class}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {class\: inner class}}}{inner classes (which are made }{\b static}{
, so they are inner classes only for code organization purposes) d}{e}{scribing exceptions that can occur. This is followed by an }{\b ArrayList }{called }{\b trashTypes}{, which is used to hold the }{\b Class}{ references. }{\field\fldedit{\*\fldinst { H
YPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_363" \\o "A_363" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300360033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{\b 
\par }{\v #[BT_452]#}{In }{\b Trash.factory(\~)}{, the }{\b String}{ inside the }{\b Messenger }{object }{\b id }{(a different version of the }{\b Messenger}{ class than that of the prior discussion) contains the type name of the }{\b Trash }{
to be created; this }{\b String}{ is compared to the }{\b Class}{ names in the list. If there\rquote s a match, then that\rquote s the object to create. Of course, there are many ways to determine what object you want to make. This one is used so that 
information read in from a file can be turned into objects. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_364" \\o "A_364" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300360034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_453]#}{Once you\rquote ve discovered which kind of }{\b Trash}{ to create, then the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {reflection}}}{reflection methods come into play. The }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {getConstructor(\~), reflection}}}{\b getConstructor(\~)}{ method takes an argument that\rquote s an array of }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Class\: reflection}}}{\b Class}{
 references. This array represents the arguments, in their proper order, for the constructor that you\rquote re looking for. Here, the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {array\: dynamic creation}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {dynamic\: array creation}}}{array is dynamically created using the Java 1.1}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Java 1.1}}}{ array-creation syntax: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_365" \\o "A_365" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300360035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {Class[]:double.class
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_454]#
\par #[BT_455]#}{This code assumes that every }{\b Trash}{ type has a constructor that takes a }{\b do}{\b u}{\b ble }{(and notice that }{\b double.class}{ is distinct from }{\b Double.class}{). It\rquote s also poss}{i}{ble, for a more fle
xible solution, to call }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {getConstructors(\~)\: reflection}}}{\b 
getConstructors(\~)}{, which returns an array of the possible constructors. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_366" \\o "A_366" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300360036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_456]#}{What comes back from }{\b getConstructor(\~) }{is a reference to a }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Constructor\: for reflection}}}{\b Constructor}{ object (part of }{\b java.lang.reflect}{). You call the constructor dynamically with the method }{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {newInstance(\~), reflection}}}{\b newInstance(\~)}{, which takes an array of }{
\b Object}{ containing the a}{c}{tual arguments. This array is again created using the Java 1.1}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Java 1.1}}}{ syntax: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_367" \\o "A_367" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300360037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {Object[]\{Double(Messenger.data)
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_457]#
\par #[BT_458]#}{In this case, however, the }{\b double}{ must be placed inside a wrapper class so that it can be part of this array of objects. The process of calling }{\b newInstance(\~)}{ e}{x}{tracts the }{\b double}{, but you can see it is a bit confusing
\emdash an argument might be a }{\b double }{or a }{\b Double}{, but when you make the call you must always pass in a }{\b Double}{. Fortunately, this issue exists only for the primitive types. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_368" \\o "A_368" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300360038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_459]#}{Once you understand how to do it, the process of creating a new object given only a }{\b Class}{ reference is remarkably simple. Reflection also allows you to call methods in this same dynamic fashion. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_369" \\o "A_369" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300360039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_460]#}{Of course, the appropriate }{\b Class}{ reference might not be in the }{\b trashTypes}{ list. In this case, the }{\b return}{ in the inner loop is never executed and you\rquote ll drop out at the end. Here, the program tries to 
rectify the situation by loading the }{\b Class}{ object dynamically and adding it to the }{\b trashTypes}{ list. If it still can\rquote t be found something is really wrong, but if the load is successful then the }{\b fa}{\b c}{\b tory}{
 method is called }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {method\: recursive method calls}}}{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {recursive\: method calls}}}{recursively to try again. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_370" \\o "A_370" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300370030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_461]#}{As you\rquote ll see, the beauty of this design is that this code doesn\rquote t need to be changed, regardless of the different situations it will be used in (assuming that all }{\b Trash}{
 subclasses contain a constructor that takes a single }{\b double}{ arg}{u}{ment). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_371" \\o "A_371" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300370031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {\b {\*\bkmkstart _Toc534420136}Trash}{
 subclasses{\*\bkmkend _Toc534420136}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_462]#}{To fit into the prototyping scheme, the only thing that
\rquote s required of each new subclass of }{\b Trash}{ is that it contain a constructor that takes a }{\b double}{ arg}{u}{ment. Java reflection handles everything else. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.
mindview.net/Books/TIPython/BackTalk/FindPage/A_372" \\o "A_372" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300370032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_463]#}{Here are the different types of }{\b Trash}{, each in their own file but part of the }{\b Trash}{ package (again, to facilitate reuse within the chapter): }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mi
ndview.net/Books/TIPython/BackTalk/FindPage/A_373" \\o "A_373" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300370033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trash:Aluminum.py 
\par # The Aluminum class with prototyping.
\par 
\par class Aluminum(Trash):
\par   private static double val = 1.67f
\par   def __init__(self, double wt): .__init__(wt) 
\par   def getValue(self): return val 
\par   def setValue(self, double newVal):
\par     val = newVal
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_464]#
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trash:Paper.py 
\par # The Paper class with prototyping.
\par 
\par class Paper(Trash):
\par   private static double val = 0.10f
\par   def __init__(self, double wt): .__init__(wt) 
\par   def getValue(self): return val 
\par   def setValue(self, double newVal):
\par     val = newVal
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_465]#
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trash:Glass.py 
\par # The Glass class with prototyping.
\par 
\par class Glass(Trash):
\par   private static double val = 0.23f
\par   def __init__(self, double wt): .__init__(wt) 
\par   def getValue(self): return val 
\par   def setValue(self, double newVal):
\par     val = newVal
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_466]#
\par #[BT_467]#}{And here\rquote s a new type of }{\b Trash}{: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_374" \\o "A_374" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300370034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trash:Cardboard.py 
\par # The Cardboard class with prototyping.
\par 
\par class Cardboard(Trash):
\par   private static double val = 0.23f
\par   def __init__(self, double wt): .__init__(wt) 
\par   def getValue(self): return val 
\par   def setValue(self, double newVal):
\par     val = newVal
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_468]#
\par #[BT_469]#}{You can see that, other than the constructor, there\rquote s nothing special about any of these classes. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_375" \\o "A_375" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300370035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420137}Parsing }{\b 
Trash}{ from an external file{\*\bkmkend _Toc534420137}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_470]#}{The information about }{\b Trash}{
 objects will be read from an outside file. The file has all of the necessary information about each piece of trash on a single line in the form }{\b Trash:weight}{, such as: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.m
indview.net/Books/TIPython/BackTalk/FindPage/A_376" \\o "A_376" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300370036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trash:Trash.dat}{\cgrid0 
\par c12.trash.Glass:54
\par c12.trash.Paper:22
\par c12.trash.Paper:11
\par c12.trash.Glass:17
\par c12.trash.Aluminum:89
\par c12.trash.Paper:88
\par c12.trash.Aluminum:76
\par c12.trash.Cardboard:96
\par c12.trash.Aluminum:25
\par c12.trash.Aluminum:34
\par c12.trash.Glass:11
\par c12.trash.Glass:68
\par c12.trash.Glass:43
\par c12.trash.Aluminum:27
\par c12.trash.Cardboard:44
\par c12.trash.Aluminum:18
\par c12.trash.Paper:91
\par c12.trash.Glass:63
\par c12.trash.Glass:50
\par c12.trash.Glass:80
\par c12.trash.Aluminum:81
\par c12.trash.Cardboard:12
\par c12.trash.Glass:12
\par c12.trash.Glass:54
\par c12.trash.Aluminum:36
\par c12.trash.Aluminum:93
\par c12.trash.Glass:93
\par c12.trash.Paper:80
\par c12.trash.Glass:36
\par c12.trash.Glass:12
\par c12.trash.Glass:60
\par c12.trash.Paper:66
\par c12.trash.Aluminum:36
\par c12.trash.Cardboard:22
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v\cgrid0 #[BT_471]#
\par }{\v #[BT_472]#}{Note that the class path must be included when giving the class names, ot}{h}{erwise the class will not be found. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_377" \\o "A_377" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300370037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par This file is read using the previously-defined }{\b StringList }{tool, and each line is picked aparat using }{\v #[BT_473]#}{ the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {String\: indexOf(\~)}}}{\b String }{method }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {indexOf(\~)}}}{\b indexOf(\~)}{ to produce the index of the \lquote }{\b :}{\rquote . This is first used with the }{\b String }{method }{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {substring(\~)}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {String\:substring(\~)}}}{\b substring(\~) }{
to extract the name of the trash type, and next to get the weight that is turned into a }{\b double }{with the }{\b static }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {Double.valueOf(\~)}}}{\b Double.valueOf(\~) }{method. The }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {trim(\~)}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {String\:trim(\~)}}}{\b trim(\~)}{ method removes white space at both ends of a string. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_378" \\o "A_378" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300370038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_474]#}{The }{\b Trash }{parser is placed in a separate file since it will be reused throughout this chapter: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_379" \\o "A_379" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300370039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trash:ParseTrash.py 
\par # Parse file contents into Trash objects,
\par # placing each into a Fillable holder.
\par 
\par class ParseTrash:
\par   def fillBin(String filename, Fillable bin):
\par     for line in open(filename).readlines():
\par       String type = line.substring(0, 
\par         line.index(':')).strip()
\par       double weight = Double.valueOf(
\par         line.substring(line.index(':') + 1)
\par           .strip()).doubleValue()
\par       bin.addTrash(
\par         Trash.factory(
\par           Trash.Messenger(type, weight)))
\par 
\par   # Special case to handle Collection:
\par   def fillBin(String filename, Collection bin):
\par     fillBin(filename, FillableCollection(bin))
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_475]#
\par #[BT_476]#}{In }{\b RecycleA.py}{, an }{\b ArrayList}{ was used to hold the }{\b Trash}{ objects. However, other types of containers can be used as well. To allow for this, the first ve}{r}{sion of }{\b fillBin(\~)}{ takes a reference to a }{\b Fillable}{
, which is simply an }{\b interface}{ that supports a method called }{\b addTrash(\~)}{: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_380" \\o "A_380" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300380030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trash:Fillable.py 
\par # Any object that can be filled with Trash.
\par 
\par class Fillable:
\par   def addTrash(self, Trash t)
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_477]#
\par #[BT_478]#}{Anything that supports this interface can be used with }{\b fillBin}{. Of course, }{\b Collection}{ doesn\rquote t implement }{\b Fillable}{, so it won\rquote t work. Since }{\b Collection}{
 is used in most of the examples, it makes sense to add a second overloaded }{\b fillBin(\~)}{ method that takes a }{\b Collection}{. Any }{\b Collection}{ can then be used as a }{\b Fillable}{ o}{b}{ject using an adapter class: }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_381" \\o "A_381" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300380031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trash:FillableCollection.py 

\par # Adapter that makes a Collection Fillable.
\par 
\par class FillableCollection(Fillable):
\par   private Collection c
\par   def __init__(self, Collection cc): 
\par     c = cc 
\par 
\par   def addTrash(self, Trash t):
\par     c.add(t)
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_479]#
\par #[BT_480]#}{You can see that the only job of this class is to connect }{\b Fillable}{\rquote s }{\b addTrash(\~)}{ method to }{\b Collection\rquote s}{ }{\b add(\~)}{. With this class in hand, the overloaded }{\b fillBin(\~)}{ method can be used with a }{
\b Collection}{ in }{\b ParseTrash.py}{: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_382" \\o "A_382" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300380032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {  public static void 
\par   fillBin(String filename, Collection bin):
\par     fillBin(filename, FillableCollection(bin))
\par 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_481]#
\par #[BT_482]#}{This approach works for any container class that\rquote s used frequently. Altern}{a}{tively, the container class can provide its own adapter that implements }{\b Fill}{\b a}{\b ble}{. (You\rquote ll see this later, in }{\b DynaTrash.py}{.) }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_383" \\o "A_383" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300380033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420138}
Recycling with prototyping{\*\bkmkend _Toc534420138}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_483]#}{Now you can see the revised version of }{\b RecycleA.py}{
 using the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {prototype\: design pattern}}}{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: prototype}}}{prototyping technique: }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_384" \\o "A_384" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300380034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:recycleap:RecycleAP.py 
\par # Recycling with RTTI and Prototypes.
\par 
\par class RecycleAP(UnitTest):
\par   Collection
\par     bin = ArrayList(), 
\par     glassBin = ArrayList(),
\par     paperBin = ArrayList(),
\par     alBin = ArrayList()
\par   def __init__(self):
\par     # Fill up the Trash bin:
\par     ParseTrash.fillBin(
\par       "../trash/Trash.dat", bin)
\par 
\par   def test(self):
\par     Iterator sorter = bin.iterator()
\par     # Sort the Trash:
\par     while(sorter.hasNext()):
\par       Object t = sorter.next()
\par       # RTTI to show class membership:
\par       if(t instanceof Aluminum)
\par         alBin.add(t)
\par       if(t instanceof Paper)
\par         paperBin.add(t)
\par       if(t instanceof Glass)
\par         glassBin.add(t)
\par 
\par     Trash.sumValue(alBin.iterator())
\par     Trash.sumValue(paperBin.iterator())
\par     Trash.sumValue(glassBin.iterator())
\par     Trash.sumValue(bin.iterator())
\par 
\par   def main(self, String args[]):
\par     RecycleAP().test()
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_484]#
\par #[BT_485]#}{All of the }{\b Trash}{ objects, as well as the }{\b ParseTrash}{ and support classes, are now part of the package }{\b c12.}{\b trash}{, so they are simply imported. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_385" \\o "A_385" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300380035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_486]#}{The process of opening the data file containing }{\b Trash}{ descriptions and the parsing of that file have been wrapped into the }{\b static}{ method }{\b Pa}{\b r}{\b seTrash.fillBin(\~)}{, so now it\rquote 
s no longer a part of our design focus. You will see that throughout the rest of the chapter, no matter what new classes are added, }{\b ParseTrash.fillBin(\~)}{ will continue to work without change, which indicates a good design. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_386" \\o "A_386" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300380036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_487]#}{In terms of object creation, this design does indeed severely localize the changes you need to make to add a new type to the system. However, there\rquote 
s a significant problem in the use of RTTI that shows up clearly here. The program seems to run fine, and yet it never detects any cardboard, even though there is cardboard in the list! This happens }{\i because}{ of the use of RTTI, which looks for o
nly the types that you tell it to look for. The clue that }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {RTTI\:
 misuse of RTTI}}}{RTTI is being misused is that }{\i every type in the system }{is being tested, rather than a single type or subset of types. As you will see later, there are ways to use polymorphism instead when you\rquote 
re testing for every type. But if you use RTTI a lot in this fashion, and you add a new type to your system, you can easily forget to make the necessary changes in your program and produce a difficult-to-find bug. So it\rquote s worth tryi
ng to eliminate RTTI in this case, not just for aesthetic reasons\emdash it produces more maintainable code. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_387" \\o "A_387" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300380037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc375545416}
{\*\bkmkstart _Toc476705923}{\*\bkmkstart _Toc534420139}Abstracting usage{\*\bkmkend _Toc375545416}{\*\bkmkend _Toc476705923}{\*\bkmkend _Toc534420139}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_488]#}{With creation out of the way, it\rquote 
s time to tackle the remainder of the design: where the classes are used. Since it\rquote s the act of sorting into bins that\rquote s pa}{r}{ticularly ugly and exposed, why not take that process and hide it inside a class? This is the principle of \'93
If you must do something ugly, at least localize the ugliness inside a class.\'94 It looks like this: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_388" \\o "A_388" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300380038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard \qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_489]#}{{\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}
{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pibName}{\sv TrashSorter1}}{\sp{\sn pibFlags}{\sv 2}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw9786\pich2792\picwgoal5548\pichgoal1583\wmetafile8\bliptag1076528678\blipupi-445{\*\blipuid 402a862693157059cc087e78e7a91041}
010009000003810c000006005208000000005208000026060f009a10574d46430100000000000100fc6e00000000010000007810000000000000781000000100
0000780000002400000024000000fa230000c90a0000000000000000000039260000e70a000020454d46000001007810000096000000030000000f0000005800
000000000000b04f000020670000d80000001701000056004900530049004f000000440072006100770069006e00670000000000004b0a000000100000000000
00000000000009000000100000001e2400004e0a00000d000000100000000000000000000000190000000c00000004ae2201260000001c000000010000000000
0000180000000000000000000000250000000c00000001000000250000000c000000000000805600000030000000240000005f020000b60d0000fe0800000500
00003000f208aa0df208aa0d6b0230006b023000f208250000000c00000008000080280000000c00000001000000250000000c000000050000800d0000001000
00000000000000000000260000001c0000000100000000000000180000000000000000000000250000000c00000001000000250000000c000000000000805600
0000300000002400000024000000b60d0000d7020000050000003000cb02aa0dcb02aa0d3000300030003000cb02250000000c00000008000080280000000c00
000001000000120000000c00000001000000160000000c00000018000000250000000c00000005000080520000004c01000001000000b3feffffa90000000000
000000000000900100000000000000000022560065007200640061006e0061000000000043757374437573746f6d207061676520300000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000009042000090420000904200000000000000000000000000004375
73746f6d207061676520310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090420000
9042000090420000000000000000010000000000437573746f6d2070616765203200000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101016520250000000c0000000100
0000540000009000000012030000e1010000c70a000075030000010000008887873f8887873f12030000e10100000b0000004c00000000000000000000000000
00000000000000000000640000005400720061007300680053006f0072007400650072001803cd0000008e000000c8000000ad000000d3000000e4000000ca00
00008e00000083000000c60000008e000000120000000c000000020000000d000000100000000000000000000000260000001c00000002000000000000001800
00000000000000000000250000000c00000002000000250000000c0000000000008056000000300000003c15000047010000fa230000fa030000050000004815
ee03ee23ee03ee235301481553014815ee03250000000c00000008000080280000000c00000002000000120000000c00000001000000250000000c0000000500
0080250000000c0000000100000054000000b80000002a160000050300000a23000099040000010000008887873f8887873f2a16000005030000120000004c00
000000000000000000000000000000000000000000007000000041006c0075006d0069006e0075006d002000410072007200610079004c00690073007400e400
00005b000000d3000000440100005b000000d3000000d30000004401000075000000e40000008e0000008e000000c8000000c5000000b90000005b000000ad00
000083000000120000000c000000020000000d000000100000000000000000000000260000001c00000002000000000000001800000000000000000000002500
00000c00000002000000250000000c0000000000008056000000300000003c1500005f040000fa230000120700000500000048150607ee230607ee236b044815
6b0448150607250000000c00000008000080280000000c00000002000000120000000c00000001000000250000000c00000005000080250000000c0000000100
000054000000a80000009e1700001d06000097210000b1070000010000008887873f8887873f9e1700001d0600000f0000004c00000000000000000000000000
000000000000000000006c000000500061007000650072002000410072007200610079004c006900730074000000c9000000c8000000cf000000c60000008e00
000075000000e40000008e0000008e000000c8000000c5000000b90000005b000000ad00000083000000120000000c000000020000000d000000100000000000
000000000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c00000000000080560000003000
00003c15000077070000fa2300002a0a00000500000048151e0aee231e0aee2383074815830748151e0a250000000c00000008000080280000000c0000000200
0000120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000a8000000b8170000350900007c210000c90a00000100
00008887873f8887873fb8170000350900000f0000004c00000000000000000000000000000000000000000000006c00000047006c0061007300730020004100
72007200610079004c006900730074000000020100005b000000c8000000ad000000ad00000075000000e40000008e0000008e000000c8000000c5000000b900
00005b000000ad00000083000000120000000c000000020000000d000000100000000000000000000000260000001c0000000200000000000000180000000000
000000000000250000000c00000002000000250000000c00000000000080560000003000000050010000a0030000c80a00001d080000050000005c011108bc0a
1108bc0aac035c01ac035c011108250000000c00000008000080280000000c00000002000000120000000c00000001000000250000000c000000050000802500
00000c0000000100000054000000940000004a0200007a050000ce0900000e070000010000008887873f8887873f4a0200007a0500000c0000004c0000000000
00000000000000000000000000000000000064000000410072007200610079004c0069007300740020006f006600e40000008e0000008e000000c8000000c500
0000b90000005b000000ad0000008300000075000000ca000000750000005400000088000000a10200000a070000770900009e080000010000008887873f8887
873fa10200000a0700000a0000004c000000000000000000000000000000000000000000000060000000540072006100730068002000420069006e007300cd00
00008e000000c8000000ad000000d300000075000000e40000005b000000d3000000ad000000120000000c000000020000000d00000010000000000000000000
0000120000000c00000001000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c0000000500
00805700000024000000b00a00005b0400003a1100007304000002000000bc0a67042e116704250000000c00000008000080280000000c000000020000001200
00000c000000020000000d000000100000000000000000000000250000000c00000008000080250000000c0000000400008056000000980000006b0a00001704
00000d0b0000b80400001f0000000d0b67040b0b5604060b4604fe0a3804f20a2b04e50a2104d50a1a04c40a1704b40a1704a30a1a04940a2104860a2b047a0a
3804720a46046d0a56046b0a67046d0a7804720a88047a0a9704860aa304940aad04a30ab404b40ab804c40ab804d50ab404e50aad04f20aa304fe0a9704060b
88040b0b78040d0b6704250000000c000000050000800d000000100000000000000000000000120000000c00000001000000260000001c000000020000000000
0000180000000000000000000000250000000c00000002000000250000000c000000050000805700000024000000b00a0000ad0500002b140000c50500000200
0000bc0ab9051f14b905250000000c00000008000080280000000c00000002000000120000000c000000020000000d0000001000000000000000000000002500
00000c00000008000080250000000c0000000400008056000000980000006b0a0000680500000d0b0000090600001f0000000d0bb9050b0ba805060b9805fe0a
8905f20a7c05e50a7305d50a6c05c40a6805b40a6805a30a6c05940a7305860a7c057a0a8905720a98056d0aa8056b0ab9056d0aca05720ada057a0ae805860a
f505940aff05a30a0606b40a0906c40a0906d50a0606e50aff05f20af505fe0ae805060bda050b0bca050d0bb905250000000c000000050000800d0000001000
00000000000000000000250000000c00000008000080250000000c00000004000080560000002c000000041400004d0500004815000025060000040000000414
4d054815b9050414250604144d05250000000c000000050000800d000000100000000000000000000000120000000c00000001000000260000001c0000000200
000000000000180000000000000000000000250000000c00000002000000250000000c000000050000805700000024000000b00a0000fe0600003a1100001607
000002000000bc0a0a072e110a07250000000c00000008000080280000000c00000002000000120000000c000000020000000d00000010000000000000000000
0000250000000c00000008000080250000000c0000000400008056000000980000006b0a0000ba0600000d0b00005b0700001f0000000d0b0a070b0bf906060b
e906fe0adb06f20ace06e50ac406d50abd06c40aba06b40aba06a30abd06940ac406860ace067a0adb06720ae9066d0af9066b0a0a076d0a1b07720a2b077a0a
3a07860a4607940a5007a30a5707b40a5b07c40a5b07d50a5707e50a5007f20a4607fe0a3a07060b2b070b0b1b070d0b0a07250000000c000000050000800d00
0000100000000000000000000000120000000c00000001000000260000001c0000000200000000000000180000000000000000000000250000000c0000000200
0000250000000c000000050000805700000024000000221100000b0300004314000073040000020000002e11670437141703250000000c000000080000802800
00000c00000002000000120000000c000000020000000d000000100000000000000000000000250000000c00000008000080250000000c000000040000805600
00002c000000f4130000a1020000481500008403000004000000f413be024815a1024a148403f413be02250000000c000000050000800d000000100000000000
000000000000120000000c00000001000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c00
000005000080570000002400000022110000fe0600004314000067080000020000002e110a0737145b08250000000c00000008000080280000000c0000000200
0000120000000c000000020000000d000000100000000000000000000000250000000c00000008000080250000000c00000004000080560000002c000000f413
0000ed07000048150000d1080000040000004a14ed074815d108f413b3084a14ed070e0000001400000000000000100000001400000004000000030108000500
00000b0200000000050000000c02510a192405000000010204ae220108000000fa0200001800000000000000040000002d01000007000000fc020000ffffff00
0000040000002d0101000e000000240305003000f208aa0df208aa0d6b0230006b023000f20808000000fa02050000000000ffffff00040000002d0102000400
0000f001000007000000fc020100000000000000040000002d01000008000000fa0200001800000000000000040000002d010300040000002d0101000e000000
240305003000cb02aa0dcb02aa0d3000300030003000cb02040000002d01020004000000f00103000400000002010100040000002e011800040000002d010000
1c000000fb024d01a900000000009001000000000000002256657264616e6100003f3f3f3f3f3f3f3f300000000000000000000000000000040000002d010300
18000000320ae10112030b0000005472617368536f7274657200cd008e00c800ad00d300e400ca008e008300c6008e00040000000201020008000000fa020000
1800000000000000040000002d010400040000002d0101000e000000240305004815ee03ee23ee03ee235301481553014815ee03040000002d01020004000000
f00104000400000002010100040000002d010000040000002d01030022000000320a05032a1612000000416c756d696e756d2041727261794c697374e4005b00
d30044015b00d300d30044017500e4008e008e00c800c500b9005b00ad008300040000000201020008000000fa0200001800000000000000040000002d010400
040000002d0101000e0000002403050048150607ee230607ee236b0448156b0448150607040000002d01020004000000f0010400040000000201010004000000
2d010000040000002d0103001e000000320a1d069e170f00000050617065722041727261794c69737400c900c800cf00c6008e007500e4008e008e00c800c500
b9005b00ad008300040000000201020008000000fa0200001800000000000000040000002d010400040000002d0101000e0000002403050048151e0aee231e0a
ee2383074815830748151e0a040000002d01020004000000f00104000400000002010100040000002d010000040000002d0103001e000000320a3509b8170f00
0000476c6173732041727261794c6973740002015b00c800ad00ad007500e4008e008e00c800c500b9005b00ad008300040000000201020008000000fa020000
1800000000000000040000002d010400040000002d0101000e000000240305005c011108bc0a1108bc0aac035c01ac035c011108040000002d01020004000000
f00104000400000002010100040000002d010000040000002d01030019000000320a7a054a020c00000041727261794c697374206f66e4008e008e00c800c500
b9005b00ad0083007500ca00750016000000320a0a07a1020a00000054726173682042696e73cd008e00c800ad00d3007500e4005b00d300ad00040000000201
0200040000000201010008000000fa0200001800000000000000040000002d010400040000002d0100000800000025030200bc0a67042e116704040000002d01
020004000000f00104000400000002010200040000002d01020007000000fc020000000000000000040000002d0104004200000024031f000d0b67040b0b5604
060b4604fe0a3804f20a2b04e50a2104d50a1a04c40a1704b40a1704a30a1a04940a2104860a2b047a0a3804720a46046d0a56046b0a67046d0a7804720a8804
7a0a9704860aa304940aad04a30ab404b40ab804c40ab804d50ab404e50aad04f20aa304fe0a9704060b88040b0b78040d0b6704040000002d01000004000000
0201010008000000fa0200001800000000000000040000002d010500040000002d0100000800000025030200bc0ab9051f14b905040000002d01020004000000
f00105000400000002010200040000002d010200040000002d0104004200000024031f000d0bb9050b0ba805060b9805fe0a8905f20a7c05e50a7305d50a6c05
c40a6805b40a6805a30a6c05940a7305860a7c057a0a8905720a98056d0aa8056b0ab9056d0aca05720ada057a0ae805860af505940aff05a30a0606b40a0906
c40a0906d50a0606e50aff05f20af505fe0ae805060bda050b0bca050d0bb905040000002d010000040000002d010200040000002d0104000c00000024030400
04144d054815b9050414250604144d05040000002d010000040000000201010008000000fa0200001800000000000000040000002d010500040000002d010000
0800000025030200bc0a0a072e110a07040000002d01020004000000f00105000400000002010200040000002d010200040000002d0104004200000024031f00
0d0b0a070b0bf906060be906fe0adb06f20ace06e50ac406d50abd06c40aba06b40aba06a30abd06940ac406860ace067a0adb06720ae9066d0af9066b0a0a07
6d0a1b07720a2b077a0a3a07860a4607940a5007a30a5707b40a5b07c40a5b07d50a5707e50a5007f20a4607fe0a3a07060b2b070b0b1b070d0b0a0704000000
2d010000040000000201010008000000fa0200001800000000000000040000002d010500040000002d01000008000000250302002e1167043714170304000000
2d01020004000000f00105000400000002010200040000002d010200040000002d0104000c00000024030400f413be024815a1024a148403f413be0204000000
2d010000040000000201010008000000fa0200001800000000000000040000002d010500040000002d01000008000000250302002e110a0737145b0804000000
2d01020004000000f00105000400000002010200040000002d010200040000002d0104000c000000240304004a14ed074815d108f413b3084a14ed07030000000000}}{
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_490]#}{The }{\b TrashSorter}{ object initialization must now be changed whenever a new type of }{\b Trash}{
 is added to the model. You could imagine that the }{\b TrashSorter}{ class might look something like this: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_389" \\o "A_389" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300380039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {class TrashSorter(ArrayList):
\par   def sort(self, Trash t): /* ... */ 
\par 
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_491]#
\par #[BT_492]#}{That is, }{\b TrashSorter}{ is an }{\b ArrayList}{ of references to }{\b ArrayList}{s of }{\b Trash}{ references, and with }{\b add(\~)}{ you can install another one, like so: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/B
ooks/TIPython/BackTalk/FindPage/A_390" \\o "A_390" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300390030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {TrashSorter ts = TrashSorter()
\par ts.add(ArrayList())
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_493]#
\par #[BT_494]#}{Now, however, }{\b sort(\~)}{ becomes a problem. How does the stat}{i}{cally-coded method deal with the fact that a new type has been added? To solve this, the type information must be removed from }{\b sort(\~)}{
 so that all it needs to do is call a generic method that takes care of the details of type. This, of course, is another way to describe a dynamically-bound method. So }{\b sort(\~)}{ will s
imply move through the sequence and call a dynamically-bound method for each }{\b ArrayList}{. Since the job of this method is to grab the pieces of trash it is interested in, it\rquote s called }{\b grab(Trash)}{. The structure now looks like: }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_391" \\o "A_391" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300390031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard \qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_495]#}{{\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}
{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pibName}{\sv TrashSorter2}}{\sp{\sn pibFlags}{\sv 2}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw10739\pich5579\picwgoal6088\pichgoal3163\wmetafile8\bliptag-1246564290\blipupi206{\*\blipuid b5b2f03e9ff65305abe9acbfc23e78ed}
010009000003c90f000006008c0a000000008c0a000026060f000e15574d464301000000000001006c5e0000000001000000ec14000000000000ec1400000100
00007800000024000000240000007e270000071500000000000000000000f1290000ca15000020454d4600000100ec140000ba000000030000000f0000005800
000000000000b04f000020670000d80000001701000056004900530049004f000000440072006100770069006e00670000000000004b0a000000100000000000
0000000000000900000010000000a2270000971400000d000000100000000000000000000000190000000c00000004ae2201260000001c000000010000000000
0000180000000000000000000000250000000c00000001000000250000000c000000000000805600000030000000fe160000240000007e270000630600000500
00000a17570672275706722730000a1730000a175706250000000c00000008000080280000000c00000001000000120000000c00000001000000160000000c00
000018000000250000000c00000005000080520000004c01000001000000b3feffffa90000000000000000000000900100000000000000000022560065007200
640061006e0061000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000043757374437573746f6d207061676520300000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000009042000090420000904200000000000000000000000000000000
000000000000000000000000000000000000010101010101010101010000250000000c0000000100000054000000c00000009218000063050000ea250000f706
0000010000008887873f8887873f9218000063050000130000004c00000000000000000000000000000000000000000000007400000062006f006f006c006500
61006e002000670072006100620028005400720061007300680029000000cf000000ca000000ca0000005b000000c6000000c8000000d300000075000000cf00
00008e000000c8000000cf00000097000000cd0000008e000000c8000000ad000000d300000097000000120000000c000000020000000d000000100000000000
000000000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c00000000000080560000003000
0000df1700000d0100009d260000c003000005000000eb17b4039126b40391261901eb171901eb17b403250000000c00000008000080280000000c0000000200
0000120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000b8000000cd180000cb020000ad2500005f0400000100
00008887873f8887873fcd180000cb020000120000004c00000000000000000000000000000000000000000000007000000041006c0075006d0069006e007500
6d002000410072007200610079004c00690073007400e40000005b000000d3000000440100005b000000d3000000d30000004401000075000000e40000008e00
00008e000000c8000000c5000000b90000005b000000ad00000083000000120000000c000000020000000d000000100000000000000000000000260000001c00
00000200000000000000180000000000000000000000250000000c00000002000000250000000c000000000000805600000030000000fe1600002c0700007e27
00006b0d0000050000000a175f0d72275f0d722738070a1738070a175f0d250000000c00000008000080280000000c00000002000000120000000c0000000100
0000250000000c00000005000080250000000c0000000100000054000000c0000000921800006b0c0000ea250000ff0d0000010000008887873f8887873f9218
00006b0c0000130000004c00000000000000000000000000000000000000000000007400000062006f006f006c00650061006e00200067007200610062002800
5400720061007300680029000000cf000000ca000000ca0000005b000000c6000000c8000000d300000075000000cf0000008e000000c8000000cf0000009700
0000cd0000008e000000c8000000ad000000d300000097000000120000000c000000020000000d000000100000000000000000000000260000001c0000000200
000000000000180000000000000000000000250000000c00000002000000250000000c000000000000805600000030000000df170000150800009d260000c80a
000005000000eb17bc0a9126bc0a91262108eb172108eb17bc0a250000000c00000008000080280000000c00000002000000120000000c000000010000002500
00000c00000005000080250000000c0000000100000054000000a8000000411a0000d30900003a240000670b0000010000008887873f8887873f411a0000d309
00000f0000004c00000000000000000000000000000000000000000000006c000000500061007000650072002000410072007200610079004c00690073007400
0000c9000000c8000000cf000000c60000008e00000075000000e40000008e0000008e000000c8000000c5000000b90000005b000000ad000000830000001200
00000c000000020000000d000000100000000000000000000000260000001c0000000200000000000000180000000000000000000000250000000c0000000200
0000250000000c000000000000805600000030000000fe160000340e00007e27000073140000050000000a176714722767147227400e0a17400e0a1767142500
00000c00000008000080280000000c00000002000000120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000c000
00009218000073130000ea25000007150000010000008887873f8887873f9218000073130000130000004c000000000000000000000000000000000000000000
00007400000062006f006f006c00650061006e002000670072006100620028005400720061007300680029000000cf000000ca000000ca0000005b000000c600
0000c8000000d300000075000000cf0000008e000000c8000000cf00000097000000cd0000008e000000c8000000ad000000d300000097000000120000000c00
0000020000000d000000100000000000000000000000260000001c0000000200000000000000180000000000000000000000250000000c000000020000002500
00000c000000000000805600000030000000df1700001d0f00009d260000d011000005000000eb17c4119126c4119126290feb17290feb17c411250000000c00
000008000080280000000c00000002000000120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000a80000005b1a
0000db1000001f2400006f120000010000008887873f8887873f5b1a0000db1000000f0000004c00000000000000000000000000000000000000000000006c00
000047006c006100730073002000410072007200610079004c006900730074000000020100005b000000c8000000ad000000ad00000075000000e40000008e00
00008e000000c8000000c5000000b90000005b000000ad00000083000000120000000c000000020000000d000000100000000000000000000000260000001c00
00000200000000000000180000000000000000000000250000000c00000002000000250000000c000000000000805600000030000000240000000f070000b60d
0000ae0d0000050000003000a20daa0da20daa0d1b0730001b073000a20d250000000c00000008000080280000000c00000002000000250000000c0000000500
00800d000000100000000000000000000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c00
000000000080560000003000000024000000d4040000b60d0000870700000500000030007b07aa0d7b07aa0de0043000e00430007b07250000000c0000000800
0080280000000c00000002000000120000000c00000001000000250000000c00000005000080250000000c000000010000005400000090000000120300009106
0000c70a000025080000010000008887873f8887873f12030000910600000b0000004c0000000000000000000000000000000000000000000000640000005400
720061007300680053006f0072007400650072000000cd0000008e000000c8000000ad000000d3000000e4000000ca0000008e00000083000000c60000008e00
0000120000000c000000020000000d000000100000000000000000000000260000001c0000000200000000000000180000000000000000000000250000000c00
000002000000250000000c0000000000008056000000300000005001000050080000c80a0000cd0c0000050000005c01c10cbc0ac10cbc0a5c085c015c085c01
c10c250000000c00000008000080280000000c00000002000000120000000c00000001000000250000000c00000005000080250000000c000000010000005400
0000940000004a0200002a0a0000ce090000be0b0000010000008887873f8887873f4a0200002a0a00000c0000004c0000000000000000000000000000000000
00000000000064000000410072007200610079004c0069007300740020006f006600e40000008e0000008e000000c8000000c5000000b90000005b000000ad00
00008300000075000000ca000000750000005400000088000000a1020000ba0b0000770900004e0d0000010000008887873f8887873fa1020000ba0b00000a00
00004c000000000000000000000000000000000000000000000060000000540072006100730068002000420069006e007300cd0000008e000000c8000000ad00
0000d300000075000000e40000005b000000d3000000ad000000120000000c000000020000000d000000100000000000000000000000120000000c0000000100
0000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c000000050000805700000024000000b00a
00000b0900003a1100002309000002000000bc0a17092e111709250000000c00000008000080280000000c00000002000000120000000c000000020000000d00
0000100000000000000000000000250000000c00000008000080250000000c0000000400008056000000980000006b0a0000c70800000d0b0000680900001f00
00000d0b17090b0b0609060bf608fe0ae808f20adb08e50ad108d50aca08c40ac708b40ac708a30aca08940ad108860adb087a0ae808720af6086d0a06096b0a
17096d0a2809720a38097a0a4709860a5309940a5d09a30a6409b40a6809c40a6809d50a6409e50a5d09f20a5309fe0a4709060b38090b0b28090d0b17092500
00000c000000050000800d000000100000000000000000000000120000000c00000001000000260000001c000000020000000000000018000000000000000000
0000250000000c00000002000000250000000c000000050000805700000024000000b00a00005d0a0000ed150000750a000002000000bc0a690ae115690a2500
00000c00000008000080280000000c00000002000000120000000c000000020000000d000000100000000000000000000000250000000c000000080000802500
00000c0000000400008056000000980000006b0a0000180a00000d0b0000b90a00001f0000000d0b690a0b0b580a060b480afe0a390af20a2c0ae50a230ad50a
1c0ac40a180ab40a180aa30a1c0a940a230a860a2c0a7a0a390a720a480a6d0a580a6b0a690a6d0a7a0a720a8a0a7a0a980a860aa50a940aaf0aa30ab60ab40a
b90ac40ab90ad50ab60ae50aaf0af20aa50afe0a980a060b8a0a0b0b7a0a0d0b690a250000000c000000050000800d0000001000000000000000000000002500
00000c00000008000080250000000c00000004000080560000002c000000c6150000fd0900000a170000d50a000004000000c615fd090a17690ac615d50ac615
fd09250000000c000000050000800d000000100000000000000000000000120000000c00000001000000260000001c0000000200000000000000180000000000
000000000000250000000c00000002000000250000000c000000050000805700000024000000b00a0000ae0b00003a110000c60b000002000000bc0aba0b2e11
ba0b250000000c00000008000080280000000c00000002000000120000000c000000020000000d000000100000000000000000000000250000000c0000000800
0080250000000c0000000400008056000000980000006b0a00006a0b00000d0b00000b0c00001f0000000d0bba0b0b0ba90b060b990bfe0a8b0bf20a7e0be50a
740bd50a6d0bc40a6a0bb40a6a0ba30a6d0b940a740b860a7e0b7a0a8b0b720a990b6d0aa90b6b0aba0b6d0acb0b720adb0b7a0aea0b860af60b940a000ca30a
070cb40a0b0cc40a0b0cd50a070ce50a000cf20af60bfe0aea0b060bdb0b0b0bcb0b0d0bba0b250000000c000000050000800d00000010000000000000000000
0000120000000c00000001000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c0000000500
0080570000002400000022110000090400004316000023090000020000002e11170937161504250000000c00000008000080280000000c000000020000001200
00000c000000020000000d000000100000000000000000000000250000000c00000008000080250000000c00000004000080560000002c000000d81500004403
00000a1700007504000004000000d815db030a17440370167504d815db03250000000c000000050000800d000000100000000000000000000000120000000c00
000001000000260000001c0000000200000000000000180000000000000000000000250000000c00000002000000250000000c00000005000080570000002400
000022110000ae0b00003f16000092100000020000002e11ba0b33168610250000000c00000008000080280000000c00000002000000120000000c0000000200
00000d000000100000000000000000000000250000000c00000008000080250000000c00000004000080560000002c000000d5150000261000000a1700005411
0000040000006a1626100a175411d515c2106a1626100e000000140000000000000010000000140000000400000003010800050000000b020000000005000000
0c029e149c2705000000010204ae220108000000fa0200001800000000000000040000002d01000007000000fc020000ffffff000000040000002d0101000e00
0000240305000a17570672275706722730000a1730000a17570608000000fa02050000000000ffffff00040000002d01020004000000f0010000040000000201
0100040000002e01180007000000fc020100000000000000040000002d0100001c000000fb024d01a900000000009001000000000000002256657264616e6100
000000000000000000000000000000000000000000000000040000002d01030024000000320a6305921813000000626f6f6c65616e2067726162285472617368
2900cf00ca00ca005b00c600c800d3007500cf008e00c800cf009700cd008e00c800ad00d3009700040000000201020008000000fa0200001800000000000000
040000002d010400040000002d0101000e00000024030500eb17b4039126b40391261901eb171901eb17b403040000002d01020004000000f001040004000000
02010100040000002d010000040000002d01030022000000320acb02cd1812000000416c756d696e756d2041727261794c697374e4005b00d30044015b00d300
d30044017500e4008e008e00c800c500b9005b00ad008300040000000201020008000000fa0200001800000000000000040000002d010400040000002d010100
0e000000240305000a175f0d72275f0d722738070a1738070a175f0d040000002d01020004000000f00104000400000002010100040000002d01000004000000
2d01030024000000320a6b0c921813000000626f6f6c65616e20677261622854726173682900cf00ca00ca005b00c600c800d3007500cf008e00c800cf009700
cd008e00c800ad00d3009700040000000201020008000000fa0200001800000000000000040000002d010400040000002d0101000e00000024030500eb17bc0a
9126bc0a91262108eb172108eb17bc0a040000002d01020004000000f00104000400000002010100040000002d010000040000002d0103001e000000320ad309
411a0f00000050617065722041727261794c69737400c900c800cf00c6008e007500e4008e008e00c800c500b9005b00ad008300040000000201020008000000
fa0200001800000000000000040000002d010400040000002d0101000e000000240305000a176714722767147227400e0a17400e0a176714040000002d010200
04000000f00104000400000002010100040000002d010000040000002d01030024000000320a7313921813000000626f6f6c65616e2067726162285472617368
2900cf00ca00ca005b00c600c800d3007500cf008e00c800cf009700cd008e00c800ad00d3009700040000000201020008000000fa0200001800000000000000
040000002d010400040000002d0101000e00000024030500eb17c4119126c4119126290feb17290feb17c411040000002d01020004000000f001040004000000
02010100040000002d010000040000002d0103001e000000320adb105b1a0f000000476c6173732041727261794c6973740002015b00c800ad00ad007500e400
8e008e00c800c500b9005b00ad008300040000000201020008000000fa0200001800000000000000040000002d010400040000002d0101000e00000024030500
3000a20daa0da20daa0d1b0730001b073000a20d040000002d01020004000000f0010400040000002d01000008000000fa020000180000000000000004000000
2d010400040000002d0101000e0000002403050030007b07aa0d7b07aa0de0043000e00430007b07040000002d01020004000000f00104000400000002010100
040000002d010000040000002d01030018000000320a910612030b0000005472617368536f7274657200cd008e00c800ad00d300e400ca008e008300c6008e00
040000000201020008000000fa0200001800000000000000040000002d010400040000002d0101000e000000240305005c01c10cbc0ac10cbc0a5c085c015c08
5c01c10c040000002d01020004000000f00104000400000002010100040000002d010000040000002d01030019000000320a2a0a4a020c00000041727261794c
697374206f66e4008e008e00c800c500b9005b00ad0083007500ca00750016000000320aba0ba1020a00000054726173682042696e73cd008e00c800ad00d300
7500e4005b00d300ad000400000002010200040000000201010008000000fa0200001800000000000000040000002d010400040000002d010000080000002503
0200bc0a17092e111709040000002d01020004000000f00104000400000002010200040000002d01020007000000fc020000000000000000040000002d010400
4200000024031f000d0b17090b0b0609060bf608fe0ae808f20adb08e50ad108d50aca08c40ac708b40ac708a30aca08940ad108860adb087a0ae808720af608
6d0a06096b0a17096d0a2809720a38097a0a4709860a5309940a5d09a30a6409b40a6809c40a6809d50a6409e50a5d09f20a5309fe0a4709060b38090b0b2809
0d0b1709040000002d010000040000000201010008000000fa0200001800000000000000040000002d010500040000002d0100000800000025030200bc0a690a
e115690a040000002d01020004000000f00105000400000002010200040000002d010200040000002d0104004200000024031f000d0b690a0b0b580a060b480a
fe0a390af20a2c0ae50a230ad50a1c0ac40a180ab40a180aa30a1c0a940a230a860a2c0a7a0a390a720a480a6d0a580a6b0a690a6d0a7a0a720a8a0a7a0a980a
860aa50a940aaf0aa30ab60ab40ab90ac40ab90ad50ab60ae50aaf0af20aa50afe0a980a060b8a0a0b0b7a0a0d0b690a040000002d010000040000002d010200
040000002d0104000c00000024030400c615fd090a17690ac615d50ac615fd09040000002d010000040000000201010008000000fa0200001800000000000000
040000002d010500040000002d0100000800000025030200bc0aba0b2e11ba0b040000002d01020004000000f00105000400000002010200040000002d010200
040000002d0104004200000024031f000d0bba0b0b0ba90b060b990bfe0a8b0bf20a7e0be50a740bd50a6d0bc40a6a0bb40a6a0ba30a6d0b940a740b860a7e0b
7a0a8b0b720a990b6d0aa90b6b0aba0b6d0acb0b720adb0b7a0aea0b860af60b940a000ca30a070cb40a0b0cc40a0b0cd50a070ce50a000cf20af60bfe0aea0b
060bdb0b0b0bcb0b0d0bba0b040000002d010000040000000201010008000000fa0200001800000000000000040000002d010500040000002d01000008000000
250302002e11170937161504040000002d01020004000000f00105000400000002010200040000002d010200040000002d0104000c00000024030400d815db03
0a17440370167504d815db03040000002d010000040000000201010008000000fa0200001800000000000000040000002d010500040000002d01000008000000
250302002e11ba0b33168610040000002d01020004000000f00105000400000002010200040000002d010200040000002d0104000c000000240304006a1626100a175411d515c2106a162610030000000000}}{
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\b\v #[BT_496]#}{\b TrashSorter}{ needs to call each }{\b grab(\~)}{ method and get a different result d}{e}{pending on what type of }{\b Trash}{
 the current }{\b ArrayList}{ is holding. That is, each }{\b ArrayList}{ must be aware of the type it holds. The classic approach to this pro}{b}{lem is to create a base \'93}{\b Trash}{ bin\'94
 class and inherit a new derived class for each different type you want to hold. If Java had a parameterized type mechanism that would probably be the m
ost straightforward approach. But rather than hand-coding all the classes that such a mechanism should be building for us, further observation can produce a better approach. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_392" \\o "A_392" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300390032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_497]#}{A basic OOP design principle is \'93Use data members for variation in state, use }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {polymorphism}}}{polymorphism for variation in behavior.\'94 Your first thought might be that the }{\b grab(\~)}{ method certainly behaves differently for an }{\b ArrayList}{
 that holds }{\b Paper}{ than for one that holds }{\b Glass}{. But what it does is strictly dependent on the type, and nothing else. This could be interpreted as a different state, and since Java has a class to represent type (}{\b Class}{
) this can be used to determine the type of }{\b Trash}{ a particular }{\b Tbin}{ will hold. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_393" \\o "A_393" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300390033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_498]#}{The constructor for this }{\b Tbin }{requires that you hand it the }{\b Class}{ of your choice. This tells the }{\b ArrayList}{ what type it is supposed to hold. Then the }{\b grab(\~)}{ method uses }{\b Class BinType}{
 and RTTI to see if the }{\b Trash}{ object you\rquote ve handed it matches the type it\rquote s supposed to grab. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_394" \\o "A_394" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300390034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_499]#}{Here is the new version of the program:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:recycleb:RecycleB.py
\par # Containers that grab objects of interest.
\par 
\par # A container that admits only the right type
\par # of Trash (established in the constructor):
\par class Tbin:
\par   private Collection list = ArrayList()
\par   private Class type
\par   def __init__(self, Class binType): type = binType 
\par   def grab(self, Trash t):
\par     # Comparing class types:
\par     if(t.getClass().equals(type)):
\par       list.add(t)
\par       return 1 # Object grabbed
\par 
\par     return 0 # Object not grabbed
\par 
\par   def iterator(self):
\par     return list.iterator()
\par 
\par class TbinList(ArrayList):
\par   def sort(self, Trash t):
\par     Iterator e = iterator() # Iterate over self
\par     while(e.hasNext())
\par       if(((Tbin)e.next()).grab(t)) return
\par     # Need a Tbin for this type:
\par     add(Tbin(t.getClass()))
\par     sort(t) # Recursive call
\par 
\par class RecycleB(UnitTest):
\par   Collection bin = ArrayList()
\par   TbinList trashBins = TbinList()
\par   def __init__(self):
\par     ParseTrash.fillBin("../trash/Trash.dat",bin)
\par 
\par   def test(self):
\par     Iterator it = bin.iterator()
\par     while(it.hasNext())
\par       trashBins.sort((Trash)it.next())
\par     Iterator e = trashBins.iterator()
\par     while(e.hasNext()):
\par       Tbin b = (Tbin)e.next()
\par       Trash.sumValue(b.iterator())
\par 
\par     Trash.sumValue(bin.iterator())
\par 
\par   def main(self, String args[]):
\par     RecycleB().test()
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\b\v #[BT_501]#}{\b Tbin}{ contains a }{\b Class}{ reference }{\b type}{
 which establishes in the constructor what what type it should grab. The }{\b grab()}{ method checks this type against the object you pass it. Note that in this design, }{\b grab()}{ only accepts }{\b Trash}{
 objects so you get compile-time type checking on the base type, but you could also just accept }{\b Object}{ and it would still work. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_395" \\o "A_395" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300390035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\b T}{\b\v T}{\b binList}{ holds a set of }{\b Tbin}{ references, so that }{\b sort(\~)}{ can ite}{r}{ate through the }{\b Tbin}{s when it\rquote s looking for a match for the }{\b Trash}{ object you\rquote ve handed it. If it doesn\rquote 
t find a match, it creates a new }{\b Tbin}{ for the type that hasn\rquote t been found, and makes a recursive call to itself \endash  the next time around, the new bin will be found. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_396" \\o "A_396" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300390036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\b\v #[BT_502]#}{Notice the genericity of this code: it doesn\rquote t change at all if new types are added. If the bulk of your code doesn\rquote t need changing when a new type is added (or some other change occurs) then you have an ea}{s}{
ily extensible system.}{\v #[BT_503]#}{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_397" \\o "A_397" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300390037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc375545417}
{\*\bkmkstart _Toc476705924}{\*\bkmkstart _Toc534420140}Multiple dispatching{\*\bkmkend _Toc476705924}{\*\bkmkend _Toc534420140}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_505]#}{
The above design is certainly satisfactory. Adding new types to the system consists of adding or modifying distinct classes without causing code changes to be propagated throughout the system. In addition, RTTI is not \'93misused\'94 as it was in }{\b 
RecycleA.py}{. However, it\rquote s possible to go one step further and take a purist viewpoint about }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {RTTI\: eliminating from your design}}}{RTTI and say that it should be eliminated alt}{o}{gether from the operation of sorting the trash into bins. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_398" \\o "A_398" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300390038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_506]#}{To accomplish this, you must first take the perspective that all type-dependent activities\emdash such as detecting the type of a piece of trash and pu}{t}{ting it into the appropriate bin\emdash 
should be controlled through polymorphism and dynamic binding. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_399" \\o "A_399" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003300390039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_507]#}{The previous examples first sorted by type, then acted on sequences of el}{e}{ments that were all of a particular type. But whenever you find yourself picking out particular types, stop and think. The whole idea of polymo}{r}{
phism (dynamically-bound method calls) is to handle type-specific inform}{a}{tion for you. So why are you hunting for types? }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_400" \\o "A_400" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400300030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_508]#}{The answer is something you probably don\rquote t think about: Python performs only single dispatching. That is, if you are performing an operation on more than one object whose type is unknown, Python will invoke the dynamic bin}{d}{
ing mechanism on only one of those types. This doesn\rquote t solve the problem, so you end up detecting some types manually and effectively producing your own dynamic binding behavior. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_401" \\o "A_401" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400300031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_509]#}{The solution is called }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {multiple dispatching}}}
{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {dispatching\: multiple dispatching}}}{\i multiple dispatching}{
, which means setting up a config}{u}{ration such that a single method call produces more than one dynamic method call and thus determines more than one type in the process. To get this effect, you need to work with more than one type hierarchy: you
\rquote ll need a type hierarchy for each dispatch. The following example works with two hierarchies: the existing }{\b Trash}{ family and a hierarchy of the types of trash bins that the trash will be placed into. This second hierarchy isn\rquote t a}{l}{
ways obvious and in this case it needed to be created in order to produce multiple dispatching (in this case there will be only two dispatches, which is referred to as }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {double dispatching}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {dispatching\: double dispatching}}}{\i double dispatching}{). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_402" \\o "A_402" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400300032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705925}
{\*\bkmkstart _Toc534420141}Implementing the double dispatch{\*\bkmkend _Toc476705925}{\*\bkmkend _Toc534420141}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_510]#}{
Remember that polymorphism can occur only via method calls, so if you want double d
ispatching to occur, there must be two method calls: one used to determine the type within each hierarchy. In the Trash hierarchy there will be a new method called addToBin(\~
), which takes an argument of an array of TypedBin. It uses this array to step through and try to add itself to the appropriate bin, and this is where you'll see the double dispatch. }{
{\pict{\*\picprop\shplid1033{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pibName}{\sv DoubleDispatch}}{\sp{\sn pibFlags}{\sv 2}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}
\picscalex75\picscaley75\piccropl0\piccropr0\piccropt0\piccropb0\picw17565\pich10897\picwgoal9958\pichgoal6178\wmetafile8\bliptag-95147921\blipupi-115{\*\blipuid fa54286fbaeba52f5a293b3b7c70b12d}
010009000003df1e000006001610000000001610000026060f002220574d4643010000000000010069ae000000000200000000200000cc090000cc2900000100
0000780000003000000030000000a44000000828000000000000000000009c440000902a000020454d4600000100cc2900008f010000040000000f0000005800
000000000000b04f000020670000d80000001701000056004900530049004f000000440072006100770069006e00670000000000004b0a000000100000000000
0000000000000900000010000000d4400000382800000d000000100000000000000000000000190000000c0000000cbb1c01250000000c000000080000802500
00000c0000000000008056000000300000003000000030000000a4400000082800000500000030000828a4400828a44030003000300030000828250000000c00
0000050000800d000000100000000000000000000000120000000c00000001000000260000001c00000001000000000000000800000000000000000000002500
00000c00000001000000250000000c000000050000805700000030000000d01f000064070000de370000ae0d000005000000da37aa0dda37db09d72bdb09d41f
db09d41f6807250000000c00000008000080280000000c00000001000000120000000c000000020000000d000000100000000000000000000000120000000c00
000001000000260000001c0000000100000000000000080000000000000000000000250000000c00000001000000250000000c00000005000080570000002c00
00005c1f0000080600004c2000006c0700000400000048206807d41f0c06601f680748206807250000000c00000008000080280000000c000000010000001600
00000c00000018000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c000000010000000000
0000080000000000000000000000250000000c00000001000000250000000c0000000500008057000000300000006008000064070000d81f0000ae0d00000500
00006408aa0d6408db091c14db09d41fdb09d41f6807250000000c00000008000080280000000c00000001000000120000000c000000020000000d0000001000
00000000000000000000120000000c00000001000000260000001c0000000100000000000000080000000000000000000000250000000c000000010000002500
00000c00000005000080570000002c0000005c1f0000080600004c2000006c0700000400000048206807d41f0c06601f680748206807250000000c0000000800
0080280000000c00000001000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c0000000100
000000000000080000000000000000000000250000000c00000001000000250000000c0000000500008057000000300000003218000064070000d81f0000ae0d
0000050000003618aa0d3618db09051cdb09d41fdb09d41f6807250000000c00000008000080280000000c00000001000000120000000c000000020000000d00
0000100000000000000000000000120000000c00000001000000260000001c0000000100000000000000080000000000000000000000250000000c0000000100
0000250000000c00000005000080570000002c0000005c1f0000080600004c2000006c0700000400000048206807d41f0c06601f680748206807250000000c00
000008000080280000000c00000001000000120000000c000000020000000d000000100000000000000000000000260000001c00000001000000000000000800
00000000000000000000250000000c00000001000000250000000c00000000000080560000003000000032180000580100007627000075030000050000003618
71037227710372275c0136185c0136187103250000000c00000008000080280000000c00000001000000120000000c00000001000000250000000c0000000500
0080520000004c01000001000000b3feffffbd0000000000000000000000bc0200000000000000000022560065007200640061006e0061000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000010101010101010101010000250000000c00000001000000540000006c000000c71d0000cb020000e02100005f040000010000008887873f8887873fc71d
0000cb020000050000004c000000000000000000000000000000000000000000000058000000540072006100730068007420e3000000a6000000de000000c600
0000ed000000120000000c000000020000000d000000100000000000000000000000260000001c00000002000000000000000800000000000000000000002500
00000c00000002000000250000000c000000000000805600000030000000321800006d03000076270000100600000500000036180c0672270c06722771033618
710336180c06250000000c00000008000080280000000c00000002000000120000000c00000001000000250000000c00000005000080520000004c0100000200
0000b3feffffa90000000000000000000000900100000000000000000022560065007200640061006e00610000002629264026552666267f269526a626bb26cc
26e526fb2736277628042872294e297a29b62a332af92ba72c112c35000000002d402e022e8a2ec92f1c2f712fd9302030a6310d3142317d31c4323f32903329
340e34b3352c3555357b35d5364c36e13735377937bf37fa3812382a384238c6397d399639af39f23a353a593a7e3ab73afc3b123b2e3b593c553c7c3ca23d01
3d603dba3dd43dfb3e3c3f003f123f2a3f423f623f7a3f923faa3fc63fde000040114029404140594073408f40bd4105411e414b4164419b41cf4205423a4269
42bc430d43254336434e435f438643f644ad44c544d64535458c45ae460a00000000000000000000000000000000000000000000000001010101010101010101
4a64250000000c0000000200000054000000c40000009a180000230500000c270000b7060000010000008887873f8887873f9a18000023050000140000004c00
000000000000000000000000000000000000000000007400000061006400640054006f00420069006e00280054007900700065006400420069006e005b005d00
2900c8000000cf000000cf000000cd000000ca000000e40000005b000000d300000097000000cd000000c5000000cf000000c6000000cf000000e40000005b00
0000d3000000970000009700000097000000120000000c000000020000000d000000100000000000000000000000260000001c00000003000000000000000800
00000000000000000000250000000c00000003000000250000000c000000000000805600000030000000c2000000a60d000006100000c30f000005000000c600
bf0f0210bf0f0210aa0dc600aa0dc600bf0f250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c0000000500
0080250000000c00000001000000540000007c000000ad040000190f00001a0c0000ad100000010000008887873f8887873fad040000190f0000080000004c00
000000000000000000000000000000000000000000005c00000041006c0075006d0069006e0075006d000301000072000000ed0000006001000072000000ed00
0000ed00000060010000120000000c000000020000000d000000100000000000000000000000260000001c000000030000000000000008000000000000000000
0000250000000c00000003000000250000000c000000000000805600000030000000c2000000bb0f0000061000005e12000005000000c6005a1202105a120210
bf0fc600bf0fc6005a12250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c00000005000080250000000c00
00000200000054000000c40000002a010000711100009c0f000005130000010000008887873f8887873f2a01000071110000140000004c000000000000000000
00000000000000000000000000007400000061006400640054006f00420069006e00280054007900700065006400420069006e005b005d002900c8000000cf00
0000cf000000cd000000ca000000e40000005b000000d300000097000000cd000000c5000000cf000000c6000000cf000000e40000005b000000d30000009700
00009700000097000000120000000c000000020000000d000000100000000000000000000000260000001c000000030000000000000008000000000000000000
0000250000000c00000003000000250000000c00000000000080560000003000000094100000a60d0000d81f0000c30f0000050000009810bf0fd41fbf0fd41f
aa0d9810aa0d9810bf0f250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c00000005000080250000000c00
000001000000540000006c00000017160000190f0000541a0000ad100000010000008887873f8887873f17160000190f0000050000004c000000000000000000
00000000000000000000000000005800000050006100700065007200a0b9f4000000de000000e9000000dd000000a6000000120000000c000000020000000d00
0000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c0000000000
0080560000003000000094100000bb0f0000d81f00005e1200000500000098105a12d41f5a12d41fbf0f9810bf0f98105a12250000000c000000080000802800
00000c00000003000000120000000c00000001000000250000000c00000005000080250000000c0000000200000054000000c4000000fc100000711100006e1f
000005130000010000008887873f8887873ffc10000071110000140000004c000000000000000000000000000000000000000000000074000000610064006400
54006f00420069006e00280054007900700065006400420069006e005b005d002900c8000000cf000000cf000000cd000000ca000000e40000005b000000d300
000097000000cd000000c5000000cf000000c6000000cf000000e40000005b000000d3000000970000009700000097000000120000000c000000020000000d00
0000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c0000000000
0080560000003000000066200000a60d0000aa2f0000c30f0000050000006a20bf0fa62fbf0fa62faa0d6a20aa0d6a20bf0f250000000c000000080000802800
00000c00000003000000120000000c00000001000000250000000c00000005000080250000000c00000001000000540000006c00000013260000190f0000fc29
0000ad100000010000008887873f8887873f13260000190f0000050000004c00000000000000000000000000000000000000000000005800000047006c006100
73007300688a0e01000072000000de000000c6000000c6000000120000000c000000020000000d000000100000000000000000000000260000001c0000000300
000000000000080000000000000000000000250000000c00000003000000250000000c00000000000080560000003000000066200000bb0f0000aa2f00005e12
0000050000006a205a12a62f5a12a62fbf0f6a20bf0f6a205a12250000000c00000008000080280000000c00000003000000120000000c000000010000002500
00000c00000005000080250000000c0000000200000054000000c4000000ce20000071110000402f000005130000010000008887873f8887873fce2000007111
0000140000004c00000000000000000000000000000000000000000000007400000061006400640054006f00420069006e002800540079007000650064004200
69006e005b005d002900c8000000cf000000cf000000cd000000ca000000e40000005b000000d300000097000000cd000000c5000000cf000000c6000000cf00
0000e40000005b000000d3000000970000009700000097000000120000000c000000020000000d000000100000000000000000000000260000001c0000000300
000000000000080000000000000000000000250000000c00000003000000250000000c00000000000080560000003000000038300000a60d00007c3f0000c30f
0000050000003c30bf0f783fbf0f783faa0d3c30aa0d3c30bf0f250000000c00000008000080280000000c00000003000000120000000c000000010000002500
00000c00000005000080250000000c0000000100000054000000840000000e340000190f0000a63b0000ad100000010000008887873f8887873f0e340000190f
0000090000004c000000000000000000000000000000000000000000000060000000430061007200640062006f006100720064000100f1000000de000000a600
0000e9000000e9000000e5000000de000000a6000000e9000000120000000c000000020000000d000000100000000000000000000000260000001c0000000300
000000000000080000000000000000000000250000000c00000003000000250000000c00000000000080560000003000000038300000bb0f00007c3f00005e12
0000050000003c305a12783f5a12783fbf0f3c30bf0f3c305a12250000000c00000008000080280000000c00000003000000120000000c000000010000002500
00000c00000005000080250000000c0000000200000054000000c4000000a030000071110000123f000005130000010000008887873f8887873fa03000007111
0000140000004c00000000000000000000000000000000000000000000007400000061006400640054006f00420069006e002800540079007000650064004200
69006e005b005d002900c8000000cf000000cf000000cd000000ca000000e40000005b000000d300000097000000cd000000c5000000cf000000c6000000cf00
0000e40000005b000000d3000000970000009700000097000000120000000c000000020000000d000000100000000000000000000000120000000c0000000100
0000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c000000050000805700000030000000d01f
0000640700000c280000ae0d0000050000000828aa0d0828db09ee23db09d41fdb09d41f6807250000000c00000008000080280000000c000000030000001200
00000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c000000030000000000000008000000000000000000
0000250000000c00000003000000250000000c00000005000080570000002c0000005c1f0000080600004c2000006c0700000400000048206807d41f0c06601f
680748206807250000000c00000008000080280000000c00000003000000120000000c000000020000000d000000100000000000000000000000120000000c00
000001000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c00000005000080570000003000
0000851f00003e1e0000de3700007b22000005000000da377722da37af1fb22baf1f891faf1f891f421e250000000c00000008000080280000000c0000000300
0000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c0000000300000000000000080000000000
000000000000250000000c00000003000000250000000c00000005000080570000002c000000111f0000e21c000001200000461e000004000000fd1f421e891f
e61c151f421efd1f421e250000000c00000008000080280000000c00000003000000120000000c000000020000000d0000001000000000000000000000001200
00000c00000001000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c000000050000805700
000030000000600800003e1e00008d1f00007b22000005000000640877226408af1ff713af1f891faf1f891f421e250000000c00000008000080280000000c00
000003000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c00000003000000000000000800
00000000000000000000250000000c00000003000000250000000c00000005000080570000002c000000111f0000e21c000001200000461e000004000000fd1f
421e891fe61c151f421efd1f421e250000000c00000008000080280000000c00000003000000120000000c000000020000000d00000010000000000000000000
0000120000000c00000001000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c0000000500
00805700000030000000321800003e1e00008d1f00007b22000005000000361877223618af1fe01baf1f891faf1f891f421e250000000c000000080000802800
00000c00000003000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c000000030000000000
0000080000000000000000000000250000000c00000003000000250000000c00000005000080570000002c000000111f0000e21c000001200000461e00000400
0000fd1f421e891fe61c151f421efd1f421e250000000c00000008000080280000000c00000003000000120000000c000000020000000d000000100000000000
000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c00000000000080560000003000
0000e7170000821300002b2700009f15000005000000eb179b1527279b1527278613eb178613eb179b15250000000c00000008000080280000000c0000000300
0000120000000c00000001000000250000000c00000005000080250000000c00000001000000540000007c000000251c0000f5140000ec220000891600000100
00008887873f8887873f251c0000f5140000080000004c00000000000000000000000000000000000000000000005c0000005400790070006500640042006900
6e00e3000000d9000000e9000000dd000000e9000000fe00000072000000ed000000120000000c000000020000000d0000001000000000000000000000002600
00001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c000000000000805600000030000000e71700009715
00002b270000ea1c000005000000eb17e61c2727e61c27279b15eb179b15eb17e61c250000000c00000008000080280000000c00000003000000120000000c00
000001000000250000000c00000005000080250000000c00000002000000540000009c0000004f1800004d1700007d220000e1180000010000008887873f8887
873f4f1800004d1700000d0000004c000000000000000000000000000000000000000000000068000000610064006400280041006c0075006d0069006e007500
6d0029000000c8000000cf000000cf00000097000000e40000005b000000d3000000440100005b000000d3000000d30000004401000097000000540000008800
00004f180000dd180000961f0000711a0000010000008887873f8887873f4f180000dd1800000a0000004c000000000000000000000000000000000000000000
0000600000006100640064002800500061007000650072002900c8000000cf000000cf00000097000000c9000000c8000000cf000000c60000008e0000009700
000054000000880000004f1800006d1a0000611f0000011c0000010000008887873f8887873f4f1800006d1a00000a0000004c00000000000000000000000000
0000000000000000000060000000610064006400280047006c006100730073002900c8000000cf000000cf00000097000000020100005b000000c8000000ad00
0000ad0000009700000054000000a00000004f180000fd1b0000ae220000911d0000010000008887873f8887873f4f180000fd1b00000e0000004c0000000000
000000000000000000000000000000000000680000006100640064002800430061007200640062006f006100720064002900c8000000cf000000cf0000009700
0000e9000000c80000008e000000cf000000cf000000ca000000c80000008e000000cf00000097000000120000000c000000020000000d000000100000000000
000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c00000000000080560000003000
0000c200000073220000061000009024000005000000c6008c2402108c2402107722c6007722c6008c24250000000c00000008000080280000000c0000000300
0000120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000900000007f030000e6230000490d00007a2500000100
00008887873f8887873f7f030000e62300000b0000004c00000000000000000000000000000000000000000000006400000041006c0075006d0069006e007500
6d00420069006e0000000301000072000000ed0000006001000072000000ed000000ed00000060010000fe00000072000000ed000000120000000c0000000200
00000d000000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c00
0000000000805600000030000000c200000088240000061000002b27000005000000c60027270210272702108c24c6008c24c6002727250000000c000000fc04
000026060f00ee09574d4643010000000000010000000000000002000000cc09000000000000cc29000008000080280000000c00000003000000120000000c00
000001000000250000000c00000005000080250000000c00000002000000540000009c0000002a0100003e260000580b0000d2270000010000008887873f8887
873f2a0100003e2600000d0000004c000000000000000000000000000000000000000000000068000000610064006400280041006c0075006d0069006e007500
6d0029000000c8000000cf000000cf00000097000000e40000005b000000d3000000440100005b000000d3000000d30000004401000097000000120000000c00
0000020000000d000000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c000000030000002500
00000c0000000000008056000000300000009410000073220000d81f0000902400000500000098108c24d41f8c24d41f77229810772298108c24250000000c00
000008000080280000000c00000003000000120000000c00000001000000250000000c00000005000080250000000c00000001000000540000007c000000e914
0000e6230000831b00007a250000010000008887873f8887873fe9140000e6230000080000004c00000000000000000000000000000000000000000000005c00
000050006100700065007200420069006e00f4000000de000000e9000000dd000000a6000000fe00000072000000ed000000120000000c000000020000000d00
0000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c0000000000
008056000000300000009410000088240000d81f00002b2700000500000098102727d41f2727d41f8c2498108c2498102727250000000c000000080000802800
00000c00000003000000120000000c00000001000000250000000c00000005000080250000000c000000020000005400000088000000fc1000003e2600004318
0000d2270000010000008887873f8887873ffc1000003e2600000a0000004c000000000000000000000000000000000000000000000060000000610064006400
2800500061007000650072002900c8000000cf000000cf00000097000000c9000000c8000000cf000000c60000008e00000097000000120000000c0000000200
00000d000000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c00
00000000008056000000300000006620000073220000aa2f000090240000050000006a208c24a62f8c24a62f77226a2077226a208c24250000000c0000000800
0080280000000c00000003000000120000000c00000001000000250000000c00000005000080250000000c00000001000000540000007c000000e5240000e623
00002b2b00007a250000010000008887873f8887873fe5240000e6230000080000004c00000000000000000000000000000000000000000000005c0000004700
6c00610073007300420069006e000e01000072000000de000000c6000000c6000000fe00000072000000ed000000120000000c000000020000000d0000001000
00000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c000000000000805600
0000300000006620000088240000aa2f00002b270000050000006a202727a62f2727a62f8c246a208c246a202727250000000c00000008000080280000000c00
000003000000120000000c00000001000000250000000c00000005000080250000000c000000020000005400000088000000ce2000003e260000e0270000d227
0000010000008887873f8887873fce2000003e2600000a0000004c00000000000000000000000000000000000000000000006000000061006400640028004700
6c006100730073002900c8000000cf000000cf00000097000000020100005b000000c8000000ad000000ad00000097000000120000000c000000020000000d00
0000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c0000000000
0080560000003000000038300000732200007c3f000090240000050000003c308c24783f8c24783f77223c3077223c308c24250000000c000000080000802800
00000c00000003000000120000000c00000001000000250000000c00000005000080250000000c000000010000005400000094000000df320000e6230000d43c
00007a250000010000008887873f8887873fdf320000e62300000c0000004c000000000000000000000000000000000000000000000064000000430061007200
640062006f00610072006400420069006e00f1000000de000000a6000000e9000000e9000000e5000000de000000a6000000e9000000fe00000072000000ed00
0000120000000c000000020000000d000000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00
000003000000250000000c00000000000080560000003000000038300000882400007c3f00002b270000050000003c302727783f2727783f8c243c308c243c30
2727250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c00000005000080250000000c000000020000005400
0000a0000000a03000003e260000ff3a0000d2270000010000008887873f8887873fa03000003e2600000e0000004c0000000000000000000000000000000000
000000000000680000006100640064002800430061007200640062006f006100720064002900c8000000cf000000cf00000097000000e9000000c80000008e00
0000cf000000cf000000ca000000c80000008e000000cf00000097000000120000000c000000020000000d000000100000000000000000000000120000000c00
000001000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c00000005000080570000003000
0000851f00003e1e00000c2800007b22000005000000082877220828af1fc923af1f891faf1f891f421e250000000c00000008000080280000000c0000000300
0000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c0000000300000000000000080000000000
000000000000250000000c00000003000000250000000c00000005000080570000002c000000111f0000e21c000001200000461e000004000000fd1f421e891f
e61c151f421efd1f421e250000000c00000008000080280000000c000000030000000e0000001400000000000000100000001400000004000000030108000500
00000b0200000000050000000c024628cc400500000001020cbb1c0108000000fa02050000000000ffffff00040000002d01000007000000fc020000ffffff00
0000040000002d0101000e0000002403050030000828a4400828a4403000300030003000082807000000fc020100000000000000040000002d01020004000000
0201010008000000fa0200000800000000000000040000002d010300040000002d0102000e00000025030500da37aa0dda37db09d72bdb09d41fdb09d41f6807
040000002d01000004000000f00103000400000002010200040000000201010008000000fa0200000800000000000000040000002d010300040000002d010200
0c0000002503040048206807d41f0c06601f680748206807040000002d01000004000000f0010300040000002e01180004000000020102000400000002010100
08000000fa0200000800000000000000040000002d010300040000002d0102000e000000250305006408aa0d6408db091c14db09d41fdb09d41f680704000000
2d01000004000000f00103000400000002010200040000000201010008000000fa0200000800000000000000040000002d010300040000002d0102000c000000
2503040048206807d41f0c06601f680748206807040000002d01000004000000f00103000400000002010200040000000201010008000000fa02000008000000
00000000040000002d010300040000002d0102000e000000250305003618aa0d3618db09051cdb09d41fdb09d41f6807040000002d01000004000000f0010300
0400000002010200040000000201010008000000fa0200000800000000000000040000002d010300040000002d0102000c0000002503040048206807d41f0c06
601f680748206807040000002d01000004000000f0010300040000000201020008000000fa0200000800000000000000040000002d010300040000002d010100
0e00000024030500361871037227710372275c0136185c0136187103040000002d01000004000000f00103000400000002010100040000002d0102001c000000
fb024d01bd0000000000bc02000000000000002256657264616e6100000000000000000000000000000000000000000000000000040000002d0103000f000000
320acb02c71d05000000547261736800e300a600de00c600ed00040000000201020008000000fa0200000800000000000000040000002d010400040000002d01
01000e0000002403050036180c0672270c06722771033618710336180c06040000002d01000004000000f00104000400000002010100040000002d0102001c00
0000fb024d01a900000000009001000000000000002256657264616e61003f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f00040000002d0104002500
0000320a23059a1814000000616464546f42696e28547970656442696e5b5d29c800cf00cf00cd00ca00e4005b00d3009700cd00c500cf00c600cf00e4005b00
d300970097009700040000000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e00000024030500c600bf0f0210bf0f
0210aa0dc600aa0dc600bf0f040000002d01000004000000f00105000400000002010100040000002d010200040000002d01030013000000320a190fad040800
0000416c756d696e756d03017200ed0060017200ed00ed006001040000000201020008000000fa0200000800000000000000040000002d010500040000002d01
01000e00000024030500c6005a1202105a120210bf0fc600bf0fc6005a12040000002d01000004000000f00105000400000002010100040000002d0102000400
00002d01040025000000320a71112a0114000000616464546f42696e28547970656442696e5b5d29c800cf00cf00cd00ca00e4005b00d3009700cd00c500cf00
c600cf00e4005b00d300970097009700040000000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e00000024030500
9810bf0fd41fbf0fd41faa0d9810aa0d9810bf0f040000002d01000004000000f00105000400000002010100040000002d010200040000002d0103000f000000
320a190f171605000000506170657200f400de00e900dd00a600040000000201020008000000fa0200000800000000000000040000002d010500040000002d01
01000e0000002403050098105a12d41f5a12d41fbf0f9810bf0f98105a12040000002d01000004000000f00105000400000002010100040000002d0102000400
00002d01040025000000320a7111fc1014000000616464546f42696e28547970656442696e5b5d29c800cf00cf00cd00ca00e4005b00d3009700cd00c500cf00
c600cf00e4005b00d300970097009700040000000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e00000024030500
6a20bf0fa62fbf0fa62faa0d6a20aa0d6a20bf0f040000002d01000004000000f00105000400000002010100040000002d010200040000002d0103000f000000
320a190f132605000000476c617373000e017200de00c600c600040000000201020008000000fa0200000800000000000000040000002d010500040000002d01
01000e000000240305006a205a12a62f5a12a62fbf0f6a20bf0f6a205a12040000002d01000004000000f00105000400000002010100040000002d0102000400
00002d01040025000000320a7111ce2014000000616464546f42696e28547970656442696e5b5d29c800cf00cf00cd00ca00e4005b00d3009700cd00c500cf00
c600cf00e4005b00d300970097009700040000000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e00000024030500
3c30bf0f783fbf0f783faa0d3c30aa0d3c30bf0f040000002d01000004000000f00105000400000002010100040000002d010200040000002d01030015000000
320a190f0e340900000043617264626f61726454f100de00a600e900e900e500de00a600e900040000000201020008000000fa02000008000000000000000400
00002d010500040000002d0101000e000000240305003c305a12783f5a12783fbf0f3c30bf0f3c305a12040000002d01000004000000f0010500040000000201
0100040000002d010200040000002d01040025000000320a7111a03014000000616464546f42696e28547970656442696e5b5d29c800cf00cf00cd00ca00e400
5b00d3009700cd00c500cf00c600cf00e4005b00d3009700970097000400000002010200040000000201010008000000fa020000080000000000000004000000
2d010500040000002d0102000e000000250305000828aa0d0828db09ee23db09d41fdb09d41f6807040000002d01000004000000f00105000400000002010200
040000000201010008000000fa0200000800000000000000040000002d010500040000002d0102000c0000002503040048206807d41f0c06601f680748206807
040000002d01000004000000f00105000400000002010200040000000201010008000000fa0200000800000000000000040000002d010500040000002d010200
0e00000025030500da377722da37af1fb22baf1f891faf1f891f421e040000002d01000004000000f00105000400000002010200040000000201010008000000
fa0200000800000000000000040000002d010500040000002d0102000c00000025030400fd1f421e891fe61c151f421efd1f421e040000002d01000004000000
f00105000400000002010200040000000201010008000000fa0200000800000000000000040000002d010500040000002d0102000e0000002503050064087722
6408af1ff713af1f891faf1f891f421e040000002d01000004000000f00105000400000002010200040000000201010008000000fa0200000800000000000000
040000002d010500040000002d0102000c00000025030400fd1f421e891fe61c151f421efd1f421e040000002d01000004000000f00105000400000002010200
040000000201010008000000fa0200000800000000000000040000002d010500040000002d0102000e00000025030500361877223618af1fe01baf1f891faf1f
891f421e040000002d01000004000000f00105000400000002010200040000000201010008000000fa0200000800000000000000040000002d01050004000000
2d0102000c00000025030400fd1f421e891fe61c151f421efd1f421e040000002d01000004000000f0010500040000000201020008000000fa02000008000000
00000000040000002d010500040000002d0101000e00000024030500eb179b1527279b1527278613eb178613eb179b15040000002d01000004000000f0010500
0400000002010100040000002d010200040000002d01030013000000320af514251c08000000547970656442696ee300d900e900dd00e900fe007200ed000400
00000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e00000024030500eb17e61c2727e61c27279b15eb179b15eb17
e61c040000002d01000004000000f00105000400000002010100040000002d010200040000002d0104001b000000320a4d174f180d00000061646428416c756d
696e756d2964c800cf00cf009700e4005b00d30044015b00d300d3004401970016000000320add184f180a00000061646428506170657229c800cf00cf009700
c900c800cf00c6008e00970016000000320a6d1a4f180a00000061646428476c61737329c800cf00cf00970002015b00c800ad00ad0097001c000000320afd1b
4f180e0000006164642843617264626f61726429c800cf00cf009700e900c8008e00cf00cf00ca00c8008e00cf009700040000000201020008000000fa020000
0800000000000000040000002d010500040000002d0101000e00000024030500c6008c2402108c2402107722c6007722c6008c24040000002d01000004000000
f00105000400000002010100040000002d010200040000002d01030018000000320ae6237f030b000000416c756d696e756d42696e7203017200ed0060017200
ed00ed006001fe007200ed00040000000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e00000024030500c6002727
0210272702108c24c6008c24c6002727040000002d01000004000000f00105000400000002010100040000002d010200040000002d0104001b000000320a3e26
2a010d00000061646428416c756d696e756d2929c800cf00cf009700e4005b00d30044015b00d300d30044019700040000000201020008000000fa0200000800
000000000000040000002d010500040000002d0101000e0000002403050098108c24d41f8c24d41f77229810772298108c24040000002d01000004000000f001
05000400000002010100040000002d010200040000002d01030013000000320ae623e91408000000506170657242696ef400de00e900dd00a600fe007200ed00
040000000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e0000002403050098102727d41f2727d41f8c2498108c24
98102727040000002d01000004000000f00105000400000002010100040000002d010200040000002d01040016000000320a3e26fc100a000000616464285061
70657229c800cf00cf009700c900c800cf00c6008e009700040000000201020008000000fa0200000800000000000000040000002d010500040000002d010100
0e000000240305006a208c24a62f8c24a62f77226a2077226a208c24040000002d01000004000000f00105000400000002010100040000002d01020004000000
2d01030013000000320ae623e52408000000476c61737342696e0e017200de00c600c600fe007200ed00040000000201020008000000fa020000080000000000
0000040000002d010500040000002d0101000e000000240305006a202727a62f2727a62f8c246a208c246a202727040000002d01000004000000f00105000400
000002010100040000002d010200040000002d01040016000000320a3e26ce200a00000061646428476c61737329c800cf00cf00970002015b00c800ad00ad00
9700040000000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e000000240305003c308c24783f8c24783f77223c30
77223c308c24040000002d01000004000000f00105000400000002010100040000002d010200040000002d01030019000000320ae623df320c00000043617264
626f61726442696ef100de00a600e900e900e500de00a600e900fe007200ed00040000000201020008000000fa0200000800000000000000040000002d010500
040000002d0101000e000000240305003c302727783f2727783f8c243c308c243c302727040000002d01000004000000f0010500040000000201010004000000
2d010200040000002d0104001c000000320a3e26a0300e0000006164642843617264626f61726429c800cf00cf009700e900c8008e00cf00cf00ca00c8008e00
cf0097000400000002010200040000000201010008000000fa0200000800000000000000040000002d010500040000002d0102000e0000002503050008287722
0828af1fc923af1f891faf1f891f421e040000002d01000004000000f00105000400000002010200040000000201010008000000fa0200000800000000000000040000002d010500040000002d0102000c00000025030400fd1f421e891fe61c151f421efd1f421e040000002d01000004000000f0010500030000000000}}{

\par }{\v #[BT_511]#}{The new hierarchy is TypedBin, and it contains its own method called add(\~) that is also used polymorphically. But here's an additional twist: add(\~
) is overloaded to take arguments of the different types of trash. So an essential part of the double dispatching scheme also involves overloading.}{\v 
\par #[BT_512]#}{Redesigning the program produces a dilemma: it\rquote s now necessary for the base class }{\b Trash}{ to contain an }{\b addToBin(\~)}{
 method. One approach is to copy all of the code and change the base class. Another approach, which you can take when you don\rquote t have control of the source code, is to put the }{\b addToBin(\~)}{ method into an }{\b interface}{, leave }{\b Trash}{
 alone, and inherit new sp}{e}{cific types of }{\b Aluminum}{, }{\b Paper}{, }{\b Glass}{, and }{\b Cardboard}{. This is the approach that will be taken here. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_403" \\o "A_403" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400300033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_513]#}{Most of the classes in this design must be }{\b public}{, so they are placed in their own files. Here\rquote s the interface: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_404" \\
o "A_404" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400300034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:doubledispatch:TypedBinMember.py

\par # An class for adding the double 
\par # dispatching method to the trash hierarchy 
\par # without modifying the original hierarchy.
\par 
\par class TypedBinMember:
\par   # The method:
\par   boolean addToBin(TypedBin[] tb)
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_514]#
\par #[BT_515]#}{In each particular subtype of }{\b Aluminum}{, }{\b Paper}{, }{\b Glass,}{ and }{\b Cardboard}{, the }{\b addToBin(\~)}{ method in the }{\b interface TypedBinMember}{ is implemented, but it }{\i looks}{
 like the code is exactly the same in each case: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_405" \\o "A_405" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400300035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:doubledispatch:DDAluminum.py

\par # Aluminum for double dispatching.
\par 
\par class DDAluminum(Aluminum) 
\par     implements TypedBinMember:
\par   def __init__(self, double wt): .__init__(wt) 
\par   def addToBin(self, TypedBin[] tb):
\par     for(int i = 0 i < tb.length i++)
\par       if(tb[i].add(self))
\par         return 1
\par     return 0
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_516]#
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:doubledispatch:DDPaper.py
\par # Paper for double dispatching.
\par 
\par class DDPaper(Paper) 
\par     implements TypedBinMember:
\par   def __init__(self, double wt): .__init__(wt) 
\par   def addToBin(self, TypedBin[] tb):
\par     for(int i = 0 i < tb.length i++)
\par       if(tb[i].add(self))
\par         return 1
\par     return 0
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_517]#
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:doubledispatch:DDGlass.py
\par # Glass for double dispatching.
\par 
\par class DDGlass(Glass) 
\par     implements TypedBinMember:
\par   def __init__(self, double wt): .__init__(wt) 
\par   def addToBin(self, TypedBin[] tb):
\par     for(int i = 0 i < tb.length i++)
\par       if(tb[i].add(self))
\par         return 1
\par     return 0
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_518]#
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:doubledispatch:DDCardboard.py

\par # Cardboard for double dispatching.
\par 
\par class DDCardboard(Cardboard) 
\par     implements TypedBinMember:
\par   def __init__(self, double wt): .__init__(wt) 
\par   def addToBin(self, TypedBin[] tb):
\par     for(int i = 0 i < tb.length i++)
\par       if(tb[i].add(self))
\par         return 1
\par     return 0
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_519]#
\par #[BT_520]#}{The code in each }{\b addToBin(\~) }{calls }{\b add(\~)}{ for each }{\b TypedBin}{ object in the a}{r}{ray. But notice the argument: }{\b this}{. The type of }{\b this}{ is different for each su}{b}{class of }{\b Trash}{
, so the code is different. (Although this code will benefit if a }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe 
{parameterized type}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {type\: parameterized type}}}{
parameterized type mechanism is ever added to Java.) So this is the first part of the double dispatch, because once you\rquote re inside this method you know you\rquote re }{\b Aluminum}{, or }{\b Paper}{, etc. During the call to }{\b add(\~)}{
, this information is passed via the type of }{\b this}{. The compiler resolves the call to the proper overloaded version of }{\b add(\~)}{. But}{\b  }{since }{\b tb[i]}{ produces a reference to the base type }{\b TypedBin}{,}{\b  }{
this call will end up calling a different method depending on the type of }{\b TypedBin}{ that\rquote s currently selected. That is the second di}{s}{patch. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_406" \\o "A_406" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400300036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_521]#}{Here\rquote s the base class for }{\b TypedBin}{: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_407" \\o "A_407" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400300037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:doubledispatch:TypedBin.py
\par # A container for the second dispatch.
\par 
\par class TypedBin:
\par   Collection c = ArrayList()
\par   def addIt(self, Trash t):
\par     c.add(t)
\par     return 1
\par 
\par   def iterator(self):
\par     return c.iterator()
\par 
\par   def add(self, DDAluminum a):
\par     return 0
\par 
\par   def add(self, DDPaper a):
\par     return 0
\par 
\par   def add(self, DDGlass a):
\par     return 0
\par 
\par   def add(self, DDCardboard a):
\par     return 0
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_522]#
\par #[BT_523]#}{You can see that the overloaded }{\b add(\~)}{ methods all return }{\b false}{. If the method is not overloaded in a derived class, it will continue to r}{e}{turn }{\b false}{, and the caller (}{\b addToBin(\~)}{
, in this case) will assume that the current }{\b Trash}{ object has not been added successfully to a container, and continue searching for the right container. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_408" \\o "A_408" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400300038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_524]#}{In each of the subclasses of }{\b TypedBin}{, only one overloaded method is ove}{r}{ridden, according to the type of bin that\rquote s being created. For example, }{\b Car}{\b d}{\b boardBin}{ overrides }{\b add(DDCardboard)}{
. The overridden method adds the trash object to its container and returns }{\b true}{, while all the rest of the }{\b add(\~) }{methods in }{\b CardboardBin }{continue to return }{\b false}{, since they haven\rquote 
t been overridden. This is another case in which a parameterized type mechanism in Java would allow automatic generation of code. (With }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {C++\: template}}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {template\: in C++}}}{C++ }{\b template}{s, you wouldn\rquote t have to explicitly write the subclasses or place the }{\b addToBin(\~)}{ method in }{\b Trash}{.) }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_409" \\o "A_409" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400300039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_525]#}{Since for this example the trash types have been customized and placed in a different directory, you\rquote ll need a different trash data file to make it work. Here\rquote s a possible }{\b DDTrash.dat}{: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_410" \\o "A_410" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400310030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:doubledispatch:DDTrash.dat
\par DDGlass:54
\par DDPaper:22
\par DDPaper:11
\par DDGlass:17
\par DDAluminum:89
\par DDPaper:88
\par DDAluminum:76
\par DDCardboard:96
\par DDAluminum:25
\par DDAluminum:34
\par DDGlass:11
\par DDGlass:68
\par DDGlass:43
\par DDAluminum:27
\par DDCardboard:44
\par DDAluminum:18
\par DDPaper:91
\par DDGlass:63
\par DDGlass:50
\par DDGlass:80
\par DDAluminum:81
\par DDCardboard:12
\par DDGlass:12
\par DDGlass:54
\par DDAluminum:36
\par DDAluminum:93
\par DDGlass:93
\par DDPaper:80
\par DDGlass:36
\par DDGlass:12
\par DDGlass:60
\par DDPaper:66
\par DDAluminum:36
\par DDCardboard:22
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_526]#
\par #[BT_527]#}{Here\rquote s the rest of the program: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_411" \\o "A_411" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400310031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:doubledispatch:DoubleDispatch.py

\par # Using multiple dispatching to handle more
\par # than one unknown type during a method call.
\par 
\par class AluminumBin(TypedBin):
\par   def add(self, DDAluminum a):
\par     return addIt(a)
\par 
\par class PaperBin(TypedBin):
\par   def add(self, DDPaper a):
\par     return addIt(a)
\par 
\par class GlassBin(TypedBin):
\par   def add(self, DDGlass a):
\par     return addIt(a)
\par 
\par class CardboardBin(TypedBin):
\par   def add(self, DDCardboard a):
\par     return addIt(a)
\par 
\par class TrashBinSet:
\par   private TypedBin[] binSet =:
\par     AluminumBin(),
\par     PaperBin(),
\par     GlassBin(),
\par     CardboardBin()
\par 
\par   def sortIntoBins(self, Collection bin):
\par     Iterator e = bin.iterator()
\par     while(e.hasNext()):
\par       TypedBinMember t = 
\par         (TypedBinMember)e.next()
\par       if(!t.addToBin(binSet))
\par         System.err.println("Couldn't add " + t)
\par 
\par   public TypedBin[] binSet(): return binSet 
\par 
\par class DoubleDispatch(UnitTest):
\par   Collection bin = ArrayList()
\par   TrashBinSet bins = TrashBinSet()
\par   def __init__(self):
\par     # ParseTrash still works, without changes:
\par     ParseTrash.fillBin("DDTrash.dat", bin)
\par 
\par   def test(self):
\par     # Sort from the master bin into 
\par     # the individually-typed bins:
\par     bins.sortIntoBins(bin)
\par     TypedBin[] tb = bins.binSet()
\par     # Perform sumValue for each bin...
\par     for(int i = 0 i < tb.length i++)
\par       Trash.sumValue(tb[i].c.iterator())
\par     # ... and for the master bin
\par     Trash.sumValue(bin.iterator())
\par 
\par   def main(self, String args[]):
\par     DoubleDispatch().test()
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_528]#
\par }{\b\v #[BT_529]#}{\b TrashBinSet}{ encapsulates all of the different types of }{\b TypedBin}{s, along with the }{\b sortIntoBins(\~)}{
 method, which is where all the double dispatching takes place. You can see that once the structure is set up, sorting into the various }{\b Type}{\b d}{\b Bin}{s is remarkably easy. In addition, t
he efficiency of two dynamic method calls is probably better than any other way you could sort. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_412" \\o "A_412" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400310032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_530]#}{Notice the ease of use of this system in }{\b main(\~)}{, as well as the complete i}{n}{dependence of any specific type information within }{\b main(\~)}{. All other met}{h}{ods that talk only to the }{\b Trash}{
 base-class interface will be equally invulnerable to changes in }{\b Trash}{ types. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_413" \\o "A_413" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400310033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_531]#}{The changes necessary to add a new type are relatively isolated: you modify }{\b TypedBin}{,}{\b  }{i}{n}{herit the new type of }{\b Trash}{ with its }{\b addToBin(\~)}{ method, then inherit a new }{\b TypedBin}{ (this is reall
y just a copy and simple edit), and finally add a new type into the aggregate initialization for }{\b TrashBinSet}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_414" \\o "A_414" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400310034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705926}
{\*\bkmkstart _Toc534420142}The }{\i Visitor}{ pattern{\*\bkmkend _Toc375545417}{\*\bkmkend _Toc476705926}{\*\bkmkend _Toc534420142}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_532]#}{Now consider 
applying a design pattern that has an entirely different goal to the trash sorting problem. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_415" \\o "A_415" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400310035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_533]#}{For this pattern, we are no longer concerned with optimizing the addition of new types of }{\b Trash }{to the system. Indeed, this pattern makes adding a new type of }{\b Trash }{\i more}{
 complicated. The assumption is that you have a primary class hierarchy that is fixed; perhaps it\rquote s from another vendor and you can\rquote t make changes to that hierarchy. However, you\rquote 
d like to add new polymorphic methods to that hierarchy, which means that normally you\rquote d have to add something to the base class interface. So the dilemma is that you need to add methods to the base class, but you can\rquote 
t touch the base class. How do you get around this? }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_416" \\o "A_416" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400310036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_534]#}{The design pattern that solves this kind of problem is called a \'93visitor\'94 (the final one in the }{\i Design Patterns}{ book), and it builds on the double}{\i  }{dispatching scheme shown in the last section. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_417" \\o "A_417" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400310037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_535]#}{The }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {visitor pattern}}}{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {design patterns\: visitor}}}{
visitor pattern allows you to extend the interface of the primary type by creating a separate class hierarchy of type }{\b Visitor }{to virtualize the operations performed upon the primary type. The objects of the primary type simply \'93accept\'94
 the visitor, then call the visitor\rquote s dynamically}{\b -}{bound method. It looks like this: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_418" \\o "A_418" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400310038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard \qc \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_536]#}{{\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}
{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pibName}{\sv Visitor}}{\sp{\sn pibFlags}{\sv 2}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw11710\pich15679\picwgoal6639\pichgoal8889\wmetafile8\bliptag519439034\blipupi-213{\*\blipuid 1ef602ba261b832356f9b09dcfa77660}
010009000003ce22000006001610000000001610000026060f002220574d4643010000000000010027d9000000000200000000200000b4100000b43000000100
0000780000003000000030000000092b0000c33900000000000000000000be2d00003e3d000020454d4600000100b43000004a010000040000000f0000005800
000000000000b04f000020670000d80000001701000056004900530049004f000000440072006100770069006e00670000000000004b0a000000100000000000
0000000000000900000010000000392b0000df3900000d000000100000000000000000000000190000000c000000f4831d01250000000c000000080000802500
00000c0000000000008056000000300000003000000030000000092b0000af390000050000003000af39092baf39092b3000300030003000af39250000000c00
0000050000800d000000100000000000000000000000120000000c00000001000000260000001c00000001000000000000000800000000000000000000002500
00000c00000001000000250000000c0000000500008057000000300000006c070000e1060000841500003d0a0000050000007007390a7007e107780ee1078015
e1078015e506250000000c00000008000080280000000c00000001000000120000000c000000020000000d000000100000000000000000000000120000000c00
000001000000260000001c0000000100000000000000080000000000000000000000250000000c00000001000000250000000c00000005000080570000002c00
00000815000085050000f8150000e906000004000000f415e506801589050c15e506f415e506250000000c00000008000080280000000c000000010000001600
00000c00000018000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c000000010000000000
0000080000000000000000000000250000000c00000001000000250000000c0000000500008057000000280000007c150000e1060000841500003d0a00000300
00008015390a8015e1078015e506250000000c00000008000080280000000c00000001000000120000000c000000020000000d00000010000000000000000000
0000120000000c00000001000000260000001c0000000100000000000000080000000000000000000000250000000c00000001000000250000000c0000000500
0080570000002c0000000815000085050000f8150000e906000004000000f415e506801589050c15e506f415e506250000000c00000008000080280000000c00
000001000000120000000c000000020000000d000000100000000000000000000000260000001c00000001000000000000000800000000000000000000002500
00000c00000001000000250000000c000000000000805600000030000000fe0f0000d5000000031b0000f2020000050000000210ee02ff1aee02ff1ad9000210
d9000210ee02250000000c00000008000080280000000c00000001000000120000000c00000001000000250000000c00000005000080520000004c0100000100
0000b3feffffbd0000000000000000000000bc0200000000000000000022560065007200640061006e0061000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000010001000010834a00004c4828290000000000000000000000000000000000000000000000000000000000000000000000000000000001000300
03000000640000000100010000000000f00003000000000001000000000000000000000001000100000000000050434d000000000000c84b0000010000000000
00000000020000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101
0000250000000c00000001000000540000006c00000073130000470200008c170000db030000010000008887873f8887873f7313000047020000050000004c00
0000000000000000000000000000000000000000000058000000540072006100730068000000e3000000a6000000de000000c6000000ed000000120000000c00
0000020000000d000000100000000000000000000000260000001c0000000200000000000000080000000000000000000000250000000c000000020000002500
00000c000000000000805600000030000000fe0f0000ea020000031b00008d0500000500000002108905ff1a8905ff1aee020210ee0202108905250000000c00
000008000080280000000c00000002000000120000000c00000001000000250000000c00000005000080520000004c01000002000000b3feffffa90000000000
000000000000900100000000000000000022560065007200640061006e0061000000030003000200000000000100010000000000f00003000000000000000000
00000000000000000000000001000100000000000050434d000000000000c84b00000100000000000000000001000200a644fe41165d00000000000001000100
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010101010000250000000c0000000200
000054000000a8000000661000009f040000ef19000033060000010000008887873f8887873f661000009f0400000f0000004c00000000000000000000000000
000000000000000000006c0000006100630063006500700074002800560069007300690074006f00720029000000c8000000ad000000ad000000c6000000cf00
00008300000097000000e40000005b000000ad0000005b00000083000000ca0000008e00000097000000120000000c000000020000000d000000100000000000
000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c00000000000080560000003000
0000d5000000350a00000c0e0000b60c000005000000d900b20c080eb20c080e390ad900390ad900b20c250000000c00000008000080280000000c0000000300
0000120000000c00000001000000250000000c00000005000080250000000c00000001000000540000007c000000b9030000d90b0000260b00006d0d00000100
00008887873f8887873fb9030000d90b0000080000004c00000000000000000000000000000000000000000000005c00000041006c0075006d0069006e007500
6d000301000072000000ed0000006001000072000000ed000000ed00000060010000120000000c000000020000000d0000001000000000000000000000002600
00001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c000000000000805600000030000000d5000000ae0c
00000c0e00007112000005000000d9006d12080e6d12080eb20cd900b20cd9006d12250000000c00000008000080280000000c00000003000000120000000c00
000001000000250000000c00000005000080250000000c0000000200000054000000c00000003d010000630e0000480d0000f70f0000010000008887873f8887
873f3d010000630e0000130000004c00000000000000000000000000000000000000000000007400000061006300630065007000740028005600690073006900
74006f00720020007600290020007b000000c8000000ad000000ad000000c6000000cf0000008300000097000000e40000005b000000ad0000005b0000008300
0000ca0000008e00000075000000c50000009700000075000000d300000054000000b40000003d010000f30f0000a70a000087110000010000008887873f8887
873f3d010000f30f0000110000004c00000000000000000000000000000000000000000000007000000020002000200076002e00760069007300690074002800
740068006900730029003b000000750000007500000075000000c500000079000000c50000005b000000ad0000005b000000830000009700000083000000d300
00005b000000ad000000970000009700000054000000540000003d010000831100000f02000017130000010000008887873f8887873f3d010000831100000100
00004c0000000000000000000000000000000000000000000000500000007d000000d3000000120000000c000000020000000d00000010000000000000000000
0000120000000c00000001000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c0000000500
008057000000300000007c150000e1060000052400003d0a0000050000000124390a0124e107c11ce1078015e1078015e506250000000c000000080000802800
00000c00000003000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c000000030000000000
0000080000000000000000000000250000000c00000003000000250000000c00000005000080570000002c0000000815000085050000f8150000e90600000400
0000f415e506801589050c15e506f415e506250000000c00000008000080280000000c00000003000000120000000c000000020000000d000000100000000000
000000000000120000000c00000001000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c00
000005000080570000003000000009090000251d000084150000d9220000050000000d09d5220d09511f470f511f8015511f8015291d250000000c0000000800
0080280000000c00000003000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c0000000300
000000000000080000000000000000000000250000000c00000003000000250000000c00000005000080570000002c00000008150000c91b0000f81500002d1d
000004000000f415291d8015cd1b0c15291df415291d250000000c00000008000080280000000c00000003000000120000000c000000020000000d0000001000
00000000000000000000120000000c00000001000000260000001c0000000300000000000000080000000000000000000000250000000c000000030000002500
00000c0000000500008057000000300000007c150000251d0000a51a0000d922000005000000a11ad522a11a511f1118511f8015511f8015291d250000000c00
000008000080280000000c00000003000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c00
00000300000000000000080000000000000000000000250000000c00000003000000250000000c00000005000080570000002c00000008150000c91b0000f815
00002d1d000004000000f415291d8015cd1b0c15291df415291d250000000c00000008000080280000000c00000003000000120000000c000000020000000d00
0000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c0000000000
00805600000030000000de0d0000e0130000221d00001616000005000000e20d12161e1d12161e1de413e20de413e20d1216250000000c000000080000802800
00000c00000003000000120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000780000001b1300005f150000e517
0000f3160000010000008887873f8887873f1b1300005f150000070000004c00000000000000000000000000000000000000000000005c000000560069007300
690074006f0072000000fe00000072000000c60000007200000098000000e5000000a6000000120000000c000000020000000d00000010000000000000000000
0000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c000000000000805600000030000000de0d
00000e160000221d0000d11b000005000000e20dcd1b1e1dcd1b1e1d1216e20d1216e20dcd1b250000000c00000008000080280000000c000000030000001200
00000c00000001000000250000000c00000005000080250000000c0000000200000054000000a8000000460e0000c3170000b918000057190000010000008887
873f8887873f460e0000c31700000f0000004c00000000000000000000000000000000000000000000006c00000076006900730069007400280041006c007500
6d0069006e0075006d0029000000c50000005b000000ad0000005b0000008300000097000000e40000005b000000d3000000440100005b000000d3000000d300
000044010000970000005400000094000000460e000053190000d2150000e71a0000010000008887873f8887873f460e0000531900000c0000004c0000000000
00000000000000000000000000000000000064000000760069007300690074002800500061007000650072002900c50000005b000000ad0000005b0000008300
000097000000c9000000c8000000cf000000c60000008e000000970000005400000094000000460e0000e31a00009d150000771c0000010000008887873f8887
873f460e0000e31a00000c0000004c00000000000000000000000000000000000000000000006400000076006900730069007400280047006c00610073007300
2900c50000005b000000ad0000005b0000008300000097000000020100005b000000c8000000ad000000ad00000097000000120000000c000000020000000d00
0000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c0000000000
00805600000030000000d5000000d1220000451100005225000005000000d9004e2541114e254111d522d900d522d9004e25250000000c000000080000802800
00000c00000003000000120000000c00000001000000250000000c00000005000080250000000c000000010000005400000094000000d104000075240000480d
000009260000010000008887873f8887873fd1040000752400000c0000004c000000000000000000000000000000000000000000000064000000500072006900
63006500560069007300690074006f007200f4000000a600000072000000c4000000dd000000fe00000072000000c60000007200000098000000e5000000a600
0000120000000c000000020000000d000000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00
000003000000250000000c000000000000805600000030000000d50000004a250000451100001d39000005000000d90019394111193941114e25d9004e25d900
1939250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c00000005000080250000000c000000020000005400
0000b40000003d010000ff260000f80c000093280000010000008887873f8887873f3d010000ff260000110000004c0000000000000000000000000000000000
0000000000007000000076006900730069007400280041006c0075006d0069006e0075006d00290020007b000000c50000005b000000ad0000005b0000008300
000097000000e40000005b000000d3000000440100005b000000d3000000d3000000440100009700000075000000d300000054000000d00000003d0100008f28
00009e100000232a0000010000008887873f8887873f3d0100008f280000160000004c0000000000000000000000000000000000000000000000780000002000
20002f002f00200050006500720066006f0072006d00200041006c0075006d0069006e0075006d002d007500000075000000970000009700000075000000c900
0000c60000008e00000075000000ca0000008e0000004401000075000000e40000005b000000d3000000440100005b000000d3000000d3000000440100009700
000054000000b80000003d0100001f2a0000330c0000b32b0000010000008887873f8887873f3d0100001f2a0000120000004c00000000000000000000000000
0000000000000000000070000000200020002f002f00200073007000650063006900660069006300200077006f0072006b007500000075000000970000009700
000075000000ad000000cf000000c6000000ad0000005b000000750000005b000000ad0000007500000011010000ca0000008e000000c5000000540000005400
00003d010000af2b00000f020000432d0000010000008887873f8887873f3d010000af2b0000010000004c000000000000000000000000000000000000000000
0000500000007d000000d300000054000000a00000003d0100003f2d0000110a0000d32e0000010000008887873f8887873f3d0100003f2d00000e0000004c00
000000000000000000000000000000000000000000006800000076006900730069007400280050006100700065007200290020007b00c50000005b000000ad00
00005b0000008300000097000000c9000000c8000000cf000000c60000008e0000009700000075000000d300000054000000c00000003d010000cf2e0000b70d
000063300000010000008887873f8887873f3d010000cf2e0000130000004c000000000000000000000000000000000000000000000074000000200020002f00
2f00200050006500720066006f0072006d002000500061007000650072002d0000007500000075000000970000009700000075000000c9000000c60000008e00
000075000000ca0000008e0000004401000075000000c9000000c8000000cf000000c60000008e0000009700000054000000b80000003d0100005f300000330c
0000f3310000010000008887873f8887873f3d0100005f300000120000004c000000000000000000000000000000000000000000000070000000200020002f00
2f00200073007000650063006900660069006300200077006f0072006b007500000075000000970000009700000075000000ad000000cf000000c6000000ad00
00005b000000750000005b000000ad0000007500000011010000ca0000008e000000c500000054000000540000003d010000ef3100000f020000833300000100
00008887873f8887873f3d010000ef310000010000004c0000000000000000000000000000000000000000000000500000007d000000d300000054000000a000
00003d0100007f330000dc09000013350000010000008887873f8887873f3d0100007f3300000e0000004c000000000000000000000000000000000000000000
00006800000076006900730069007400280047006c00610073007300290020007b00c50000005b000000ad0000005b0000008300000097000000020100005b00
0000c8000000ad000000ad0000009700000075000000d300000054000000c00000003d0100000f350000820d0000a3360000010000008887873f8887873f3d01
00000f350000130000004c000000000000000000000000000000000000000000000074000000200020002f002f00200050006500720066006f0072006d002000
47006c006100730073002d0000007500000075000000970000009700000075000000c9000000c60000008e00000075000000ca0000008e000000440100007500
0000020100005b000000c8000000ad000000ad0000009700000054000000b80000003d0100009f360000330c000033380000010000008887873f8887873f3d01
00009f360000120000004c000000000000000000000000000000000000000000000070000000200020002f002f00200073007000650063006900660069006300
200077006f0072006b007500000075000000970000009700000075000000ad000000cf000000c6000000ad0000005b000000750000005b000000ad0000007500
000011010000ca0000008e000000c500000054000000540000003d0100002f3800000f020000c3390000010000008887873f8887873f3d0100002f3800000100
00004c0000000000000000000000000000000000000000000000500000007d000000d3000000120000000c000000020000000d00000010000000000000000000
0000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c000000000000805600000030000000e50e
0000350a00001c1c0000b60c000005000000e90eb20c181cb20c181c390ae90e390ae90eb20c250000000c00000008000080280000000c000000030000001200
00000c00000001000000250000000c00000005000080250000000c00000001000000540000006c00000061130000d90b00009e1700006d0d0000010000008887
873f8887873f61130000d90b0000050000004c000000000000000000000000000000000000000000000058000000500061007000650072000000f4000000de00
0000e9000000dd000000a6000000120000000c000000020000000d000000100000000000000000000000260000001c0000000300000000000000080000000000
000000000000250000000c00000003000000250000000c000000000000805600000030000000e50e0000ae0c00001c1c00007112000005000000e90e6d12181c
6d12181cb20ce90eb20ce90e6d12250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c000000050000802500
00000c0000000200000054000000c00000004d0f0000630e0000581b0000f70f0000010000008887873f8887873f4d0f0000630e0000130000004c0000000000
000000000000000000000000000000000000740000006100630063006500700074002800560069007300690074006f00720020007600290020007b000000c800
0000ad000000ad000000c6000000cf0000008300000097000000e40000005b000000ad0000005b00000083000000ca0000008e00000075000000c50000007008
000026060f00d610574d4643010000000000010000000000000002000000b410000000000000b43000009700000075000000d300000054000000b40000004d0f
0000f30f0000b718000087110000010000008887873f8887873f4d0f0000f30f0000110000004c00000000000000000000000000000000000000000000007000
000020002000200076002e00760069007300690074002800740068006900730029003b000000750000007500000075000000c500000079000000c50000005b00
0000ad0000005b000000830000009700000083000000d30000005b000000ad000000970000009700000054000000540000004d0f0000831100001f1000001713
0000010000008887873f8887873f4d0f000083110000010000004c0000000000000000000000000000000000000000000000500000007d000000d30000001200
00000c000000020000000d000000100000000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c0000000300
0000250000000c000000000000805600000030000000651d0000350a00009c2a0000b60c000005000000691db20c982ab20c982a390a691d390a691db20c2500
00000c00000008000080280000000c00000003000000120000000c00000001000000250000000c00000005000080250000000c00000001000000540000006c00
00000c220000d90b0000f52500006d0d0000010000008887873f8887873f0c220000d90b0000050000004c000000000000000000000000000000000000000000
00005800000047006c0061007300730000000e01000072000000de000000c6000000c6000000120000000c000000020000000d00000010000000000000000000
0000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c000000000000805600000030000000651d
0000ae0c00009c2a00007112000005000000691d6d12982a6d12982ab20c691db20c691d6d12250000000c00000008000080280000000c000000030000001200
00000c00000001000000250000000c00000005000080250000000c0000000200000054000000c0000000cd1d0000630e0000d8290000f70f0000010000008887
873f8887873fcd1d0000630e0000130000004c000000000000000000000000000000000000000000000074000000610063006300650070007400280056006900
7300690074006f00720020007600290020007b000000c8000000ad000000ad000000c6000000cf0000008300000097000000e40000005b000000ad0000005b00
000083000000ca0000008e00000075000000c50000009700000075000000d300000054000000b4000000cd1d0000f30f00003727000087110000010000008887
873f8887873fcd1d0000f30f0000110000004c00000000000000000000000000000000000000000000007000000020002000200076002e007600690073006900
74002800740068006900730029003b000000750000007500000075000000c500000079000000c50000005b000000ad0000005b00000083000000970000008300
0000d30000005b000000ad00000097000000970000005400000054000000cd1d0000831100009f1e000017130000010000008887873f8887873fcd1d00008311
0000010000004c0000000000000000000000000000000000000000000000500000007d000000d3000000120000000c000000020000000d000000100000000000
000000000000120000000c00000001000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c00
00000500008057000000300000007c150000251d000089270000d9220000050000008527d5228527511f831e511f8015511f8015291d250000000c0000000800
0080280000000c00000003000000120000000c000000020000000d000000100000000000000000000000120000000c00000001000000260000001c0000000300
000000000000080000000000000000000000250000000c00000003000000250000000c00000005000080570000002c00000008150000c91b0000f81500002d1d
000004000000f415291d8015cd1b0c15291df415291d250000000c00000008000080280000000c00000003000000120000000c000000020000000d0000001000
00000000000000000000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c000000000000805600
00003000000029250000d1220000e129000031250000050000002d252d25dd292d25dd29d5222d25d5222d252d25250000000c00000008000080280000000c00
000003000000120000000c00000001000000250000000c00000005000080250000000c0000000100000054000000640000002926000065240000df280000f925
0000010000008887873f8887873f2926000065240000040000004c0000000000000000000000000000000000000000000000540000004500740063002e00e300
000098000000c400000078000000120000000c000000020000000d000000100000000000000000000000260000001c0000000300000000000000080000000000
000000000000250000000c00000003000000250000000c00000000000080560000003000000069120000d1220000d922000052250000050000006d124e25d522
4e25d522d5226d12d5226d124e25250000000c00000008000080280000000c00000003000000120000000c00000001000000250000000c000000050000802500
00000c00000001000000540000009c000000a115000075240000a01f000009260000010000008887873f8887873fa1150000752400000d0000004c0000000000
00000000000000000000000000000000000068000000570065006900670068007400560069007300690074006f007200000078010000dd00000072000000e900
0000ed00000098000000fe00000072000000c60000007200000098000000e5000000a6000000120000000c000000020000000d00000010000000000000000000
0000260000001c0000000300000000000000080000000000000000000000250000000c00000003000000250000000c0000000000008056000000300000006912
00004a250000d92200001d390000050000006d121939d5221939d5224e256d124e256d121939250000000c00000008000080280000000c000000030000001200
00000c00000001000000250000000c00000005000080250000000c0000000200000054000000b4000000d1120000ff2600008c1e000093280000010000008887
873f8887873fd1120000ff260000110000004c00000000000000000000000000000000000000000000007000000076006900730069007400280041006c007500
6d0069006e0075006d00290020007b000000c50000005b000000ad0000005b0000008300000097000000e40000005b000000d3000000440100005b000000d300
0000d3000000440100009700000075000000d300000054000000d0000000d11200008f28000032220000232a0000010000008887873f8887873fd11200008f28
0000160000004c000000000000000000000000000000000000000000000078000000200020002f002f00200050006500720066006f0072006d00200041006c00
75006d0069006e0075006d002d007500000075000000970000009700000075000000c9000000c60000008e00000075000000ca0000008e000000440100007500
0000e40000005b000000d3000000440100005b000000d3000000d3000000440100009700000054000000b8000000d11200001f2a0000c71d0000b32b00000100
00008887873f8887873fd11200001f2a0000120000004c000000000000000000000000000000000000000000000070000000200020002f002f00200073007000
650063006900660069006300200077006f0072006b007500000075000000970000009700000075000000ad000000cf000000c6000000ad0000005b0000007500
00005b000000ad0000007500000011010000ca0000008e000000c50000005400000054000000d1120000af2b0000a3130000432d0000010000008887873f8887
873fd1120000af2b0000010000004c0000000000000000000000000000000000000000000000500000007d000000d300000054000000a0000000d11200003f2d
0000a51b0000d32e0000010000008887873f8887873fd11200003f2d00000e0000004c0000000000000000000000000000000000000000000000680000007600
6900730069007400280050006100700065007200290020007b00c50000005b000000ad0000005b0000008300000097000000c9000000c8000000cf000000c600
00008e0000009700000075000000d300000054000000c0000000d1120000cf2e00004b1f000063300000010000008887873f8887873fd1120000cf2e00001300
00004c000000000000000000000000000000000000000000000074000000200020002f002f00200050006500720066006f0072006d0020005000610070006500
72002d0000007500000075000000970000009700000075000000c9000000c60000008e00000075000000ca0000008e0000004401000075000000c9000000c800
0000cf000000c60000008e0000009700000054000000b8000000d11200005f300000c71d0000f3310000010000008887873f8887873fd11200005f3000001200
00004c000000000000000000000000000000000000000000000070000000200020002f002f00200073007000650063006900660069006300200077006f007200
6b007500000075000000970000009700000075000000ad000000cf000000c6000000ad0000005b000000750000005b000000ad0000007500000011010000ca00
00008e000000c50000005400000054000000d1120000ef310000a313000083330000010000008887873f8887873fd1120000ef310000010000004c0000000000
000000000000000000000000000000000000500000007d000000d300000054000000a0000000d11200007f330000701b000013350000010000008887873f8887
873fd11200007f3300000e0000004c00000000000000000000000000000000000000000000006800000076006900730069007400280047006c00610073007300
290020007b00c50000005b000000ad0000005b0000008300000097000000020100005b000000c8000000ad000000ad0000009700000075000000d30000005400
0000c0000000d11200000f350000161f0000a3360000010000008887873f8887873fd11200000f350000130000004c0000000000000000000000000000000000
00000000000074000000200020002f002f00200050006500720066006f0072006d00200047006c006100730073002d004f707500000075000000970000009700
000075000000c9000000c60000008e00000075000000ca0000008e0000004401000075000000020100005b000000c8000000ad000000ad000000970000005400
0000b8000000d11200009f360000c71d000033380000010000008887873f8887873fd11200009f360000120000004c0000000000000000000000000000000000
00000000000070000000200020002f002f00200073007000650063006900660069006300200077006f0072006b00750000007500000097000000970000007500
0000ad000000cf000000c6000000ad0000005b000000750000005b000000ad0000007500000011010000ca0000008e000000c50000005400000054000000d112
00002f380000a3130000c3390000010000008887873f8887873fd11200002f380000010000004c00000000000000000000000000000000000000000000005000
00007d006379d30000000e000000140000000000000010000000140000000400000003010800050000000b0200000000050000000c02f339332b050000000102
f4831d0108000000fa02050000000000ffffff00040000002d01000007000000fc020000ffffff000000040000002d0101000e000000240305003000af39092b
af39092b3000300030003000af3907000000fc020100000000000000040000002d010200040000000201010008000000fa020000080000000000000004000000
2d010300040000002d0102000e000000250305007007390a7007e107780ee1078015e1078015e506040000002d01000004000000f00103000400000002010200
040000000201010008000000fa0200000800000000000000040000002d010300040000002d0102000c00000025030400f415e506801589050c15e506f415e506
040000002d01000004000000f0010300040000002e0118000400000002010200040000000201010008000000fa0200000800000000000000040000002d010300
040000002d0102000a000000250303008015390a8015e1078015e506040000002d01000004000000f00103000400000002010200040000000201010008000000
fa0200000800000000000000040000002d010300040000002d0102000c00000025030400f415e506801589050c15e506f415e506040000002d01000004000000
f0010300040000000201020008000000fa0200000800000000000000040000002d010300040000002d0101000e000000240305000210ee02ff1aee02ff1ad900
0210d9000210ee02040000002d01000004000000f00103000400000002010100040000002d0102001c000000fb024d01bd0000000000bc020000000000000022
56657264616e6100000000000000000000000000000000000000000000000000040000002d0103000f000000320a4702731305000000547261736800e300a600
de00c600ed00040000000201020008000000fa0200000800000000000000040000002d010400040000002d0101000e0000002403050002108905ff1a8905ff1a
ee020210ee0202108905040000002d01000004000000f00104000400000002010100040000002d0102001c000000fb024d01a900000000009001000000000000
002256657264616e6100030302000001010000f00300000000000000000000010100040000002d0104001e000000320a9f0466100f0000006163636570742856
697369746f722900c800ad00ad00c600cf0083009700e4005b00ad005b008300ca008e009700040000000201020008000000fa02000008000000000000000400
00002d010500040000002d0101000e00000024030500d900b20c080eb20c080e390ad900390ad900b20c040000002d01000004000000f0010500040000000201
0100040000002d010200040000002d01030013000000320ad90bb90308000000416c756d696e756d03017200ed0060017200ed00ed0060010400000002010200
08000000fa0200000800000000000000040000002d010500040000002d0101000e00000024030500d9006d12080e6d12080eb20cd900b20cd9006d1204000000
2d01000004000000f00105000400000002010100040000002d010200040000002d01040024000000320a630e3d01130000006163636570742856697369746f72
207629207b00c800ad00ad00c600cf0083009700e4005b00ad005b008300ca008e007500c50097007500d30021000000320af30f3d0111000000202020762e76
697369742874686973293b20750075007500c5007900c5005b00ad005b00830097008300d3005b00ad009700970009000000320a83113d01010000007d56d300
0400000002010200040000000201010008000000fa0200000800000000000000040000002d010500040000002d0102000e000000250305000124390a0124e107
c11ce1078015e1078015e506040000002d01000004000000f00105000400000002010200040000000201010008000000fa020000080000000000000004000000
2d010500040000002d0102000c00000025030400f415e506801589050c15e506f415e506040000002d01000004000000f0010500040000000201020004000000
0201010008000000fa0200000800000000000000040000002d010500040000002d0102000e000000250305000d09d5220d09511f470f511f8015511f8015291d
040000002d01000004000000f00105000400000002010200040000000201010008000000fa0200000800000000000000040000002d010500040000002d010200
0c00000025030400f415291d8015cd1b0c15291df415291d040000002d01000004000000f00105000400000002010200040000000201010008000000fa020000
0800000000000000040000002d010500040000002d0102000e00000025030500a11ad522a11a511f1118511f8015511f8015291d040000002d01000004000000
f00105000400000002010200040000000201010008000000fa0200000800000000000000040000002d010500040000002d0102000c00000025030400f415291d
8015cd1b0c15291df415291d040000002d01000004000000f0010500040000000201020008000000fa0200000800000000000000040000002d01050004000000
2d0101000e00000024030500e20d12161e1d12161e1de413e20de413e20d1216040000002d01000004000000f00105000400000002010100040000002d010200
040000002d01030012000000320a5f151b130700000056697369746f7200fe007200c60072009800e500a600040000000201020008000000fa02000008000000
00000000040000002d010500040000002d0101000e00000024030500e20dcd1b1e1dcd1b1e1d1216e20d1216e20dcd1b040000002d01000004000000f0010500
0400000002010100040000002d010200040000002d0104001e000000320ac317460e0f000000766973697428416c756d696e756d2900c5005b00ad005b008300
9700e4005b00d30044015b00d300d3004401970019000000320a5319460e0c000000766973697428506170657229c5005b00ad005b0083009700c900c800cf00
c6008e00970019000000320ae31a460e0c000000766973697428476c61737329c5005b00ad005b008300970002015b00c800ad00ad0097000400000002010200
08000000fa0200000800000000000000040000002d010500040000002d0101000e00000024030500d9004e2541114e254111d522d900d522d9004e2504000000
2d01000004000000f00105000400000002010100040000002d010200040000002d01030019000000320a7524d1040c000000507269636556697369746f72f400
a6007200c400dd00fe007200c60072009800e500a600040000000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e00
000024030500d90019394111193941114e25d9004e25d9001939040000002d01000004000000f00105000400000002010100040000002d010200040000002d01
040021000000320aff263d0111000000766973697428416c756d696e756d29207b20c5005b00ad005b0083009700e4005b00d30044015b00d300d30044019700
7500d30028000000320a8f283d011600000020202f2f20506572666f726d20416c756d696e756d2d75007500970097007500c900c6008e007500ca008e004401
7500e4005b00d30044015b00d300d3004401970022000000320a1f2a3d011200000020202f2f20737065636966696320776f726b75007500970097007500ad00
cf00c600ad005b0075005b00ad0075001101ca008e00c50009000000320aaf2b3d01010000007d56d3001c000000320a3f2d3d010e0000007669736974285061
70657229207bc5005b00ad005b0083009700c900c800cf00c6008e0097007500d30024000000320acf2e3d011300000020202f2f20506572666f726d20506170
65722d7575007500970097007500c900c6008e007500ca008e0044017500c900c800cf00c6008e00970022000000320a5f303d011200000020202f2f20737065
636966696320776f726b75007500970097007500ad00cf00c600ad005b0075005b00ad0075001101ca008e00c50009000000320aef313d01010000007d56d300
1c000000320a7f333d010e000000766973697428476c61737329207bc5005b00ad005b008300970002015b00c800ad00ad0097007500d30024000000320a0f35
3d011300000020202f2f20506572666f726d20476c6173732d7575007500970097007500c900c6008e007500ca008e004401750002015b00c800ad00ad009700
22000000320a9f363d011200000020202f2f20737065636966696320776f726b75007500970097007500ad00cf00c600ad005b0075005b00ad0075001101ca00
8e00c50009000000320a2f383d01010000007d56d300040000000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e00
000024030500e90eb20c181cb20c181c390ae90e390ae90eb20c040000002d01000004000000f00105000400000002010100040000002d010200040000002d01
03000f000000320ad90b611305000000506170657200f400de00e900dd00a600040000000201020008000000fa0200000800000000000000040000002d010500
040000002d0101000e00000024030500e90e6d12181c6d12181cb20ce90eb20ce90e6d12040000002d01000004000000f0010500040000000201010004000000
2d010200040000002d01040024000000320a630e4d0f130000006163636570742856697369746f72207629207b75c800ad00ad00c600cf0083009700e4005b00
ad005b008300ca008e007500c50097007500d30021000000320af30f4d0f11000000202020762e76697369742874686973293b20750075007500c5007900c500
5b00ad005b00830097008300d3005b00ad009700970009000000320a83114d0f010000007d56d300040000000201020008000000fa0200000800000000000000
040000002d010500040000002d0101000e00000024030500691db20c982ab20c982a390a691d390a691db20c040000002d01000004000000f001050004000000
02010100040000002d010200040000002d0103000f000000320ad90b0c2205000000476c617373000e017200de00c600c600040000000201020008000000fa02
00000800000000000000040000002d010500040000002d0101000e00000024030500691d6d12982a6d12982ab20c691db20c691d6d12040000002d0100000400
0000f00105000400000002010100040000002d010200040000002d01040024000000320a630ecd1d130000006163636570742856697369746f72207629207b75
c800ad00ad00c600cf0083009700e4005b00ad005b008300ca008e007500c50097007500d30021000000320af30fcd1d11000000202020762e76697369742874
686973293b20750075007500c5007900c5005b00ad005b00830097008300d3005b00ad009700970009000000320a8311cd1d010000007d56d300040000000201
0200040000000201010008000000fa0200000800000000000000040000002d010500040000002d0102000e000000250305008527d5228527511f831e511f8015
511f8015291d040000002d01000004000000f00105000400000002010200040000000201010008000000fa0200000800000000000000040000002d0105000400
00002d0102000c00000025030400f415291d8015cd1b0c15291df415291d040000002d01000004000000f0010500040000000201020008000000fa0200000800
000000000000040000002d010500040000002d0101000e000000240305002d252d25dd292d25dd29d5222d25d5222d252d25040000002d01000004000000f001
05000400000002010100040000002d010200040000002d0103000d000000320a65242926040000004574632ee3009800c4007800040000000201020008000000
fa0200000800000000000000040000002d010500040000002d0101000e000000240305006d124e25d5224e25d522d5226d12d5226d124e25040000002d010000
04000000f00105000400000002010100040000002d010200040000002d0103001b000000320a7524a1150d00000057656967687456697369746f72117801dd00
7200e900ed009800fe007200c60072009800e500a600040000000201020008000000fa0200000800000000000000040000002d010500040000002d0101000e00
0000240305006d121939d5221939d5224e256d124e256d121939040000002d01000004000000f00105000400000002010100040000002d010200040000002d01
040021000000320aff26d11211000000766973697428416c756d696e756d29207b20c5005b00ad005b0083009700e4005b00d30044015b00d300d30044019700
7500d30028000000320a8f28d1121600000020202f2f20506572666f726d20416c756d696e756d2d75007500970097007500c900c6008e007500ca008e004401
7500e4005b00d30044015b00d300d3004401970022000000320a1f2ad1121200000020202f2f20737065636966696320776f726b75007500970097007500ad00
cf00c600ad005b0075005b00ad0075001101ca008e00c50009000000320aaf2bd112010000007d56d3001c000000320a3f2dd1120e0000007669736974285061
70657229207bc5005b00ad005b0083009700c900c800cf00c6008e0097007500d30024000000320acf2ed1121300000020202f2f20506572666f726d20506170
65722d7575007500970097007500c900c6008e007500ca008e0044017500c900c800cf00c6008e00970022000000320a5f30d1121200000020202f2f20737065
636966696320776f726b75007500970097007500ad00cf00c600ad005b0075005b00ad0075001101ca008e00c50009000000320aef31d112010000007d56d300
1c000000320a7f33d1120e000000766973697428476c61737329207bc5005b00ad005b008300970002015b00c800ad00ad0097007500d30024000000320a0f35
d1121300000020202f2f20506572666f726d20476c6173732d7575007500970097007500c900c6008e007500ca008e004401750002015b00c800ad00ad009700
22000000320a9f36d1121200000020202f2f20737065636966696320776f726b75007500970097007500ad00cf00c600ad005b0075005b00ad0075001101ca008e00c50009000000320a2f38d112010000007d56d300030000000000}}{
\par }\pard \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 {\v #[BT_537]#}{Now, if }{\b v}{ is a }{\b Visitable }{reference to an }{\b Aluminum}{ object, the code: }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_419" \\o "A_419" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400310039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {PriceVisitor pv = PriceVisitor()
\par v.accept(pv)
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_538]#
\par #[BT_539]#}{uses double dispatching to cause two polymorphic method calls: the first one to select }{\b Aluminum}{\rquote s version of }{\b accept(\~)}{, and the second one within }{\b accept(\~)}{ when the specific version of }{\b visit(\~)}{
 is called dynamically using the base-class }{\b Visitor}{ reference }{\b v}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_420" \\o "A_420" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400320030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_540]#}{This configuration means that new functionality can be added to the system in the form of new subclasses of }{\b Visitor}{. The }{\b Trash }{hierarchy doesn\rquote t need to be touched. This is the prime benefit of the visito
r pattern: you can add new polymorphic functionality to a class hierarchy without touching that hiera}{r}{chy (once the }{\b accept(\~)}{
 methods have been installed). Note that the benefit is helpful here but not exactly what we started out to accomplish, so at first blush you might decide that this isn\rquote t the desired solution. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_421" \\o "A_421" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400320031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_541]#}{But look at one thing that\rquote s been accomplished: the visitor solution avoids sorting from the master }{\b Trash}{
 sequence into individual typed sequences. Thus, you can leave everything in the single master sequence and simply pass through that sequence using the appropriate visitor to accomplish the goal. Although this behavior seems to be a
 side effect of visitor, it does give us what we want (avoiding RTTI). }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_422" \\o "A_422" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400320032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_542]#}{The }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {double dispatching}}}{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {dispatching\: double dispatching}}}{d
ouble dispatching in the visitor pattern takes care of determining both the type of }{\b Trash }{and the type of }{\b Visitor}{.}{\b  }{In the following example, there are two implementations of }{\b Visitor}{: }{\b PriceVisitor}{
 to both determine and sum the price, and }{\b WeightVisitor}{ to keep track of the weights. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_423" \\o "A_423" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400320033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_543]#}{You can see all of this implemented in the new, improved version of the rec}{y}{cling program. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_424" \\o "A_424" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400320034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_544]#}{As with }{\b DoubleDispatch.py}{, the }{\b Trash}{ class is left alone and a new interface is created to add the }{\b accept(\~)}{ method: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/B
ackTalk/FindPage/A_425" \\o "A_425" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400320035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trashvisitor:Visitable.py
\par # An class to add visitor functionality 
\par # to the Trash hierarchy without 
\par # modifying the base class.
\par 
\par class Visitable:
\par   # The method:
\par   def accept(self, Visitor v)
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_545]#
\par #[BT_546]#}{Since there\rquote s nothing concrete in the }{\b Visitor}{ base class, it can be created as an }{\b interface}{: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_426" \\o "A_426" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400320036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trashvisitor:Visitor.py
\par # The base class for visitors.
\par 
\par class Visitor:
\par   def visit(self, Aluminum a)
\par   def visit(self, Paper p)
\par   def visit(self, Glass g)
\par   def visit(self, Cardboard c)
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_547]#
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420143}
A Reflective Decorator{\*\bkmkend _Toc534420143}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_548]#}{At this point, you }{\i could }{
 follow the same approach that was used for double dispatching and create new subtypes of }{\b Aluminum}{,}{\b  Paper}{,}{\b  Glass, }{and}{\b  Cardboard}{ that implement the }{\b accept(\~)}{ method. For example, the new }{\b Visitable}{ }{\b Aluminum}{
 would look like this: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_427" \\o "A_427" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400320037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trashvisitor:VAluminum.py
\par # Taking the previous approach of creating a
\par # specialized Aluminum for the visitor pattern.
\par 
\par class VAluminum(Aluminum) 
\par     implements Visitable:
\par   def __init__(self, double wt): .__init__(wt) 
\par   def accept(self, Visitor v):
\par     v.visit(self)
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_549]#
\par #[BT_550]#}{However, we seem to be encountering an \'93explosion of interfaces:\'94 basic }{\b Trash}{, special versions for double dispatching, and now more special versions for visitor. Of course, this \'93explosion of interfaces\'94 is arbitrary
\emdash one could simply put the additional methods in the }{\b Trash}{ class. If we ignore that we can instead see an opportunity to use the }{\i Decorator}{ pattern: it seems like it should be possible to create a }{\i Decorator}{ 
that can be wrapped around an ordinary }{\b Trash}{ object and will produce the same interface as }{\b Trash}{ and add the extra }{\b accept(\~)}{ method. In fact, it\rquote s a perfect example of the value of }{\i Decorator}{. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_428" \\o "A_428" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400320038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_551]#}{The double dispatch creates a problem, however. Since it relies on overloading of both }{\b accept(\~) }{and }{\b visit(\~)}{,}{\b  }{it would seem to require specialized code for each different version of the }{\b accept(\~)}{ method. Wi
th C++ templates, this would be fairly easy to accomplish (since templates automatically generate type-specialized code) but Python has no such mechanism\emdash 
at least it does not appear to. However, reflection allows you to determine type information at run time, and it turns out to solve many problems that would seem to require templates (albeit not as simply). Here\rquote s the decorator that does the trick}
{\cs45\super \chftn {\footnote \pard\plain \s44\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs20\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\cs45\super \chftn }{ }{\v #[BT_F8]#}{
This was a solution created by Jaroslav Tulach in a design patterns class that I gave in Prague.}}}{: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_429" \\o "A_429" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400320039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12
:trashvisitor:VisitableDecorator.py
\par # A decorator that adapts the generic Trash
\par # classes to the visitor pattern.
\par 
\par class VisitableDecorator
\par extends Trash implements Visitable:
\par   private Trash delegate
\par   private Method dispatch
\par   def __init__(self, Trash t):
\par     delegate = t
\par     try:
\par       dispatch = Visitor.class.getMethod (
\par         "visit", Class[]: t.getClass() 
\par       )
\par      catch (Exception ex):
\par       ex.printStackTrace()
\par 
\par   def getValue(self):
\par     return delegate.getValue()
\par 
\par   def getWeight(self):
\par     return delegate.getWeight()
\par 
\par   def accept(self, Visitor v):
\par     try:
\par       dispatch.invoke(v, Object[]\{delegate)
\par      catch (Exception ex):
\par       ex.printStackTrace()
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_552]#
\par #[BT_553]#}{[[ Description of Reflection use  ]] }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_430" \\o "A_430" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400330030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_554]#}{The only other tool we need is a new type of }{\b Fillable }{adapter that automatically decorates the objects as they are being created from the original }{\b Trash.dat}{ file. But th
is might as well be a decorator itself, decorating any kind of }{\b Fillable}{: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_431" \\o "A_431" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400330031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trashvisitor:FillableVisitor.py 

\par # Adapter Decorator that adds the visitable 
\par # decorator as the Trash objects are 
\par # being created.
\par 
\par class FillableVisitor
\par implements Fillable:
\par   private Fillable f
\par   def __init__(self, Fillable ff): f = ff 
\par   def addTrash(self, Trash t):
\par     f.addTrash(VisitableDecorator(t))
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_555]#
\par #[BT_556]#}{Now you can wrap it around any kind of existing }{\b Fillable}{, or any new ones that haven\rquote t yet been created. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_432" \\o "A_432" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400330032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_557]#}{The rest of the program creates specific }{\b Visitor}{ types and sends them through a single list of }{\b Trash}{ objects: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_433" \\
o "A_433" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400330033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:trashvisitor:TrashVisitor.py 

\par # The "visitor" pattern with VisitableDecorators.
\par 
\par # Specific group of algorithms packaged
\par # in each implementation of Visitor:
\par class PriceVisitor(Visitor):
\par   private double alSum # Aluminum
\par   private double pSum # Paper
\par   private double gSum # Glass
\par   private double cSum # Cardboard
\par   def visit(self, Aluminum al):
\par     double v = al.getWeight() * al.getValue()
\par     print "value of Aluminum= " + v
\par     alSum += v
\par 
\par   def visit(self, Paper p):
\par     double v = p.getWeight() * p.getValue()
\par     print "value of Paper= " + v
\par     pSum += v
\par 
\par   def visit(self, Glass g):
\par     double v = g.getWeight() * g.getValue()
\par     print "value of Glass= " + v
\par     gSum += v
\par 
\par   def visit(self, Cardboard c):
\par     double v = c.getWeight() * c.getValue()
\par     print "value of Cardboard = " + v
\par     cSum += v
\par 
\par   def total(self):
\par     print (
\par       "Total Aluminum: $" + alSum +
\par       "\\n Total Paper: $" + pSum + 
\par       "\\nTotal Glass: $" + gSum + 
\par       "\\nTotal Cardboard: $" + cSum +
\par       "\\nTotal: $" + 
\par         (alSum + pSum + gSum + cSum))
\par 
\par class WeightVisitor(Visitor):
\par   private double alSum # Aluminum
\par   private double pSum # Paper
\par   private double gSum # Glass
\par   private double cSum # Cardboard
\par   def visit(self, Aluminum al):
\par     alSum += al.getWeight()
\par     print ("weight of Aluminum = "
\par         + al.getWeight())
\par 
\par   def visit(self, Paper p):
\par     pSum += p.getWeight()
\par     print ("weight of Paper = "
\par         + p.getWeight())
\par 
\par   def visit(self, Glass g):
\par     gSum += g.getWeight()
\par     print ("weight of Glass = "
\par         + g.getWeight())
\par 
\par   def visit(self, Cardboard c):
\par     cSum += c.getWeight()
\par     print ("weight of Cardboard = "
\par         + c.getWeight())
\par 
\par   def total(self):
\par     print (
\par       "Total weight Aluminum: "  + alSum +
\par       "\\nTotal weight Paper: " + pSum +
\par       "\\nTotal weight Glass: " + gSum +
\par       "\\nTotal weight Cardboard: " + cSum +
\par       "\\nTotal weight: " + 
\par         (alSum + pSum + gSum + cSum))
\par 
\par class TrashVisitor(UnitTest):
\par   Collection bin = ArrayList()
\par   PriceVisitor pv = PriceVisitor()
\par   WeightVisitor wv = WeightVisitor()
\par   def __init__(self):
\par     ParseTrash.fillBin("../trash/Trash.dat", 
\par       FillableVisitor(
\par         FillableCollection(bin)))
\par 
\par   def test(self):
\par     Iterator it = bin.iterator()
\par     while(it.hasNext()):
\par       Visitable v = (Visitable)it.next()
\par       v.accept(pv)
\par       v.accept(wv)
\par 
\par     pv.total()
\par     wv.total()
\par 
\par   def main(self, String args[]):
\par     TrashVisitor().test()
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_558]#
\par #[BT_559]#}{In }{\b Test(\~)}{, note how visitability is added by simply creating a different kind of bin using the decorator. Also notice that the }{\b FillableCollection}{ adapter has the appearance of being used as a decorator (for }{\b ArrayList}{
) in this situation. However, it completely changes the interface of the }{\b ArrayList}{, whereas the definition of }{\i Decorator}{ is that the interface of the decorated class must still be there after decoration. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_434" \\o "A_434" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400330034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_560]#}{Note that the shape of the client code (shown in the }{\b Test}{ class) has changed again, from the original approaches to the problem. Now there\rquote s only a single }{\b Trash}{ bin. The two }{\b Visitor}{
 objects are accepted into every element in the s}{e}{quence, and they perform their operations. The visitors keep their own inte}{r}{nal data to tally the total weights and prices. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net
/Books/TIPython/BackTalk/FindPage/A_435" \\o "A_435" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400330035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_561]#}{Finally, there\rquote s no run time type identification other than the inevitable cast to }{\b Trash}{ when pulling things out of the sequence. This, too, could be elim}{i}{nated with the implementation of parameterized types in Java. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_436" \\o "A_436" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400330036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_562]#}{One way you can distinguish this solution from the double dispatching sol}{u}{tion described previously is to note that, in the double dispatching solution, only one of the overloaded methods, }{\b add(\~)}{, was overridden when each su}{
b}{class was created, while here }{\i each}{ one of the overloaded }{\b visit(\~)}{ methods is overridden in every subclass of }{\b Visitor}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_437" \\
o "A_437" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400330037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420144}
More coupling?{\*\bkmkend _Toc534420144}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_563]#}{There\rquote s a lot more code here, and there\rquote 
s definite coupling between the }{\b Trash}{ hierarchy and the }{\b Visitor}{ hierarchy. However, there\rquote s also high cohesion within the respective sets of classes: they each do only one thing (}{\b Trash }{d}{e}{scribes Trash, while }{\b Visitor }{
describes actions performed on }{\b Trash}{), which is an indicator of a good design. Of course, in this case it works well only if you\rquote re adding new }{\b Visitor}{s, but it gets in the way when you add new types of }{\b Trash}{. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_438" \\o "A_438" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400330038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_564]#}{Low coupling between classes and high cohesion within a class is definitely an important design goal. Applied mindlessly, though, it can prevent you from achieving a more elegant design. It seems that some classes i}{n}{
evitably have a certain intimacy with each other. These often occur in pairs that could perhaps be called }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {couplet}}}{\i couplets}{; for example, containers and iterators. The }{\b Trash-Visitor}{ pair above appears to be another such couplet. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_439" \\o "A_439" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400330039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc375545419}
{\*\bkmkstart _Toc476705927}{\*\bkmkstart _Toc534420145}RTTI considered harmful?{\*\bkmkend _Toc476705927}{\*\bkmkend _Toc534420145}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_565]#}{Va
rious designs in this chapter attempt to remove RTTI, which might give you the impression that it\rquote s \'93considered harmful\'94 (the condemnation used for poor, ill-fated }{\b goto}{, which was thus never put into Java). This isn\rquote 
t true; it is the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {RTTI\: misuse of RTTI}}}{\i misuse}{
 of RTTI that is the problem. The reason our designs removed RTTI is b}{e}{cause the misapplication of that feature prevented }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 
\v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {extensible}}}{extensibility, while the stated goal was to be able to add a new type to the system with as little imp
act on surrounding code as possible. Since RTTI is often misused by having it look for every single type in your system, it causes code to be non-extensible: when you add a new type, you have to go hunting for all the code in which RTTI is used, and if yo
u miss any you won\rquote t get help from the compiler. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_440" \\o "A_440" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400340030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_566]#}{However, RTTI doesn\rquote t automatically create non-extensible code. Let\rquote s revisit the trash recycler once more. This time, a new tool will be introduced, which I call a }{\b TypeMap}{. It contains a }{\b HashMap}{ that holds }{
\b ArrayList}{s, but the interface is simple: you can }{\b add(\~)}{ a new object, and you can }{\b get(\~)}{ an }{\b ArrayList}{ containing all the objects of a particular type. The keys for the contained }{\b HashMap}{ are the types in the associated }{
\b ArrayList}{. The beauty of this design (suggested by Larry O\rquote Brien) is that the }{\b TypeMap}{ dynamically adds a new pair whenever it encounters a new type, so whenever you add a new type to
 the system (even if you add the new type at run time), it adapts. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_441" \\o "A_441" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400340031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_567]#}{Our example will again build on the structure of the }{\b Trash}{ types in }{\b package c12.Trash}{ (and the }{\b Trash.dat}{ file used there can be used here without change): }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_442" \\o "A_442" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400340032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c12:dynatrash:DynaTrash.py 
\par # Using a Map of Lists and RTTI
\par # to automatically sort trash into
\par # ArrayLists. This solution, despite the
\par # use of RTTI, is extensible.
\par 
\par # Generic TypeMap works in any situation:
\par class TypeMap:
\par   private Map t = HashMap()
\par   def add(self, Object o):
\par     Class type = o.getClass()
\par     if(t.has_key(type))
\par       ((List)t.get(type)).add(o)
\par     else:
\par       List v = ArrayList()
\par       v.add(o)
\par       t.put(type,v)
\par 
\par   def get(self, Class type):
\par     return (List)t.get(type)
\par 
\par   def keys(self): 
\par     return t.keySet().iterator() 
\par 
\par # Adapter class to allow callbacks
\par # from ParseTrash.fillBin():
\par class TypeMapAdapter(Fillable):
\par   TypeMap map
\par   def __init__(self, TypeMap tm): map = tm 
\par   def addTrash(self, Trash t): map.add(t) 
\par 
\par class DynaTrash(UnitTest):
\par   TypeMap bin = TypeMap()
\par   def __init__(self):
\par     ParseTrash.fillBin("../trash/Trash.dat", 
\par       TypeMapAdapter(bin))
\par 
\par   def test(self):
\par     Iterator keys = bin.keys()
\par     while(keys.hasNext())
\par       Trash.sumValue(
\par         bin.get((Class)keys.next()).iterator())
\par 
\par   def main(self, String args[]):
\par     DynaTrash().test()
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_568]#
\par #[BT_569]#}{Although powerful, the definition for }{\b TypeMap}{ is simple. It contains a }{\b HashMap}{, and the }{\b add(\~)}{ method does most of the work. When you }{\b add(\~)}{ a new object, the reference for the }{\b Class}{
 object for that type is extracted. This is used as a key to determine whether an }{\b ArrayList}{ holding objects of that type is already present in the }{\b HashMap}{. If so, that }{\b ArrayList}{ is extracted and the object is added to the }{\b 
ArrayList}{. If not, the }{\b Class}{ object and a new }{\b ArrayList}{ are added as a key-value pair. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_443" \\o "A_443" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400340033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_570]#}{You can get an }{\b Iterator}{ of all the }{\b Class}{ objects from }{\b keys(\~)}{, and use each }{\b Class}{ object to fetch the corresponding }{\b ArrayList}{ with }{\b get(\~)}{. And that\rquote s all there is to it. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_444" \\o "A_444" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400340034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_571]#}{The }{\b filler(\~)}{ method is interesting because it takes advantage of the design of }{\b ParseTrash.fillBin(\~)}{, which doesn\rquote t just try to fill an }{\b ArrayList}{ but instead an}{y}{thing that implements the }{\b Fillable}{
 interface with its }{\b addTrash(\~)}{ method. All }{\b filler(\~)}{ needs to do is to return a reference to an }{\b interface}{ that implements }{\b Fill}{\b a}{\b ble}{, and then this reference can be used as an argument to }{\b fillBin(\~)}{
 like this: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_445" \\o "A_445" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400340035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {
ParseTrash.fillBin("Trash.dat", bin.filler())
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_572]#
\par #[BT_573]#}{To produce this reference, an }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {anonymous inner class}
}}{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {inner class\: anonymous}}}{\pard\plain 
\ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {class\: anonymous inner class}}}{\i anonymous inner class}{
 (described in Chapter 8 of }{\i Thinking in Java, 2}{\i\super nd}{\i  edition}{) is used. You never need a named class to implement }{\b Fillable}{, you just need a reference to an object of that class, thus this is an appropriate use of anon}{y}{
mous inner classes. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_446" \\o "A_446" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400340036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_574]#}{An interesting thing about this design is that even though it wasn\rquote t created to handle the sorting, }{\b fillBin(\~)}{ is performing a sort every time it inserts a }{\b Trash}{ object into }{\b bin}{. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_447" \\o "A_447" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400340037000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_575]#}{Much of }{\b class DynaTrash}{ should be familiar from the previous examples. This time, instead of placing the new }{\b Trash}{ objects into a }{\b bin}{ of type }{\b ArrayList}{, the }{\b bin}{ is of type }{\b TypeMap}{
, so when the trash is thrown into }{\b bin}{ it\rquote s immediately sorted by }{\b TypeMap}{\rquote s internal sorting mechanism. Stepping through the }{\b TypeMap}{ and operating on each individual }{\b ArrayList}{ becomes a simple matter. }
{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_448" \\o "A_448" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400340038000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_576]#
\par #[BT_577]#}{As you can see, adding a new type to the system won\rquote t affect this code at all, and the code in }{\b TypeMap}{
 is completely independent. This is certainly the smallest solution to the problem, and arguably the most elegant as well. It does rely heavily on RTTI, but notice that each key-value pair in the }{\b HashMap}{ is looking for only one type. In a}{d}{
dition, there\rquote s no way you can \'93forget\'94 to add the proper code to this system when you add a new type, since there isn\rquote t any code you need to add. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/Ba
ckTalk/FindPage/A_449" \\o "A_449" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400340039000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc476705928}
{\*\bkmkstart _Toc534420146}Summary{\*\bkmkend _Toc375545419}{\*\bkmkend _Toc476705928}{\*\bkmkend _Toc534420146}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_578]#}{Coming up with a design such as }{\b TrashVisitor.py }{
that contains a larger amount of code than the earlier designs can seem at first to be counterpr}{o}{ductive. It pays to notice what you\rquote re trying to accomplish with various d}{e}{signs. Design patterns in general strive to }{\i 
separate the things that change from the things that stay the same}{. The \'93things that change\'94 can refer to many di}{f}{ferent kinds of changes. Perhaps the change occurs because the prog
ram is placed into a new environment or because something in the current enviro}{n}{ment changes (this could be: \'93The user wants to add a new shape to the di}{a}{gram currently on the screen\'94
). Or, as in this case, the change could be the evolution of the code body. While previous versions of the trash sorting example emphasized the addition of new }{\i types}{ of }{\b Trash }{to the system, }{\b TrashVis}{\b i}{\b tor.py}{
 allows you to easily add new }{\i functionality}{ without disturbing the }{\b Trash}{ hierarchy. There\rquote s more code in }{\b TrashVisitor.py}{, but adding new functionality to }{\b Visitor}{ is cheap. If this is something that happens a lot, then it
\rquote s worth the extra effort and code to make it happen more easily. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_450" \\o "A_450" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400350030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_579]#}{The discovery of the }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {vector of change}}}{
vector of change is no trivial matter; it\rquote s not something that an analyst can usually detect before the program sees its initial design. The necessary information will probably not appear unt
il later phases in the project: sometimes only at the design or implementation phases do you di}{s}{cover a deeper or more subtle need in your system. In the case of adding new types (which was the focus of most of the \'93recycle\'94
 examples) you might r}{e}{alize that you need a particular inheritance hierarchy only when you are in the maintenance phase and you begin extending the system! }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_451" \\o "A_451" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400350031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_580]#}{One of the most important things that you\rquote ll learn by studying design patterns seems to be an about-face from what has been promoted so far in this book. That is: \'93OOP is all about polymorphism.\'94
 This statement can produce the \'93two-year-old with a hammer\'94 syndrome (everything looks like a nail). Put another way, it\rquote s hard enough to \'93get\'94
 polymorphism, and once you do, you try to cast all your designs into that one particular mold. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_452" \\o "A_452" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400350032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_581]#}{What design patterns say is that OOP isn\rquote t just about polymorphism. It\rquote s about \'93separating the things that change from the things that stay the same.\'94 }{\pard\plain \ql \li360\ri0\sa180\sl240\slmult0
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \v\f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\xe {polymorphism}}}{Polymorphism is an especially important way to do this, and it tur
ns out to be helpful if the programming language directly supports polymo}{r}{phism (so you don\rquote t have to wire it in yourself, which would tend to make it prohibitively expensive). But design patterns in general show }{\i other}{
 ways to accomplish the basic goal, and once your eyes have been opened to this you will begin to search for more creative designs. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_453" \\o "A_453" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400350033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_582]#}{Since the }{\i Design Patterns}{ book came out and made 
such an impact, people have been searching for other patterns. You can expect to see more of these appear as time goes on. Here are some sites recommended by Jim Coplien, of C++ fame (}{\i http://www.bell-labs.com/~cope}{
), who is one of the main proponents of the patterns movement: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_454" \\o "A_454" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400350034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\i\v #[BT_583]#}{\i http://st-www.cs.uiuc.edu/users/patterns\line http://c2.com/cgi/wiki\line http://c2.com/ppr\line http://www.bell-labs.com/people/cope/Patterns/Process/index.html\line http://www.bell-labs.com/cgi-user/OrgPatterns/OrgPatterns\line 
http://st-www.cs.uiuc.edu/cgi-bin/wikic/wikic\line http://www.cs.wustl.edu/~schmidt/patterns.html\line http://www.espinc.com/patterns/overview.html
\par }{\v #[BT_584]#}{Also note there has been a yearly conference on design patterns, called PLOP, that produces a published proceedings, the third of which came out in late 1997 (all published by Addison-Wesley). }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_455" \\o "A_455" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400350035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc375545420}
{\*\bkmkstart _Toc476705929}{\*\bkmkstart _Toc534420147}Exercises{\*\bkmkend _Toc375545420}{\*\bkmkend _Toc476705929}{\*\bkmkend _Toc534420147}
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 1. \tab}}\pard\plain \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls11\adjustright\rin0\lin1080\itap0 
\f28\fs22\lang1033\langfe1033\kerning20\cgrid\langnp1033\langfenp1033 {Add}{ a class }{\b Plastic}{ to }{\b TrashVisitor.py}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_456" \\o "A_456" }{
{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400350036000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 2. \tab}}\pard \s39\ql \fi-360\li1080\ri0\sa180\sl280\slmult0\widctlpar\jclisttab\tx1080\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin1080\itap0 {Add}{ a class }{\b Plastic}{ to }{\b 
DynaTrash.py}{. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_457" \\o "A_457" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400350037000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par {\listtext\pard\plain\s39 \f29\kerning20 \hich\af29\dbch\af0\loch\f29 3. \tab}}{Create a decorator like }{\b VisitableDecorator}{, but for the multiple dispatching example, along with an \'93adapter decorator\'94 class like the one created for }{\b 
VisitableDecorator}{. Build the rest of the example and show that it works. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_458" \\o "A_458" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400350038000000}}}{\fldrslt {\cs42\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_585]#
\par #[BT_586]#\sect }\sectd \binfsxn-121\binsxn-121\psz1\linex0\headery0\footery1620\colsx432\endnhere\titlepg\sectdefaultcl \pard\plain \s1\ql \fi-1080\li990\ri0\sa360\sl240\slmult0
\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin990\itap0 \cbpat8 \f29\fs76\cf1\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420148}13: Projects{\*\bkmkend _Toc534420148}
\par }\pard\plain \s15\ql \li360\ri0\sa180\sl270\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cf6 This chapter has not had any significant translation yet.
\par }{A number of more challenging projects for you to solve. [[Some of these may turn into examples in the book, and so at some point might disappear from here]] }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_459" \\o "A_459" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400350039000000}}}{\fldrslt {\cs42\fs22\ul\cf2\kerning18 Add Comment}}}{
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420149}
Rats & Mazes{\*\bkmkend _Toc534420149}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_587]#}{First, create a }{\i Blackboard}{
 (cite reference) which is an object on which anyone may record information. This particular blackboard draws a maze, and is used as information comes back about the structure of a maze from the rats that are investigating it. }{\field\fldedit{\*\fldinst 
{ HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_460" \\o "A_460" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400360030000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_588]#}{Now create the maze itself. Like a real maze, this object reveals very little information about itself \emdash  given a coordinate, it will tell you whether there ar
e walls or spaces in the four directions immediately surrounding that coordinate, but no more. For starters, read the maze in from a text file but consider hunting on the internet for a maze-generating algorithm. In any event, the result should be an obje
ct that, given a maze coordinate, will report walls and spaces around that coordinate. Also, you must be able to ask it for an entry point to the maze. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_461" \\o "A_461" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400360031000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_589]#}{Finally, create the maze-investigating }{\b Rat}{
 class. Each rat can communicate with both the blackboard to give the current information and the maze to request new information based on the current position of the rat. However, each time a rat reaches a
 decision point where the maze branches, it creates a new rat to go down each of the branches. Each rat is driven by its own thread. When a rat reaches a dead end, it terminates itself after reporting the results of its final investigation to the blackboa
rd. }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_462" \\o "A_462" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400360032000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_590]#}{The goal is to completely map the maze, but you must also determine whether the end condition will be naturally found or whether the blackboard must be responsible for the decision. }{\field\fldedit{\*\fldinst {
 HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_463" \\o "A_463" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400360033000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_591]#}{An example implementation by Jeremy Meyer:
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c13:Maze.py
\par 
\par class Maze(Canvas):
\par   private Vector lines # a line is a char array
\par   private int width = -1
\par   private int height = -1
\par   public static void main (String [] args) 
\par   throws IOException:
\par     if (args.length < 1):
\par       print \'93Enter filename\'93
\par       System.exit(0)
\par 
\par     Maze m = Maze()
\par     m.load(args[0])
\par     Frame f = Frame()
\par     f.setSize(m.width*20, m.height*20)
\par     f.add(m)     
\par     Rat r = Rat(m, 0, 0)
\par     f.setVisible(1)
\par 
\par   def __init__(self):
\par     lines = Vector()
\par     setBackground(Color.lightGray)
\par 
\par   synchronized public boolean 
\par   isEmptyXY(int x, int y):
\par     if (x < 0) x += width
\par     if (y < 0) y += height 
\par     # Use mod arithmetic to bring rat in line:
\par     byte[] by = 
\par       (byte[])(lines.elementAt(y%height))  
\par     return by[x%width]==' '
\par 
\par   synchronized public void 
\par   setXY(int x, int y, byte newByte):
\par     if (x < 0) x += width
\par     if (y < 0) y += height 
\par     byte[] by = 
\par       (byte[])(lines.elementAt(y%height))
\par     by[x%width] = newByte
\par     repaint()
\par 
\par   public void 
\par   load(String filename) throws IOException:
\par     String currentLine = null
\par     BufferedReader br = BufferedReader(
\par       FileReader(filename))
\par     for(currentLine = br.readLine() 
\par         currentLine != null
\par         currentLine = br.readLine()) :
\par       lines.addElement(currentLine.getBytes())       
\par       if(width < 0 || 
\par          currentLine.getBytes().length > width)
\par         width = currentLine.getBytes().length
\par 
\par     height = len(lines)
\par     br.close()
\par          
\par   def update(self, Graphics g): paint(g) 
\par   public void paint (Graphics g):
\par     int canvasHeight = self.getBounds().height
\par     int canvasWidth  = self.getBounds().width
\par     if (height < 1 || width < 1) 
\par       return # nothing to do 
\par     int width = 
\par       ((byte[])(lines.elementAt(0))).length
\par     for (int y = 0 y < len(lines) y++):
\par       byte[] b
\par       b = (byte[])(lines.elementAt(y))
\par       for (int x = 0 x < width x++):
\par         switch(b[x]):
\par           case ' ': # empty part of maze
\par             g.setColor(Color.lightGray)
\par             g.fillRect(
\par               x*(canvasWidth/width),
\par               y*(canvasHeight/height),
\par               canvasWidth/width,
\par               canvasHeight/height)
\par             break
\par           case '*':     # a wall 
\par             g.setColor(Color.darkGray)
\par             g.fillRect(
\par               x*(canvasWidth/width),
\par               y*(canvasHeight/height),
\par               (canvasWidth/width)-1,
\par               (canvasHeight/height)-1)
\par             break
\par           default:      # must be rat
\par             g.setColor(Color.red)
\par             g.fillOval(x*(canvasWidth/width),
\par             y*(canvasHeight/height),
\par             canvasWidth/width,
\par             canvasHeight/height)
\par             break              
\par               
\par            
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_592]#
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {# c13:Rat.py
\par 
\par class Rat:
\par   static int ratCount = 0
\par   private Maze prison
\par   private int vertDir = 0 
\par   private int horizDir = 0
\par   private int x,y
\par   private int myRatNo = 0
\par   def __init__(self, Maze maze, int xStart, int yStart):
\par     myRatNo = ratCount++
\par     print ("Rat no." + myRatNo + 
\par       " ready to scurry.")
\par     prison = maze
\par     x = xStart
\par     y = yStart
\par     prison.setXY(x,y, (byte)'R')
\par     Thread():
\par       def run(self)\{ scurry() 
\par     .start()
\par 
\par   def scurry(self):
\par     # Try and maintain direction if possible.
\par     # Horizontal backward
\par     boolean ratCanMove = 1
\par     while(ratCanMove):
\par       ratCanMove = 0
\par       # South 
\par       if (prison.isEmptyXY(x, y + 1)):
\par         vertDir = 1 horizDir = 0         
\par         ratCanMove = 1
\par       
\par       # North
\par       if (prison.isEmptyXY(x, y - 1))
\par         if (ratCanMove)
\par           Rat(prison, x, y-1)
\par           # Rat can move already, so give 
\par           # this choice to the next rat.
\par         else:
\par           vertDir = -1 horizDir = 0         
\par           ratCanMove = 1
\par         
\par       # West
\par       if (prison.isEmptyXY(x-1, y))
\par         if (ratCanMove)
\par           Rat(prison, x-1, y)   
\par           # Rat can move already, so give 
\par           # this choice to the next rat.
\par         else:
\par           vertDir = 0 horizDir = -1         
\par           ratCanMove = 1
\par         
\par       # East
\par       if (prison.isEmptyXY(x+1, y))
\par         if (ratCanMove)
\par           Rat(prison, x+1, y)   
\par           # Rat can move already, so give 
\par           # this choice to the next rat.
\par         else:
\par           vertDir = 0 horizDir = 1         
\par           ratCanMove = 1
\par         
\par       if (ratCanMove): # Move original rat.
\par         x += horizDir
\par         y += vertDir
\par         prison.setXY(x,y,(byte)'R')
\par         # If not then the rat will die.
\par       try:
\par         Thread.sleep(2000)   
\par        catch(InterruptedException ie):
\par 
\par     print ("Rat no." + myRatNo + 
\par       " can't move..dying..aarrgggh.")
\par 
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_593]#
\par #[BT_594]#}{The maze initialization file: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_464" \\o "A_464" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400360034000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }\pard\plain \s16\ql \li360\ri0\sl240\slmult0\widctlpar\brdrl\brdrs\brdrw15\brsp200 \aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f2\fs22\lang1024\langfe1024\kerning18\cgrid\noproof\langnp1033\langfenp1033 {#:! c13:Amaze.txt
\par    * **      *  * **      *
\par  ***    * *******    * ****
\par      ***          ***      
\par  *****   **********   *****
\par  * * * * **  ** * * * **  *
\par    * * *  * **  * * *  * **
\par  *     **     *     **     
\par    * **   * **  * **   * **
\par  *** *  *** ***** *  *** **
\par  *      *   * *      *   * 
\par    * ** * *     * ** * *   
\par # :~
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_595]#
\par }\pard\plain \s3\ql \li360\ri0\sb120\sa60\sl-480\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin360\itap0 \f29\fs40\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420150}
Other maze resources{\*\bkmkend _Toc534420150}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_596]#}{
A discussion of algorithms to create mazes as well as Java source code to implement them: }{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_465" \\o "A_465" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400360035000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par }{\v #[BT_597]#}{\field{\*\fldinst { HYPERLINK "http://www.mazeworks.com/mazegen/mazegen.htm" }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000002d00000068007400740070003a002f002f007700770077002e006d0061007a00650077006f0072006b0073002e0063006f006d002f006d0061007a006500670065006e002f006d0061007a006500670065006e002e00680074006d000000e0c9ea79f9bace11
8c8200aa004ba90b5a00000068007400740070003a002f002f007700770077002e006d0061007a00650077006f0072006b0073002e0063006f006d002f006d0061007a006500670065006e002f006d0061007a006500670065006e002e00680074006d000000}}}{\fldrslt {\cs42\ul\cf2 
http://www.mazeworks.com/mazegen/mazegen.htm}}}{
\par }{\v\kerning0 #[BT_598]#}{\kerning0 A discussion of algorithms for collision detection and other individual/group moving behavior for autonomous physical objects:
\par }{\v\kerning0 #[BT_599]#}{\field{\*\fldinst {\kerning0  HYPERLINK "http://www.red3d.com/cwr/steer/" }{\kerning0 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000002000000068007400740070003a002f002f007700770077002e00720065006400330064002e0063006f006d002f006300770072002f00730074006500650072002f000000e0c9ea79f9bace118c8200aa004ba90b4000000068007400740070003a002f002f00
7700770077002e00720065006400330064002e0063006f006d002f006300770072002f00730074006500650072002f000000}}}{\fldrslt {\cs42\ul\cf2\kerning0 http://www.red3d.com/cwr/steer/}}}{\kerning0 
\par }{\v #[BT_600]#
\par }\pard\plain \s2\ql \fi-810\li720\ri0\sb120\sa120\sl-640\slmult0\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin720\itap0 \f29\fs56\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {{\*\bkmkstart _Toc534420151}
XML Decorator{\*\bkmkend _Toc534420151}
\par }\pard\plain \ql \li360\ri0\sa180\sl240\slmult0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin360\itap0 \f28\fs22\lang1033\langfe1033\kerning18\cgrid\langnp1033\langfenp1033 {\v #[BT_601]#}{
Create a pair of decorators for I/O Readers and Writers that encode (for the Writer decorator) and decode (for the reader decorator) XML}{\v .}{\field\fldedit{\*\fldinst { HYPERLINK "http://www.mindview.net/Books/TIPython/BackTalk/FindPage/A_466" \\
o "A_466" }{{\*\datafield 
10d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7e00000068007400740070003a002f002f007700770077002e006d0069006e00640076006900650077002e006e00650074002f0042006f006f006b0073002f005400490050007900740068006f006e002f0042006100
63006b00540061006c006b002f00460069006e00640050006100670065002f0041005f003400360036000000}}}{\fldrslt {\cs42\ul\cf2 Add Comment}}}{
\par 
\par }}