## shellnotes

    #awk
    `nawk` requires adding a space after `-v` but `gawk` and `mawk` don't
    `gawk` and `mawk` treat `RS` as a regex when it is two characters or longer but `nawk` doesn't
    `nawk` and `mawk` convert values like `0xff` and `0200` to numbers by default but `gawk` doesn't without `--non-decimal-data`
    `print>$1".txt"` doesn't work with `nawk` but `print>($1".txt")` does
    `mawk` doesn't support setting `RS` to null
    the regex engine in `mawk` doesn't support range expressions as of 2014 and it didn't support character classes until 2009
    `IGNORECASE` is specific to `gawk` but `tolower()` is included in POSIX
    `nextfile` is not included in POSIX but it is supported by `nawk`, `mawk`, and `gawk`
    `BEGINFILE` is specific to `gawk` but `FNR==1` is supported by other implementations
    `\n` is always a field separator when `RS` is set to an empty string
    `NR==FNR` is true for the second file if the first file is empty but `FILENAME==ARGV[1]` is not
    `nawk` and `mawk` are meant to conform to POSIX by default but `gawk` is not
    `/usr/bin/awk` is `nawk` in OS X and BSDs and `mawk` in Debian

#POSIX
    a collating element is a character, a multi-character sequence, or a collating sequence name
    a background process is a process that is the leader of a background process group
    an equivalence class is a set of collating elements with the same primary collation weight
    `$(())` is specified but `(())` and `let` are not
    `.` is specified but `source` is not
    `select` and `PS3` are not specified
    `=` is specified in `test` expressions but `==` is not
    `-a`, `-o`, and parentheses are deprecated in `test` expressions
    the result of a `test` expression with four or more arguments is said to be unspecified
    interactive shells expand `a*` in `cat foo>a*` if the expansion is a single word
    `$x` is not expanded in `true||$x`
    the `sh` binary is not required to be in `/bin/sh`
    `(` and `)` are control operators and `{` and `}` are reserved words
    `[[:graph:]]` is equivalent to `[!-~]` and `[[:print:]]` is equivalent to `[ -~]` in the POSIX locale
    `[[:space:]]` is equivalent to `[ \f\n\r\t\v]` and `[[:blank:]]` is equivalent to `[ \t]` in the POSIX locale
    BREs support `\{`, `\}`, `\(`, and `\)`, but not `\|`, `\+`, or `\?`
    POSIX 1003.2 has about 100 interfaces and SUSv3 has about 2000 interfaces
    POSIX.1-2004 is issue 6 and POSIX.1-2008 is issue 7
    `xxd` and `hexdump` are not included in POSIX but `od` is
    the only keywords specified for `tput` are `clear`, `init`, and `reset`
    `tail -c` is specified but `head -c` is not
    the only option specified for `read` is `-r`

#bash
    `source` is a special builtin but not specified by POSIX
    invoking bash as `sh` enables `xpg_echo` but only invoking bash in POSIX mode does not
    invoking bash as `sh` makes `FCEDIT` default to `ed` instead of `EDITOR` or `ed` but only invoking bash in POSIX mode does not
    process substitution is not available when bash is invoked as `sh`
    `local` and `declare` accept the same options
    `f() { for x;do :;done; };type f` shows `for x` as `for x in "$@"`
    if both `~/.profile` and ~`/.bash_profile` exist, bash only reads `~/.bash_profile` 
    parameters include positional parameters, special parameters, and variables
    `$0` is a special parameter and not a positional parameter
    `set -e;i=0;let i++` makes the shell exit but `set -e;i=-1;let i++` doesn't
    `set -e;(false)` does not make the shell exit
    `printf '%()T'` prints the current time in bash 4.3 and `printf '%()T' -1` prints the current time in bash 4.2
    `BASHOPTS` includes options settable with `shopt` and `SHELLOPTS` includes options settable with `set -o`
    you can use `type` to show the definition of a function or an alias and `declare -p` to show the definition of a variable
    `shopt -s cdable_vars;export sp=/some/path` makes `cd sp` change the directory to `/some/path`
    `\eg` (`glob-complete-word`) completes globs and `\C-x*` (`glob-expand-word`) inserts glob results
    you can use `\C-x\C-x` (`exchange-point-and-mark`) to move the point back to the old position after yanking or pasting text
    `\e\C-y` is `yank-nth-arg`
    `\e2\e\C-y` or `\e2\e.` inserts the second argument but `\e2\e.` also cycles through previous history entries when it is pressed repeatedly
    `\e0\e.` inserts the zeroth argument and `\e-\e.` inserts the second last argument
    `\C-w` (`unix-word-rubout`) deletes a whitespace-delimited word backward
    `\e\C-e` (`shell-expand-line`) performs shell expansions, alias expansion, and history expansion
    `\e\C-e` is useful for replacing a command substitution with the result
    `\e/` (`complete-filename`) can be used as an alternative to ls or to complete filenames when tab completes commands
    `\e$` (`complete-variable`) can be used to list variables
    background jobs can be started by `&`, process substitution, or `coproc`
    `3>&4-` is short for `3>&4 4>&-` or it makes FD 4 a copy of FD 3 and closes FD 4
    the edit line is the newest line in the command history buffer
    a non-interactive login shell whose parent process is `sshd` or `rshd` sources `~/.bashrc` but not `~/.bash_profile`
    `compgen -b` or `enable` lists builtins
    `compgen -A function` or `declare -F` lists functions
    `compgen -a` or `alias` lists aliases
    `compgen -e` or `export` lists exported variables
    `typeset` is an obsolete alias for `declare`
    parameters include variables, positional parameters, and special parameters
    bash 3.2 is the last version of bash released under GPLv2
    `\` suppresses alias lookup and `command` suppresses function lookup
    history expansion is not enabled in heredocs
    a pipeline is a sequence of simple commands separated by `&` or `&|`
    each compound command begins and ends with a reserved word or a control operator
    `{` and `}` are reserved words and `(` and `)` are operators
    process substitution is supported on systems that support named pipes or `/dev/fd`
    `exec -l` places a dash at the beginning of the zeroth argument
    `vi` is equivalent to `vi-command` and `emacs` is equivalent to `emacs-standard`
    a subroutine is a shell function or a shell script executed with `source`
    function definitions are compound commands
    `{ cmd1;cmd2; }|cmd3` is equivalent to `(cmd1;cmd2)|cmd3` because each part of a pipeline is run in a subshell
    `--dump-po-strings` prints `$""` strings in the gettext portable object format
    the default value for `TIMEFMT` corresponds to `$'\nreal\t%E\nuser\t%U\nsys\t%S'`
    `COMP_LINE`, `COMP_POINT`, `COMP_KEY`, and `COMP_TYPE` are set for commands and functions
    `COMP_WORDS` and `COMP_CWORD` are set for functions
    `set +m` disables job control, `set +H` disables history expansion, and `set +B` disables brace expansion
    `kill` is builtin so it recognizes job designators and can be run even if the number of processes is `ulimit -u`
    `!!:*` removes argument 0, `!!:2*` removes arguments 0 and 1, and `!!:2-` removes arguments 0, 1, and -1
    `~+` is the same as `$PWD`, `~-` is the same as `$OLDPWD`, and `~2` is the same as `dirs +2` or `${DIRSTACK[2]}`
    `C-w` (`unix-word-rubout`) treats non-whitespace characters as part of words
    `M-DEL` (`backward-kill-word`) treats letters and digits as part of words
    you can synchronize history between shells manually by running `history -w` in one shell and then running `history -r` in another shell
    `f()(:)` is slower than `f() { :; }` but `f()(:|:)` is as fast as `f() { :|:; }` and `f()(ls)` is as fast as `f() { ls; }`

#unsorted
    `[[ $x ]]` is equivalent to `[[ -n $x ]]` in bash but results in an error in zsh
    `pkill -f` matches the full command line and `pgrep -fl` matches and prints the full command line
    `env` and `printenv` print exported variables and functions and `set` and `declare` print all variables and functions
    brace expansion is performed before all other expansions in bash but between process substitution and word splitting in ksh
    in `en_US.UTF-8`, `en` is the language, `US` is the territory, and `UTF-8` is the codeset
    `LC_CTYPE` can be set to just `UTF-8` but `LANG` and `LC_ALL` have to be set to a value like `en_US.UTF-8` that includes the language and territory parts
    `head -n+4` removes the first 3 lines and `ghead -n-3` removes the last 3 lines
    if you run `mkfifo p;cat p` in one shell and `echo z>p` in a second shell, `z` is printed in the first shell
    if you run `mkfifo p;echo x>p` in one shell, `cat p` prints `x` in another shell
    the Bourne shell supported `var=value;export var` but not `export var=value`
    you can run the current command on the background by pressing `C-z` and running `bg`
    you can disown the current command by pressing `C-z` and running `bg;disown`
    `s` is sin, `c` is cos, `l` is ln, and `e` is exp in `bc`
    `[[:alpha:]]` includes Arabic and Japanese characters in Debian but not in OS X
    `rsync` 2 does not support extended attributes but `rsync` 3 does
    OS X's `rsync` uses AppleDouble files for extended attributes
    `cut -c` should count multibyte characters according to POSIX but it it equivalent to `cut -b` in coreutils
    `wc -c` counts bytes and `wc -m` counts multibyte characters even in coreutils
    `SIGXCPU` is sent when `ulimit -t` is exceeded and `SIGXFSZ` is sent when `ulimit -f` is exceeded
    `man -k` is equivalent to `apropos` and `man -f` is equivalent to `whatis`
    a process receives a `SIGPIPE` when it tries to write to a pipe with no reader left
    `%%` and `%+` are the current job and `%-` is the previous job
    `-l` makes output line-buffered in BSD `sed` but specifies a line length for the `l` command in GNU `sed`
    `-u` makes output unbuffered in GNU `sed`
    `atq` is equivalent to `at -l` and `atrm` is equivalent to `at -d`
    `NUL` is `^@` in caret notation because `@` is before `A` and `DEL` is `^?` because `?` is before `@`
    `grep -E '.{1,256}'` results in an error if `RE_DUP_MAX` is `255`
    `sha224sum`, `sha256sum`, `sha384sum`, and `sha512sum` compute SHA-2 hashes
    `declare` and `typeset` are identical in both bash and zsh but `typeset` is obsolete in bash
    the default `ARG_MAX` is one fourth of the stack size in recent versions of Linux, so `ulimit -s 4000;getconf ARG_MAX` prints `1024000`
    `-z` sets the input and output separators to null in GNU `sort`, GNU `uniq`, and GNU `sed`, and `-zZ` sets the input and output separators to null in GNU `grep`
    `\e[H` goes to the beginning of a line and `\e[F` goes to the end of the line
    `-I` disables interpreting quotes and backslashes in GNU `xargs` but not in OS X's `xargs`
    `-0` disables interpreting quotes and backslashes in both OS X's `xargs` and GNU `xargs`
    `x==;[ -n $x -a -n $x ]` results in an error in bash
    OS X comes with zsh but most Linux distributions don't
    the Thompson shell was released as part of the first version of Unix in 1971 and the Bourne shell was released in 1979 as part of Version 7 Unix
    the last version of the Bourne shell was released as part of SVR4.2
    `csh` was released in 1979 as part of 2BSD
    `/var/run/screen/S-$USER/$STY` is a domain socket used by screen
    `[[` is not supported by dash, yash, or posh
    POSIX doesn't specify local variables but LSB does
    GNU `sed` supports `\+` in BRE but POSIX and BSD `sed` don't
    `tput init` outputs initialization strings and `tput reset` outputs reset strings
    single user mode is meant to work without files in `/usr`
    `/usr/share` is used for files that can be shared by computers with different architectures
    `/boot` is meant for static files used by the boot loader
    `/lib` contains shared library images that are needed to boot the system and to run commands in the root filesystem
    `/opt` is used for static files and `/var/opt` is used of variable files
    `/usr` is meant for read-only data that can be shared between hosts
    `/var/run` contains run-time variable data
    `/var/tmp` is used for temporary files preserved between reboots
    Linux ignores the setuid bit in executables that start with `#!`
    `ctime` is updated when metadata or contents change and `mtime` is updated when contents change
    `el` erases to the end of a line, `el1` erases to the start of a line, and `ed` erases to end of display
    `smul` starts underline and `rmul` removes underline
    `cnorm` shows the cursor and `cvis` hides the cursor
    `smcup` starts alt display and `rmcup` ends alt display
    `sc` saves the cursor and `rc` loads the cursor
    `cmd&disown $!` is equivalent to cmd&disown
    many Linux distributions have deprecated `ifconfig` in favor of `iproute2`
    creation time is called `crtime` in EXT4 and `otime` in BTRFS
    GNU `ls` and OS X's `ls` don't display linefeeds as question marks if the output is not a terminal
    busybox's `ls` replaces non-printable characters with question marks even if the output is not a terminal
    if `C-\` doesn't work, you can press `C-z` and run `kill %1` or `kill -9 %1`
    `ls -l` shows `c` at the start for character special files and `b` for block special files
    OpenBSD `readlink` supports `-f` but FreeBSD and OS X `readlink` don't
    LSB specifies `at -r` but not `at -d` and POSIX specifies `at -d` but not `at -r`
    `/etc/localtime` is often a symlink to a file in `/usr/share/zoneinfo`
    bash, csh, and nksh emulate cooked mode keybindings but zsh, tcsh, and fish don't
    the `tempfile` command is specific to Debian
    `7zr` only supports 7Z, `7z` also supports other archive formats, and `7za` also supports RAR
    Thomson shell was used from V1 to V6 and Bourne shell was introduced in V7 in 1979
    `TERM=xterm tput el1|cat -v` prints `^[[1K` and `TERM=xterm infocmp -1|grep 1K` prints `el1=\E[1K,`
    `7z a` creates an archive or adds files to an archive, `7z e` extracts an archive, and `7z l` lists the contents of an archive
    Linux blocks reads from `/dev/random` when the entropy pool is empty but FreeBSD doesn't
    `1000` or `+t` is sticky, `2000` or `+g` is setgid, and `4000` or `+s` is setuid
    `MACHTYPE` (like `x86_64-apple-darwin13.1.0`) ends with `OSTYPE` (like `darwin13.1.0`)
    `3>&4` and `3<&4` both duplicate fd 4 to fd 3
    `<&` duplicates input file descriptors and `>&` duplicates output file descriptors
    bash and zsh use the term word splitting and POSIX uses the term field splitting
    `gunzip` is equivalent to `gzip -d` and `zcat` is equivalent to `gzip -dc`
    in `top` `ocpu` orders by CPU use, `ca` sets the counting mode to accumulative, and `S1234` kills PID 1234
    the short option for `file --mime` is `-I` in OS X and `-i` in Debian
    `sudo reboot` or `sudo shutdown -r now` restarts
    `jobs -l` includes pids and `jobs -p` includes only pids
    `man -k` is equivalent to `apropos` and `man -w` is equivalent to `whereis`
    `trap '' INT` ignores SIGINT, `trap : INT` sets a signal handler that does nothing for SIGINT, and `trap INT` removes traps for SIGINT
    `tail -c+4` removes the first 3 characters and `ghead -c-3` removes the last 3 characters
    `grep -h` disables printing filename headers and `grep -l` only prints filename headers
    `/private/tmp` usually has the sticky bit set so users cannot delete files owned by other users
    the default `PATH` is `/usr/bin:/bin:/usr/sbin:/sbin` in OS X and `/bin:/usr/bin:/sbin:/usr/sbin` in Debian
    you can make `sudo` not require a password by running `sudo visudo` and changing `%admin ALL=(ALL) ALL` to `%admin ALL=(ALL) NOPASSWD: ALL`
    `ffmpeg -codecs` lists media bitstream formats, `ffmpeg -filters` lists libavfilter filters, and `ffmpeg -bsfs` lists bitstream filters
    `curl -O` saves files to the current directory and `wget -O-` outputs to STDOUT
    `curl -R` preserves timestamps and `wget --no-use-server-timestamps` doesn't preserve timestamps
    `cp -R */ /tmp` copies the contents of the directories but `mv */ /tmp` moves the directories themselves
    if `file1` and `file2` exist, `echo file[12]` prints `file1 file2` in zsh but `file[12]` in bash
    `x='a*';[[ abc = $x ]];echo $?` prints `0` in bash and `1` in zsh
    `x=a%a;echo ${x/%/b}` prints `aba` in bash and `a%ab` in zsh, but `x=a%a;echo ${x/\%/b}` prints `aba` in both bash and zsh
    `a=x\\;b=\\;echo "${a%$b}"` prints `x\` in bash and `x` in zsh, but `a=x\\;b=\\;echo "${a%"$b"}"` prints `x` in both bash and zsh
    `x=aa;y=bb;echo "${x/aa/"$y"}"` prints `bb` in bash 4.3 and later and zsh but `"bb"` in bash 4.2 and earlier
    `a=\\;b=\\;echo "${a/$b/x}"` prints `\` in bash and `x` in zsh, but `a=\\;b=\\;echo "${a/"$b"/x}"` prints `x` in both bash and zsh
    `x=aa;quote=\';echo "${x/aa/$quote}"` prints `'` in bash and zsh
    `x=aa;echo "${x/aa/\'}"` prints `'` in bash 4.3 but `\'` in older versions of bash and in zsh
    `x=aa;echo "${x/aa/'}"` prints `'` in zsh but is blocked because of an unmatched quote in bash
    `a=\\;b=\\;c=x;echo "${a//"$b"/$c}"` prints `x` in different versions of bash and in zsh
    `a=\\;b=\\;c=x;echo "${a//"$b"/"$c"}"` prints `x` in bash 4.3 and later and in zsh and `"x"` in older versions of bash
    `a=\\;b=\\;c=x;echo "${a//$b/$c}"` prints `x` in zsh and `\` in bash
    `[[ 009 -lt 010 ]]` and `((009<010))` result in an error in bash but not zsh, but `[[ 009 < 010 ]]` works with both bash and zsh
    `f() { x=b; };x=a;f;echo $x` prints `b` but `f() { local x=b; };x=a;f;echo $x` prints `a` in bash and zsh
    `read a< <(printf 'x\0x');echo $a` prints `xx` in bash 4.3 but `x` in older versions of bash
    `[[ 010+2 -eq 10 ]];echo $?` prints `0` in bash and `1` in zsh and `[ 010+2 -eq 10 ]`  prints `1` in bash and results in an error in zsh
    `x=1;x=2|x=3;echo $x` prints `1` in bash and `3` in zsh and `shopt -s lastpipe;set +m;x=1;x=2|x=3;echo $x` prints `3` in bash
    `IFS=0;set {1..101};echo $#` prints `1 1` and `IFS=0;set {1..101};echo "$#"` prints `101`
    `x=0;f() { for x in 1;do :;done; };f;echo $x` prints `1` in bash and zsh but `x=0;f() { local x;for x in 1;do :;done; };f;echo $x` prints `0` in bash and zsh
    `printf %s\\n A B a b|LC_ALL=en_US.UTF-8 sort|tr -d \\n` prints `ABab` in OS X and `aAbB` in Ubuntu
    SUSv2 included `tar` and `cpio` but SUSv3 only includes `pax`
    `shopt -s failglob` enables treating non-matching globs as errors in bash and `setopt nonomatch` disables treating them as errors in zsh
    `setopt interactivecomments` allows interactive comments in zsh and `shopt -u interactive-comments` disallows interactive comments in bash
    `shopt -s expand_aliases` enables aliases in non-interactive shells in bash like zsh by default
    in GNU `xargs` `-r` disables running the command if the input is empty or only contains empty lines, which is the default behavior in OS X's `xargs` which doesn't have `-r`
    `cp -r` and `cp -R` are equivalent in coreutils, but in OS X `cp -r` follows symlinks and reads the contents of special files and FIFOs but `cp -R` doesn't
    `cut` prints the whole line if the line doesn't contain the delimiter character, so for example `echo a|cut -d\; -f2` prints `a`
